<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YBC HomePage</title>
  <subtitle>Study~ Work~ Life~ Everything is here~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yular.github.io/"/>
  <updated>2017-07-31T08:05:38.000Z</updated>
  <id>http://yular.github.io/</id>
  
  <author>
    <name>BaiChuan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DynamoDB QuickStart Guide</title>
    <link href="http://yular.github.io/2017/07/31/DynamoDB-QuickStart-Guide/"/>
    <id>http://yular.github.io/2017/07/31/DynamoDB-QuickStart-Guide/</id>
    <published>2017-07-31T08:05:16.000Z</published>
    <updated>2017-07-31T08:05:38.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Database" scheme="http://yular.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Setup API Gateway Custom Authorizer Lambda Function in Java</title>
    <link href="http://yular.github.io/2017/07/31/Setup-API-Gateway-Custom-Authorizer-Lambda-Function-in-Java/"/>
    <id>http://yular.github.io/2017/07/31/Setup-API-Gateway-Custom-Authorizer-Lambda-Function-in-Java/</id>
    <published>2017-07-31T08:03:46.000Z</published>
    <updated>2017-07-31T08:04:41.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Cloud Computing" scheme="http://yular.github.io/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of The Pragmatic Programmer</title>
    <link href="http://yular.github.io/2017/07/30/Reading-Note-of-The-Pragmatic-Programmer/"/>
    <id>http://yular.github.io/2017/07/30/Reading-Note-of-The-Pragmatic-Programmer/</id>
    <published>2017-07-30T07:09:01.000Z</published>
    <updated>2017-08-01T05:46:02.000Z</updated>
    
    <content type="html">&lt;p&gt;I just finished reading a book called &lt;code&gt;The Pragmatic Programmer&lt;/code&gt;, and found that this book was really helpful for entry level software engineer. I collected and then categorized the useful tips (personally I think) from that book, and noted and shared them here. And discussion is welcomed.&lt;/p&gt;
&lt;p&gt;Tips with a question mark at the end means that I do not fully understand what the tip means.&lt;/p&gt;
&lt;h3 id=&quot;Design&quot;&gt;&lt;a href=&quot;#Design&quot; class=&quot;headerlink&quot; title=&quot;Design&quot;&gt;&lt;/a&gt;Design&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Design with Contracts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design by Contract.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Tool&quot;&gt;&lt;a href=&quot;#Tool&quot; class=&quot;headerlink&quot; title=&quot;Tool&quot;&gt;&lt;/a&gt;Tool&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Have a text editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Best-Practice&quot;&gt;&lt;a href=&quot;#Best-Practice&quot; class=&quot;headerlink&quot; title=&quot;Best Practice(?)&quot;&gt;&lt;/a&gt;Best Practice(?)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Do not Use Manual Procedures.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make bug reproducible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check my code first, and then bugs from third party.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Test&quot;&gt;&lt;a href=&quot;#Test&quot; class=&quot;headerlink&quot; title=&quot;Test&quot;&gt;&lt;/a&gt;Test&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Test early, test often, test automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Saboteurs to test your testing.&lt;br&gt;It means that appoint a project saboteur, take a separate copy of the source tree, introduce bugs on purpose, and verify that the tests will catch them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test stage coverage, not code/line coverage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find bugs once.&lt;br&gt;Once a human tester finds a bug, it should be the last time a human tester finds that bug.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Documentation&quot;&gt;&lt;a href=&quot;#Documentation&quot; class=&quot;headerlink&quot; title=&quot;Documentation&quot;&gt;&lt;/a&gt;Documentation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Treat English as just another programming language.&lt;br&gt;It means that it is important to keep the documentation in a good way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build documentation in. Do not bolt it on.(?)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Expectation&quot;&gt;&lt;a href=&quot;#Expectation&quot; class=&quot;headerlink&quot; title=&quot;Expectation&quot;&gt;&lt;/a&gt;Expectation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gently Exceed Your Usersâ€™ Expectations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sign Your Work.&lt;br&gt;Be pround of what your have done. (Ownership.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I just finished reading a book called &lt;code&gt;The Pragmatic Programmer&lt;/code&gt;, and found that this book was really helpful for entry level 
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>AWS Cross Account Access through Assuming Role using IAM</title>
    <link href="http://yular.github.io/2017/07/25/AWS-Cross-Account-Access-through-Assuming-Role-using-IAM/"/>
    <id>http://yular.github.io/2017/07/25/AWS-Cross-Account-Access-through-Assuming-Role-using-IAM/</id>
    <published>2017-07-25T07:12:01.000Z</published>
    <updated>2017-07-25T07:14:58.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the &lt;a href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;official tutorial about Assuming Role using IAM to archieve Cross Account Access Resources&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the &lt;a href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
    
      <category term="Cloud Computing" scheme="http://yular.github.io/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>C Extern Function</title>
    <link href="http://yular.github.io/2017/07/23/C-Extern-Function/"/>
    <id>http://yular.github.io/2017/07/23/C-Extern-Function/</id>
    <published>2017-07-24T06:07:24.000Z</published>
    <updated>2017-07-24T08:15:00.000Z</updated>
    
    <content type="html">&lt;p&gt;Here we want to define a function in a C program file and would like to write another C program that can use that function. That kind of function is called extern function, which means the function uses &lt;code&gt;extern&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&quot;http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tutorial about C Extern funciton/variable from Geeksforgeeks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example from us. The example is about defining and implementing a random mysql hash key generation method.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Define-Extern-Function-in-a-Head-File&quot;&gt;&lt;a href=&quot;#Define-Extern-Function-in-a-Head-File&quot; class=&quot;headerlink&quot; title=&quot;Define Extern Function in a Head File&quot;&gt;&lt;/a&gt;Define Extern Function in a Head File&lt;/h3&gt;&lt;p&gt;To use functions coming from other libs in C, the most common way is to define those functions in head files, and those head files are used as the entries to use functions defined in them. But only functions with &lt;code&gt;extern&lt;/code&gt; keyword can be used by other C programs.&lt;/p&gt;
&lt;p&gt;Note that using extern functions are different from implementing extern functions.&lt;/p&gt;
&lt;p&gt;Here is the head file &lt;code&gt;hashkeygenerator.h&lt;/code&gt; that has the definiton of extern function.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern char *generateHashKey();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Implement-Extern-Function-in-a-C-File&quot;&gt;&lt;a href=&quot;#Implement-Extern-Function-in-a-C-File&quot; class=&quot;headerlink&quot; title=&quot;Implement Extern Function in a C File&quot;&gt;&lt;/a&gt;Implement Extern Function in a C File&lt;/h3&gt;&lt;p&gt;The function should have an algorithm to generate random hash key, and the implementation should be in the C file.&lt;/p&gt;
&lt;p&gt;Here is the C file &lt;code&gt;hashkeygenerator.c&lt;/code&gt; in this example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;quot;hashkeygenerator.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char KEY_CHAR_POOL[62] = &amp;quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char FIX_HASH_KEY_PREFIX[5] = &amp;quot;mysql&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *hash_key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern char * generateHashKey()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    srand(time(NULL));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hash_key = (char*) malloc(27);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    strcpy(hash_key, FIX_HASH_KEY_PREFIX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int i = 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(i = 5; i &amp;lt; 27; ++ i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int idx = (int)( rand()%62 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hash_key[i] = KEY_CHAR_POOL[idx];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hash_key[5] = hash_key[9] = hash_key[14] = hash_key[20] = &amp;apos;-&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (char *)hash_key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now to compile this C file, use following command:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -c hashkeygenerator.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The we will find a &lt;code&gt;hashkeygenerator.o&lt;/code&gt; file under the same folder with the head file and C file.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Test-the-Extern-Function&quot;&gt;&lt;a href=&quot;#Test-the-Extern-Function&quot; class=&quot;headerlink&quot; title=&quot;Test the Extern Function&quot;&gt;&lt;/a&gt;Test the Extern Function&lt;/h3&gt;&lt;p&gt;Below is the program to test the extern function above. Note that rand() function will return the same sequence of string if the period between two function calls is too small. Here we make it 10 seconds.&lt;/p&gt;
&lt;p&gt;See the code below and the file name is &lt;code&gt;testhashkeygenerator.c&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;quot;hashkeygenerator.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *key_one = generateHashKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts(key_one);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsigned int retTime = time(0) + 10; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (time(0) &amp;lt; retTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *key_two = generateHashKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts(key_two);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(strcmp(key_one, key_two) == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        puts(&amp;quot;Two Identical Keys are generated!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now we need to generate an executable file by runing this command:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -Wall -o testhashkeygenerator testhashkeygenerator.c hashkeygenerator.o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;To run the file, use this command:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./testhashkeygenerator&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And we will see two random hash key as follow:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql-VYb-zJVg-4dcKA-5lymrv                                                                                                                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql-UgP-Owia-NGzmZ-zG7DAB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/yular/CCplusplus-Project/tree/master/Extern-Function&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;link of the three files above&lt;/a&gt; in this tutorial.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here we want to define a function in a C program file and would like to write another C program that can use that function. That kind of 
    
    </summary>
    
    
      <category term="C" scheme="http://yular.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle Contest Guide Summary</title>
    <link href="http://yular.github.io/2017/06/30/Kaggle-Contest-Guide-Summary/"/>
    <id>http://yular.github.io/2017/06/30/Kaggle-Contest-Guide-Summary/</id>
    <published>2017-07-01T02:18:26.000Z</published>
    <updated>2017-07-01T02:18:26.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kaggle Contest QuickStart</title>
    <link href="http://yular.github.io/2017/06/30/Kaggle-Contest-QuickStart/"/>
    <id>http://yular.github.io/2017/06/30/Kaggle-Contest-QuickStart/</id>
    <published>2017-07-01T02:18:11.000Z</published>
    <updated>2017-07-01T02:18:11.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AWS Command Line Interface QuickStart</title>
    <link href="http://yular.github.io/2017/06/29/AWS-Command-Line-Interface-QuickStart/"/>
    <id>http://yular.github.io/2017/06/29/AWS-Command-Line-Interface-QuickStart/</id>
    <published>2017-06-30T05:18:50.000Z</published>
    <updated>2017-06-30T05:18:50.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ruby YAML Summary</title>
    <link href="http://yular.github.io/2017/06/29/Ruby-YAML-Summary/"/>
    <id>http://yular.github.io/2017/06/29/Ruby-YAML-Summary/</id>
    <published>2017-06-30T05:18:26.000Z</published>
    <updated>2017-06-30T06:58:33.000Z</updated>
    
    <content type="html">&lt;p&gt;YAML is data serialisation language designed to be directly writable and readable by humans. YAML is not a Markup language but a data serialization standard for all programming languages.&lt;/p&gt;
&lt;p&gt;Here is the link of &lt;a href=&quot;http://www.yaml.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML Org&lt;/a&gt;.&lt;br&gt;Here is the link of &lt;a href=&quot;http://yaml.org/YAML_for_ruby.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML Cookbook for Ruby&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;YAML is data serialisation language designed to be directly writable and readable by humans. YAML is not a Markup language but a data ser
    
    </summary>
    
    
      <category term="Ruby" scheme="http://yular.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>AWS SAM QuickStart</title>
    <link href="http://yular.github.io/2017/06/29/AWS-SAM-QuickStart/"/>
    <id>http://yular.github.io/2017/06/29/AWS-SAM-QuickStart/</id>
    <published>2017-06-30T05:00:40.000Z</published>
    <updated>2017-06-30T05:00:40.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lua User-Defined Types in C</title>
    <link href="http://yular.github.io/2017/06/01/Lua-User-Defined-Types-in-C/"/>
    <id>http://yular.github.io/2017/06/01/Lua-User-Defined-Types-in-C/</id>
    <published>2017-06-01T08:13:28.000Z</published>
    <updated>2017-06-01T08:13:50.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Lua" scheme="http://yular.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Amazon AWS Training Resource List</title>
    <link href="http://yular.github.io/2017/05/30/Amazon-AWS-Training-Resource-List/"/>
    <id>http://yular.github.io/2017/05/30/Amazon-AWS-Training-Resource-List/</id>
    <published>2017-05-31T05:26:10.000Z</published>
    <updated>2017-05-31T08:16:44.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is a list of training resources of Amazon AWS.&lt;/p&gt;
&lt;h3 id=&quot;QwikLab&quot;&gt;&lt;a href=&quot;#QwikLab&quot; class=&quot;headerlink&quot; title=&quot;QwikLab&quot;&gt;&lt;/a&gt;QwikLab&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://qwiklabs.com/?locale=zh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;This site&lt;/a&gt; offers a lot of AWS labs which can help AWS users to learn how to use various kinds of AWS services.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is a list of training resources of Amazon AWS.&lt;/p&gt;
&lt;h3 id=&quot;QwikLab&quot;&gt;&lt;a href=&quot;#QwikLab&quot; class=&quot;headerlink&quot; title=&quot;QwikLab&quot;&gt;&lt;/a&gt;QwikLa
    
    </summary>
    
    
      <category term="Cloud Computing" scheme="http://yular.github.io/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit Quickstart Guide</title>
    <link href="http://yular.github.io/2017/05/30/Retrofit-Quickstart-Guide/"/>
    <id>http://yular.github.io/2017/05/30/Retrofit-Quickstart-Guide/</id>
    <published>2017-05-31T05:25:42.000Z</published>
    <updated>2017-05-31T05:25:42.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Stub Test vs Mock Test vs Spy Test</title>
    <link href="http://yular.github.io/2017/05/30/Stub-Test-vs-Mock-Test-vs-Spy-Test/"/>
    <id>http://yular.github.io/2017/05/30/Stub-Test-vs-Mock-Test-vs-Spy-Test/</id>
    <published>2017-05-31T05:25:29.000Z</published>
    <updated>2017-06-02T08:20:25.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the Wikipedia link about &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_double&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Test Double&lt;/a&gt;. There are five kinds of &lt;code&gt;Test Doubles&lt;/code&gt;: &lt;code&gt;Dummy Test&lt;/code&gt;, &lt;code&gt;Fake Test&lt;/code&gt;, &lt;code&gt;Stub Test&lt;/code&gt;, &lt;code&gt;Mock Test&lt;/code&gt; and &lt;code&gt;Spy Test&lt;/code&gt;. Here we focus on the last three kinds of test.&lt;/p&gt;
&lt;h3 id=&quot;Stub-Test&quot;&gt;&lt;a href=&quot;#Stub-Test&quot; class=&quot;headerlink&quot; title=&quot;Stub Test&quot;&gt;&lt;/a&gt;Stub Test&lt;/h3&gt;&lt;h3 id=&quot;Mock-Test&quot;&gt;&lt;a href=&quot;#Mock-Test&quot; class=&quot;headerlink&quot; title=&quot;Mock Test&quot;&gt;&lt;/a&gt;Mock Test&lt;/h3&gt;&lt;h3 id=&quot;Spy-Test&quot;&gt;&lt;a href=&quot;#Spy-Test&quot; class=&quot;headerlink&quot; title=&quot;Spy Test&quot;&gt;&lt;/a&gt;Spy Test&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the Wikipedia link about &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_double&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Test Double&lt;/a&gt;. Ther
    
    </summary>
    
    
      <category term="Test" scheme="http://yular.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Number Theory</title>
    <link href="http://yular.github.io/2017/05/07/Thinking-in-Number-Theory/"/>
    <id>http://yular.github.io/2017/05/07/Thinking-in-Number-Theory/</id>
    <published>2017-05-07T22:04:19.000Z</published>
    <updated>2017-05-07T22:40:05.000Z</updated>
    
    <content type="html">&lt;p&gt;Number theory problems are very popular in algorithm programming contest. Most of time it is not easy to figure out the solution. Now here we will propose some generic ideas to think through this kind of problems.&lt;/p&gt;
&lt;p&gt;This artical will be updated continously.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;1-Prime-Check&quot;&gt;&lt;a href=&quot;#1-Prime-Check&quot; class=&quot;headerlink&quot; title=&quot;1. Prime Check&quot;&gt;&lt;/a&gt;1. Prime Check&lt;/h3&gt;&lt;p&gt;Given an integer, check whether it is a prime or not is a high frequent problem. There are a lot of algorithms to do this check. Some of them are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The naive O(n^1.5) algorithm:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bool isPrime(int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 2; i &amp;lt;= sqrt(n); ++ i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(n%i == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sieve of Eratosthenes&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rabin-Miller primality test algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes, we need to figure out all the primes within a specific range. In that case, the second algorithm usually is the best choice, expecially for the problems described in the next sections.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;2-Prime-Factors&quot;&gt;&lt;a href=&quot;#2-Prime-Factors&quot; class=&quot;headerlink&quot; title=&quot;2. Prime Factors&quot;&gt;&lt;/a&gt;2. Prime Factors&lt;/h3&gt;&lt;p&gt;In Number Theory problems, we are ussually asked to figure out the factors of a given integer. In this case, a good idea (not always) is to figure out all its prime factors and their powers. To do that, we need to use (not always) &lt;code&gt;Sieve of Eratosthenes&lt;/code&gt; to generate all the primes no larger than given integer. But this solution is not a silver bullet because sometimes the given integer is so large that we do not have enough memory to store all the primes or calculate them within the timebound.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;3-Integer-Generation&quot;&gt;&lt;a href=&quot;#3-Integer-Generation&quot; class=&quot;headerlink&quot; title=&quot;3. Integer Generation&quot;&gt;&lt;/a&gt;3. Integer Generation&lt;/h3&gt;&lt;p&gt;Maybe we find that it is inpractical to divide the given integer into mulplication of primes. Thus, we can try to multiply the primes we have to generate another integer. In this scenario, we do not have to worry about the limited memory to save large number of primes or find all the required primes in a short time. The reason is that even we multiply the same prime for several times (maybe around 30 or even less), we can get a very large integer. Remember, &lt;code&gt;2^64 = 18446744073709551616&lt;/code&gt; .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Number theory problems are very popular in algorithm programming contest. Most of time it is not easy to figure out the solution. Now her
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yular.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Flowers Symbolism</title>
    <link href="http://yular.github.io/2017/04/30/Flowers-Symbolism/"/>
    <id>http://yular.github.io/2017/04/30/Flowers-Symbolism/</id>
    <published>2017-04-30T23:43:55.000Z</published>
    <updated>2017-04-30T23:49:12.000Z</updated>
    
    <content type="html">&lt;p&gt;Every kind of flower has its own meaning/symbolism. Here is the list of &lt;a href=&quot;http://baike.baidu.com/item/%E8%8A%B1%E8%AF%AD%E5%BD%95&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flowers symbolism - Chinese version&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Plant_symbolism&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Plant symbolism - English version&lt;/a&gt;, or &lt;a href=&quot;http://www.buzzle.com/articles/list-of-flower-names-with-meanings-and-pictures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this link&lt;/a&gt; or &lt;a href=&quot;http://www.buzzle.com/articles/flowers-meanings-list-of-flowers-and-their-meanings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Every kind of flower has its own meaning/symbolism. Here is the list of &lt;a href=&quot;http://baike.baidu.com/item/%E8%8A%B1%E8%AF%AD%E5%BD%95&quot;
    
    </summary>
    
    
      <category term="Life" scheme="http://yular.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Java Guice Library</title>
    <link href="http://yular.github.io/2017/04/30/Java-Guice-Library/"/>
    <id>http://yular.github.io/2017/04/30/Java-Guice-Library/</id>
    <published>2017-04-30T10:02:10.000Z</published>
    <updated>2017-04-30T10:04:51.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/google/guice/wiki/Motivation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;official wiki of Guice&lt;/a&gt;. Google Guice is a dependency injection framework. Unlike Java Spring which is a comprehensive framework, Guice only focuses on dependency injection feature and now can support AOP.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the &lt;a href=&quot;https://github.com/google/guice/wiki/Motivation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;official wiki of Guice&lt;/a&gt;. Google G
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Spring vs Google Guice</title>
    <link href="http://yular.github.io/2017/04/30/Java-Spring-vs-Google-Guice/"/>
    <id>http://yular.github.io/2017/04/30/Java-Spring-vs-Google-Guice/</id>
    <published>2017-04-30T09:48:14.000Z</published>
    <updated>2017-04-30T09:56:26.000Z</updated>
    
    <content type="html">&lt;p&gt;Both Java Spring and Google Guice are powerful dependency injection frameworks. Java Spring is a comprehensive stack but Guice only focuses on dependency injection.&lt;/p&gt;
&lt;p&gt;Here is a good &lt;a href=&quot;https://github.com/google/guice/wiki/SpringComparison&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;explanation of comparision between Spring and Guice&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Both Java Spring and Google Guice are powerful dependency injection frameworks. Java Spring is a comprehensive stack but Guice only focus
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Ruby CodeStyle Guide</title>
    <link href="http://yular.github.io/2017/04/22/Ruby-CodeStyle-Guide/"/>
    <id>http://yular.github.io/2017/04/22/Ruby-CodeStyle-Guide/</id>
    <published>2017-04-22T18:06:57.000Z</published>
    <updated>2017-04-22T18:21:46.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is a good code style guide for Ruby. Click &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide#no-nested-conditionals&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is a good code style guide for Ruby. Click &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide#no-nested-conditionals&quot; target=&quot;_bla
    
    </summary>
    
    
      <category term="Ruby" scheme="http://yular.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Test</title>
    <link href="http://yular.github.io/2017/04/16/Thinking-in-Test/"/>
    <id>http://yular.github.io/2017/04/16/Thinking-in-Test/</id>
    <published>2017-04-16T09:02:28.000Z</published>
    <updated>2017-04-16T10:09:39.000Z</updated>
    
    <content type="html">&lt;p&gt;This summary may be updated in the future.&lt;/p&gt;
&lt;p&gt;We need to follow some steps to test service starting from development to deployment. It is very important because it can help us to find issues and fix them as soon as possible before customer experience become worse.&lt;/p&gt;
&lt;p&gt;Roughly, there are maily &lt;code&gt;Four&lt;/code&gt; steps in the through test on service. They are tests/verification in (local) development, tests while building service in remote machines, tests in different stages of deployment on remote machines, and manual verification of services on remote machines.&lt;/p&gt;
&lt;p&gt;Here are some details of these steps.&lt;/p&gt;
&lt;h2 id=&quot;Local-Tests&quot;&gt;&lt;a href=&quot;#Local-Tests&quot; class=&quot;headerlink&quot; title=&quot;Local Tests&quot;&gt;&lt;/a&gt;Local Tests&lt;/h2&gt;&lt;hr&gt;

&lt;p&gt;When develop service on the local, we need to test it before build and deploy it on remote machines. In local development, at least we need these tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unit Tests&lt;/li&gt;
&lt;li&gt;Integration Tests (Test integration between service and data storage or among different components of the service)&lt;/li&gt;
&lt;li&gt;Manual Verification&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this step, we need to check test coverage including class coverage, method coverage and line coverage.&lt;/p&gt;
&lt;h2 id=&quot;Tests-While-Building-Software-on-Remote-Machines&quot;&gt;&lt;a href=&quot;#Tests-While-Building-Software-on-Remote-Machines&quot; class=&quot;headerlink&quot; title=&quot;Tests While Building Software on Remote Machines&quot;&gt;&lt;/a&gt;Tests While Building Software on Remote Machines&lt;/h2&gt;&lt;hr&gt;

&lt;p&gt;Before we actually deploy service on remote machines, we need to build it. While building service, we need to run the tests which are written in development. These tests are unit tests and integration tests in the last stage.&lt;/p&gt;
&lt;p&gt;In this stage, the building process stops if any tests fail.&lt;/p&gt;
&lt;h2 id=&quot;Tests-After-Deploying-Software-on-Remote-Machines&quot;&gt;&lt;a href=&quot;#Tests-After-Deploying-Software-on-Remote-Machines&quot; class=&quot;headerlink&quot; title=&quot;Tests After Deploying Software on Remote Machines&quot;&gt;&lt;/a&gt;Tests After Deploying Software on Remote Machines&lt;/h2&gt;&lt;hr&gt;

&lt;p&gt;After deploy service on the remote machines successfully, we need to test the public APIs or performance of the service in all the stages of deployment. Different stages may include Beta stage, Gamma stage, PreProd stage and Prod stage or even more stages.&lt;/p&gt;
&lt;p&gt;In these stages, we need to run following tests: Load Tests, Fuzz Tests, Code Review Verification and tests gathering performance statistics. &lt;/p&gt;
&lt;hr&gt;

&lt;h2 id=&quot;Manual-Verification-After-Deployment-of-Remote-Machines&quot;&gt;&lt;a href=&quot;#Manual-Verification-After-Deployment-of-Remote-Machines&quot; class=&quot;headerlink&quot; title=&quot;Manual Verification After Deployment of Remote Machines&quot;&gt;&lt;/a&gt;Manual Verification After Deployment of Remote Machines&lt;/h2&gt;&lt;p&gt;Even though we deploy service on remote machines successfully, we still need to manually test the service. One way is to test APIs through Web GUI or Command Line Interface. Besides, we can manually change the data storage or the behaviors of system to simulate real world situation.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This summary may be updated in the future.&lt;/p&gt;
&lt;p&gt;We need to follow some steps to test service starting from development to deployment. I
    
    </summary>
    
    
      <category term="Test" scheme="http://yular.github.io/tags/Test/"/>
    
  </entry>
  
</feed>
