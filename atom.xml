<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YBC HomePage</title>
  <subtitle>Study~ Work~ Life~ Everything is here~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yular.github.io/"/>
  <updated>2017-08-07T06:30:50.000Z</updated>
  <id>http://yular.github.io/</id>
  
  <author>
    <name>BaiChuan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reading Note of Test Driven Development by Example</title>
    <link href="http://yular.github.io/2017/08/06/Reading-Note-of-Test-Driven-Development-by-Example/"/>
    <id>http://yular.github.io/2017/08/06/Reading-Note-of-Test-Driven-Development-by-Example/</id>
    <published>2017-08-07T06:30:50.000Z</published>
    <updated>2017-08-07T06:30:50.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Reading Note of Design Pattern Elements of Reusable Object-Oriented Software</title>
    <link href="http://yular.github.io/2017/08/05/Reading-Note-of-Design-Pattern-Elements-of-Reusable-Object-Oriented-Software/"/>
    <id>http://yular.github.io/2017/08/05/Reading-Note-of-Design-Pattern-Elements-of-Reusable-Object-Oriented-Software/</id>
    <published>2017-08-05T07:00:29.000Z</published>
    <updated>2017-08-07T06:40:11.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Design" scheme="http://yular.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Working Effectively with Legacy Code</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Working-Effectively-with-Legacy-Code/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Working-Effectively-with-Legacy-Code/</id>
    <published>2017-08-05T06:59:20.000Z</published>
    <updated>2017-08-07T06:40:25.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Code-Complete/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Code-Complete/</id>
    <published>2017-08-05T06:54:08.000Z</published>
    <updated>2017-08-07T06:39:47.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Clean Code</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Clean-Code/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Clean-Code/</id>
    <published>2017-08-05T06:54:00.000Z</published>
    <updated>2017-08-07T06:39:23.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Effective-Java/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Effective-Java/</id>
    <published>2017-08-05T06:53:29.000Z</published>
    <updated>2017-08-07T06:40:00.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB QuickStart Guide</title>
    <link href="http://yular.github.io/2017/07/31/DynamoDB-QuickStart-Guide/"/>
    <id>http://yular.github.io/2017/07/31/DynamoDB-QuickStart-Guide/</id>
    <published>2017-07-31T08:05:16.000Z</published>
    <updated>2017-07-31T08:05:38.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Database" scheme="http://yular.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Setup API Gateway Custom Authorizer Lambda Function in Java</title>
    <link href="http://yular.github.io/2017/07/31/Setup-API-Gateway-Custom-Authorizer-Lambda-Function-in-Java/"/>
    <id>http://yular.github.io/2017/07/31/Setup-API-Gateway-Custom-Authorizer-Lambda-Function-in-Java/</id>
    <published>2017-07-31T08:03:46.000Z</published>
    <updated>2017-07-31T08:04:41.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Cloud Computing" scheme="http://yular.github.io/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of The Pragmatic Programmer</title>
    <link href="http://yular.github.io/2017/07/30/Reading-Note-of-The-Pragmatic-Programmer/"/>
    <id>http://yular.github.io/2017/07/30/Reading-Note-of-The-Pragmatic-Programmer/</id>
    <published>2017-07-30T07:09:01.000Z</published>
    <updated>2017-08-05T04:16:38.000Z</updated>
    
    <content type="html">&lt;p&gt;I just finished reading a book called &lt;code&gt;The Pragmatic Programmer&lt;/code&gt;, and found that this book was really helpful for entry level software engineer. I collected and then categorized the useful tips (personally I think) from that book, and noted and shared them here. And discussion is welcomed.&lt;/p&gt;
&lt;p&gt;Tips with a question mark at the end means that I do not fully understand what the tip means.&lt;/p&gt;
&lt;h3 id=&quot;Fundamental-Guideline-Principle&quot;&gt;&lt;a href=&quot;#Fundamental-Guideline-Principle&quot; class=&quot;headerlink&quot; title=&quot;Fundamental Guideline/Principle&quot;&gt;&lt;/a&gt;Fundamental Guideline/Principle&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DRY: Do not Repeat Yourself&lt;br&gt;Need to get rid of following four kinds of duplication&lt;br&gt;&lt;strong&gt; Imposed duplication
&lt;/strong&gt; Inadvertent duplication&lt;br&gt;&lt;strong&gt; Impatient duplication
&lt;/strong&gt; Interdeveloper duplication&lt;br&gt;Keep the the low-level knowledge in the code, where it belongs, and reserve the comments for other, high-level explanations.&lt;br&gt;And the goal is :&lt;br&gt;** Make It Easy to Reuse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Orthogonality&lt;br&gt;It means that signify a kind of independence or decoupling. Two or more things are orthogonal if changes in one do not affect any of the others.&lt;br&gt;The goal is:&lt;br&gt;&lt;strong&gt; Eliminate Effects Between Unrelated Things.&lt;br&gt;To maintain orthogonality:
&lt;/strong&gt; Keep code decoupled&lt;br&gt;&lt;strong&gt; Avoid global data
&lt;/strong&gt; Avoid similar functions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples of orthogonality:&lt;br&gt;&lt;strong&gt; AOP
&lt;/strong&gt; CORBA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No Broken Windows&lt;br&gt;The team should take the responsibility for the quality of product. High code quality can encourage developers to continue to write high quality of code for the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boiled Frogs&lt;br&gt;Make sure everyone actively monitors the environment for changes and solve the problems as soon as possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Understand-the-Goal-Requirement&quot;&gt;&lt;a href=&quot;#Understand-the-Goal-Requirement&quot; class=&quot;headerlink&quot; title=&quot;Understand the Goal/Requirement&quot;&gt;&lt;/a&gt;Understand the Goal/Requirement&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There are NO final decisions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Tracer Bullets to Find the Target&lt;br&gt;Prototyping is the reconnaissance and intelligence gathering that takes place before a single trace bullet is fired.&lt;br&gt;Tracer bullets should be a more concrete design plan for customers to view?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototype to Learn&lt;br&gt;Here are things to prototype:&lt;br&gt;&lt;strong&gt; Architecture
&lt;/strong&gt; New functionality in an existing system&lt;br&gt;&lt;strong&gt; Structure or contents of external data
&lt;/strong&gt; Performance issues&lt;br&gt;** User interface design&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Program Close to the Problem domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not Gather Requirement - Dig for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work with a User to Think like a User.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Abstractions Live Longer than Details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a Project Glossary.&lt;br&gt;** Project items dictionary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Estimation&quot;&gt;&lt;a href=&quot;#Estimation&quot; class=&quot;headerlink&quot; title=&quot;Estimation&quot;&gt;&lt;/a&gt;Estimation&lt;/h3&gt;&lt;p&gt;Estimates are based on models of given problem. Here are the basic steps to do estimation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Understand what is being asked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build a model of the system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Break the model into components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give each parameter a value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calculate the answers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep track of estimating powers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Estimating project schedules (Steps are as follows).&lt;br&gt;&lt;strong&gt; Check requirements
&lt;/strong&gt; Analyze risk&lt;br&gt;&lt;strong&gt; Design, implement, integrate
&lt;/strong&gt; Validate with the users&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Tools&quot;&gt;&lt;a href=&quot;#Tools&quot; class=&quot;headerlink&quot; title=&quot;Tools&quot;&gt;&lt;/a&gt;Tools&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keep knowledge in Plain Text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User the Power of Command Shells.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a Single Editor Well.&lt;br&gt;It is better to know one editor very well, and use it for all editing tasks: code, documentation, memos, system administration, and so on.&lt;br&gt;A good editor should have following features:&lt;br&gt;&lt;strong&gt; Configurable
&lt;/strong&gt; Extensible&lt;br&gt;&lt;strong&gt; Programmable
&lt;/strong&gt; Syntax highlighting&lt;br&gt;&lt;strong&gt; Auto-completion
&lt;/strong&gt; Auto-indentation&lt;br&gt;&lt;strong&gt; Initial code or document boilerplate
&lt;/strong&gt; IDE-like features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always Use Source Code Control&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn a Text Manipulation Language&lt;br&gt;For example, &lt;code&gt;awk&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; commands in Shell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write Code that Writes Code (Code Generator)&lt;br&gt;&lt;strong&gt; Passive code generators are run once to produce a result. (Java Immutable class)
&lt;/strong&gt; Active code generators are used each time their results are required. (Any examples?)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Design&quot;&gt;&lt;a href=&quot;#Design&quot; class=&quot;headerlink&quot; title=&quot;Design&quot;&gt;&lt;/a&gt;Design&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Design with Contracts.&lt;br&gt;** Shy contract - A way of separate concerns and decoupling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design by Contract.&lt;br&gt;Focus on documenting (and agreeing to) the rights and responsibilities of software modules to ensure program correctness. Does no more and no less than the document claims to do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Law of Demeter for Functions&lt;br&gt;** Minimize Coupling Between Modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Analyze Workflow to Improve Concurrency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design Using Service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always Design for Concurrency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Blackboards to Coordinate Workflow&lt;br&gt;** Use the blackboard to coordinate disparate facts and agents, while still maintaining independence and even isolation among participants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some Things are Better Done than Described.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not be a Slave to Formal Methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Expensive Too Do Not Produce Better Design.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Coding-Implementation-Practice&quot;&gt;&lt;a href=&quot;#Coding-Implementation-Practice&quot; class=&quot;headerlink&quot; title=&quot;Coding/Implementation Practice&quot;&gt;&lt;/a&gt;Coding/Implementation Practice&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Crash Early.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it Can not Happen, User Assertions to Ensure That It Will not.&lt;br&gt;Precondition Check.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Exceptions for Exceptional Problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finish What You Start&lt;br&gt;The routine or object that allocates a resource should be responsible for deallocating it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic Configuration: Configure, Do not Integrate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Metadata-Driven Application: Put Abstractions in Code Details in Metadata.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Estimate the Order of Your Algorithms. And Test the estimates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not program coincidence&lt;br&gt;Need to know the idea behind the code clearly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not be a slave to history. Do not let existing code dictate future code.&lt;br&gt;Be critical to existing code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refactor (Following is the reason to do refactor)&lt;br&gt;&lt;strong&gt; Duplication
&lt;/strong&gt; Nonorthogonal design&lt;br&gt;&lt;strong&gt; Outdated knowledge
&lt;/strong&gt; Performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refactor early and often&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not use Wizard Code You Do not Understand.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Best-Practice&quot;&gt;&lt;a href=&quot;#Best-Practice&quot; class=&quot;headerlink&quot; title=&quot;Best Practice(?)&quot;&gt;&lt;/a&gt;Best Practice(?)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Do not Use Manual Procedures.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fix the Problem Not the Blame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not panic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make bug reproducible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not Assume It - Prove It.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check my code first, and then bugs from third party.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Test&quot;&gt;&lt;a href=&quot;#Test&quot; class=&quot;headerlink&quot; title=&quot;Test&quot;&gt;&lt;/a&gt;Test&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Test early, test often, test automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Saboteurs to test your testing.&lt;br&gt;It means that appoint a project saboteur, take a separate copy of the source tree, introduce bugs on purpose, and verify that the tests will catch them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test stage coverage, not code/line coverage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find bugs once.&lt;br&gt;Once a human tester finds a bug, it should be the last time a human tester finds that bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Coding is not done until all the tests run&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test against contract in unit test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Divide and conquer in testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Documentation&quot;&gt;&lt;a href=&quot;#Documentation&quot; class=&quot;headerlink&quot; title=&quot;Documentation&quot;&gt;&lt;/a&gt;Documentation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Treat English as just another programming language.&lt;br&gt;It means that it is important to keep the documentation in a good way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build documentation in. Do not bolt it on.(?)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Expectation&quot;&gt;&lt;a href=&quot;#Expectation&quot; class=&quot;headerlink&quot; title=&quot;Expectation&quot;&gt;&lt;/a&gt;Expectation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gently Exceed Your Users’ Expectations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sign Your Work.&lt;br&gt;Be pround of what your have done. (Ownership.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I just finished reading a book called &lt;code&gt;The Pragmatic Programmer&lt;/code&gt;, and found that this book was really helpful for entry level 
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>AWS Cross Account Access through Assuming Role using IAM</title>
    <link href="http://yular.github.io/2017/07/25/AWS-Cross-Account-Access-through-Assuming-Role-using-IAM/"/>
    <id>http://yular.github.io/2017/07/25/AWS-Cross-Account-Access-through-Assuming-Role-using-IAM/</id>
    <published>2017-07-25T07:12:01.000Z</published>
    <updated>2017-07-25T07:14:58.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the &lt;a href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;official tutorial about Assuming Role using IAM to archieve Cross Account Access Resources&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the &lt;a href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
    
      <category term="Cloud Computing" scheme="http://yular.github.io/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>C Extern Function</title>
    <link href="http://yular.github.io/2017/07/23/C-Extern-Function/"/>
    <id>http://yular.github.io/2017/07/23/C-Extern-Function/</id>
    <published>2017-07-24T06:07:24.000Z</published>
    <updated>2017-07-24T08:15:00.000Z</updated>
    
    <content type="html">&lt;p&gt;Here we want to define a function in a C program file and would like to write another C program that can use that function. That kind of function is called extern function, which means the function uses &lt;code&gt;extern&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&quot;http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tutorial about C Extern funciton/variable from Geeksforgeeks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example from us. The example is about defining and implementing a random mysql hash key generation method.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Define-Extern-Function-in-a-Head-File&quot;&gt;&lt;a href=&quot;#Define-Extern-Function-in-a-Head-File&quot; class=&quot;headerlink&quot; title=&quot;Define Extern Function in a Head File&quot;&gt;&lt;/a&gt;Define Extern Function in a Head File&lt;/h3&gt;&lt;p&gt;To use functions coming from other libs in C, the most common way is to define those functions in head files, and those head files are used as the entries to use functions defined in them. But only functions with &lt;code&gt;extern&lt;/code&gt; keyword can be used by other C programs.&lt;/p&gt;
&lt;p&gt;Note that using extern functions are different from implementing extern functions.&lt;/p&gt;
&lt;p&gt;Here is the head file &lt;code&gt;hashkeygenerator.h&lt;/code&gt; that has the definiton of extern function.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern char *generateHashKey();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Implement-Extern-Function-in-a-C-File&quot;&gt;&lt;a href=&quot;#Implement-Extern-Function-in-a-C-File&quot; class=&quot;headerlink&quot; title=&quot;Implement Extern Function in a C File&quot;&gt;&lt;/a&gt;Implement Extern Function in a C File&lt;/h3&gt;&lt;p&gt;The function should have an algorithm to generate random hash key, and the implementation should be in the C file.&lt;/p&gt;
&lt;p&gt;Here is the C file &lt;code&gt;hashkeygenerator.c&lt;/code&gt; in this example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;quot;hashkeygenerator.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char KEY_CHAR_POOL[62] = &amp;quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char FIX_HASH_KEY_PREFIX[5] = &amp;quot;mysql&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *hash_key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern char * generateHashKey()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    srand(time(NULL));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hash_key = (char*) malloc(27);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    strcpy(hash_key, FIX_HASH_KEY_PREFIX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int i = 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(i = 5; i &amp;lt; 27; ++ i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int idx = (int)( rand()%62 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hash_key[i] = KEY_CHAR_POOL[idx];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hash_key[5] = hash_key[9] = hash_key[14] = hash_key[20] = &amp;apos;-&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (char *)hash_key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now to compile this C file, use following command:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -c hashkeygenerator.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The we will find a &lt;code&gt;hashkeygenerator.o&lt;/code&gt; file under the same folder with the head file and C file.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Test-the-Extern-Function&quot;&gt;&lt;a href=&quot;#Test-the-Extern-Function&quot; class=&quot;headerlink&quot; title=&quot;Test the Extern Function&quot;&gt;&lt;/a&gt;Test the Extern Function&lt;/h3&gt;&lt;p&gt;Below is the program to test the extern function above. Note that rand() function will return the same sequence of string if the period between two function calls is too small. Here we make it 10 seconds.&lt;/p&gt;
&lt;p&gt;See the code below and the file name is &lt;code&gt;testhashkeygenerator.c&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;quot;hashkeygenerator.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *key_one = generateHashKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts(key_one);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsigned int retTime = time(0) + 10; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (time(0) &amp;lt; retTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *key_two = generateHashKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts(key_two);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(strcmp(key_one, key_two) == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        puts(&amp;quot;Two Identical Keys are generated!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now we need to generate an executable file by runing this command:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -Wall -o testhashkeygenerator testhashkeygenerator.c hashkeygenerator.o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;To run the file, use this command:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./testhashkeygenerator&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And we will see two random hash key as follow:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql-VYb-zJVg-4dcKA-5lymrv                                                                                                                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql-UgP-Owia-NGzmZ-zG7DAB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/yular/CCplusplus-Project/tree/master/Extern-Function&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;link of the three files above&lt;/a&gt; in this tutorial.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here we want to define a function in a C program file and would like to write another C program that can use that function. That kind of 
    
    </summary>
    
    
      <category term="C" scheme="http://yular.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle Contest Guide Summary</title>
    <link href="http://yular.github.io/2017/06/30/Kaggle-Contest-Guide-Summary/"/>
    <id>http://yular.github.io/2017/06/30/Kaggle-Contest-Guide-Summary/</id>
    <published>2017-07-01T02:18:26.000Z</published>
    <updated>2017-07-01T02:18:26.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kaggle Contest QuickStart</title>
    <link href="http://yular.github.io/2017/06/30/Kaggle-Contest-QuickStart/"/>
    <id>http://yular.github.io/2017/06/30/Kaggle-Contest-QuickStart/</id>
    <published>2017-07-01T02:18:11.000Z</published>
    <updated>2017-07-01T02:18:11.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AWS Command Line Interface QuickStart</title>
    <link href="http://yular.github.io/2017/06/29/AWS-Command-Line-Interface-QuickStart/"/>
    <id>http://yular.github.io/2017/06/29/AWS-Command-Line-Interface-QuickStart/</id>
    <published>2017-06-30T05:18:50.000Z</published>
    <updated>2017-06-30T05:18:50.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ruby YAML Summary</title>
    <link href="http://yular.github.io/2017/06/29/Ruby-YAML-Summary/"/>
    <id>http://yular.github.io/2017/06/29/Ruby-YAML-Summary/</id>
    <published>2017-06-30T05:18:26.000Z</published>
    <updated>2017-06-30T06:58:33.000Z</updated>
    
    <content type="html">&lt;p&gt;YAML is data serialisation language designed to be directly writable and readable by humans. YAML is not a Markup language but a data serialization standard for all programming languages.&lt;/p&gt;
&lt;p&gt;Here is the link of &lt;a href=&quot;http://www.yaml.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML Org&lt;/a&gt;.&lt;br&gt;Here is the link of &lt;a href=&quot;http://yaml.org/YAML_for_ruby.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML Cookbook for Ruby&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;YAML is data serialisation language designed to be directly writable and readable by humans. YAML is not a Markup language but a data ser
    
    </summary>
    
    
      <category term="Ruby" scheme="http://yular.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>AWS SAM QuickStart</title>
    <link href="http://yular.github.io/2017/06/29/AWS-SAM-QuickStart/"/>
    <id>http://yular.github.io/2017/06/29/AWS-SAM-QuickStart/</id>
    <published>2017-06-30T05:00:40.000Z</published>
    <updated>2017-06-30T05:00:40.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lua User-Defined Types in C</title>
    <link href="http://yular.github.io/2017/06/01/Lua-User-Defined-Types-in-C/"/>
    <id>http://yular.github.io/2017/06/01/Lua-User-Defined-Types-in-C/</id>
    <published>2017-06-01T08:13:28.000Z</published>
    <updated>2017-06-01T08:13:50.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Lua" scheme="http://yular.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Amazon AWS Training Resource List</title>
    <link href="http://yular.github.io/2017/05/30/Amazon-AWS-Training-Resource-List/"/>
    <id>http://yular.github.io/2017/05/30/Amazon-AWS-Training-Resource-List/</id>
    <published>2017-05-31T05:26:10.000Z</published>
    <updated>2017-05-31T08:16:44.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is a list of training resources of Amazon AWS.&lt;/p&gt;
&lt;h3 id=&quot;QwikLab&quot;&gt;&lt;a href=&quot;#QwikLab&quot; class=&quot;headerlink&quot; title=&quot;QwikLab&quot;&gt;&lt;/a&gt;QwikLab&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://qwiklabs.com/?locale=zh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;This site&lt;/a&gt; offers a lot of AWS labs which can help AWS users to learn how to use various kinds of AWS services.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is a list of training resources of Amazon AWS.&lt;/p&gt;
&lt;h3 id=&quot;QwikLab&quot;&gt;&lt;a href=&quot;#QwikLab&quot; class=&quot;headerlink&quot; title=&quot;QwikLab&quot;&gt;&lt;/a&gt;QwikLa
    
    </summary>
    
    
      <category term="Cloud Computing" scheme="http://yular.github.io/tags/Cloud-Computing/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit Quickstart Guide</title>
    <link href="http://yular.github.io/2017/05/30/Retrofit-Quickstart-Guide/"/>
    <id>http://yular.github.io/2017/05/30/Retrofit-Quickstart-Guide/</id>
    <published>2017-05-31T05:25:42.000Z</published>
    <updated>2017-05-31T05:25:42.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Stub Test vs Mock Test vs Spy Test</title>
    <link href="http://yular.github.io/2017/05/30/Stub-Test-vs-Mock-Test-vs-Spy-Test/"/>
    <id>http://yular.github.io/2017/05/30/Stub-Test-vs-Mock-Test-vs-Spy-Test/</id>
    <published>2017-05-31T05:25:29.000Z</published>
    <updated>2017-06-02T08:20:25.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the Wikipedia link about &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_double&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Test Double&lt;/a&gt;. There are five kinds of &lt;code&gt;Test Doubles&lt;/code&gt;: &lt;code&gt;Dummy Test&lt;/code&gt;, &lt;code&gt;Fake Test&lt;/code&gt;, &lt;code&gt;Stub Test&lt;/code&gt;, &lt;code&gt;Mock Test&lt;/code&gt; and &lt;code&gt;Spy Test&lt;/code&gt;. Here we focus on the last three kinds of test.&lt;/p&gt;
&lt;h3 id=&quot;Stub-Test&quot;&gt;&lt;a href=&quot;#Stub-Test&quot; class=&quot;headerlink&quot; title=&quot;Stub Test&quot;&gt;&lt;/a&gt;Stub Test&lt;/h3&gt;&lt;h3 id=&quot;Mock-Test&quot;&gt;&lt;a href=&quot;#Mock-Test&quot; class=&quot;headerlink&quot; title=&quot;Mock Test&quot;&gt;&lt;/a&gt;Mock Test&lt;/h3&gt;&lt;h3 id=&quot;Spy-Test&quot;&gt;&lt;a href=&quot;#Spy-Test&quot; class=&quot;headerlink&quot; title=&quot;Spy Test&quot;&gt;&lt;/a&gt;Spy Test&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the Wikipedia link about &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_double&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Test Double&lt;/a&gt;. Ther
    
    </summary>
    
    
      <category term="Test" scheme="http://yular.github.io/tags/Test/"/>
    
  </entry>
  
</feed>
