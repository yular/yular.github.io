<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YBC HomePage</title>
  <subtitle>Study~ Work~ Life~ Everything is here~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yular.github.io/"/>
  <updated>2018-01-21T02:42:25.000Z</updated>
  <id>http://yular.github.io/</id>
  
  <author>
    <name>BaiChuan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reading Note of Programming in Lua 4th Edition</title>
    <link href="http://yular.github.io/2018/01/20/Reading-Note-of-Programming-in-Lua-4th-Edition/"/>
    <id>http://yular.github.io/2018/01/20/Reading-Note-of-Programming-in-Lua-4th-Edition/</id>
    <published>2018-01-21T01:32:04.000Z</published>
    <updated>2018-01-21T02:42:25.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h3&gt;&lt;h4 id=&quot;Stand-Alone-Interpreter&quot;&gt;&lt;a href=&quot;#Stand-Alone-Interpreter&quot; class=&quot;headerlink&quot; title=&quot;Stand-Alone Interpreter&quot;&gt;&lt;/a&gt;Stand-Alone Interpreter&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Useful Lua idiom&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x = x or v&lt;/code&gt; is equivalent to &lt;code&gt;if not x then x = v end&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((a and b)or c) is equivalent to C expression&lt;/code&gt;a?b:c`.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Arithmetic-Operators&quot;&gt;&lt;a href=&quot;#Arithmetic-Operators&quot; class=&quot;headerlink&quot; title=&quot;Arithmetic Operators&quot;&gt;&lt;/a&gt;Arithmetic Operators&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Division&lt;ul&gt;
&lt;li&gt;float division is &lt;code&gt;/&lt;/code&gt;, which is the same as other programming lanuage.&lt;/li&gt;
&lt;li&gt;integer division is &lt;code&gt;//&lt;/code&gt;, which is called “floor division”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Strings&quot;&gt;&lt;a href=&quot;#Strings&quot; class=&quot;headerlink&quot; title=&quot;Strings&quot;&gt;&lt;/a&gt;Strings&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Strings in Lua are immutable values.&lt;/li&gt;
&lt;li&gt;Strings in Lua are subject to automatic memory management, like all other Lua objects (table, functions, etc).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;..&lt;/code&gt; to concatenate two strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any numeric operation applied to a string tries to convert the string to a number. This coersion is also applied in other places that expect a number, such as the argument to &lt;code&gt;math.sin&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h3&gt;&lt;h4 id=&quot;Stand-Alone-Interpreter&quot;&gt;&lt;a href=&quot;#Stand-Alone-Interp
    
    </summary>
    
    
      <category term="Lua" scheme="http://yular.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Java Summary III</title>
    <link href="http://yular.github.io/2018/01/16/Java-Summary-III/"/>
    <id>http://yular.github.io/2018/01/16/Java-Summary-III/</id>
    <published>2018-01-17T06:01:59.000Z</published>
    <updated>2018-01-17T06:02:09.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Summary II</title>
    <link href="http://yular.github.io/2018/01/16/Java-Summary-II-1/"/>
    <id>http://yular.github.io/2018/01/16/Java-Summary-II-1/</id>
    <published>2018-01-17T06:01:19.000Z</published>
    <updated>2018-01-17T06:01:19.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Advanced Encryption Standard (AES) Summary</title>
    <link href="http://yular.github.io/2018/01/09/Advanced-Encryption-Standard-AES-Summary/"/>
    <id>http://yular.github.io/2018/01/09/Advanced-Encryption-Standard-AES-Summary/</id>
    <published>2018-01-09T08:28:35.000Z</published>
    <updated>2018-01-09T08:41:38.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Overiew&quot;&gt;&lt;a href=&quot;#Overiew&quot; class=&quot;headerlink&quot; title=&quot;Overiew&quot;&gt;&lt;/a&gt;Overiew&lt;/h3&gt;&lt;p&gt;Here is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia link of AES&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Different-Modes-of-AES&quot;&gt;&lt;a href=&quot;#Different-Modes-of-AES&quot; class=&quot;headerlink&quot; title=&quot;Different Modes of AES&quot;&gt;&lt;/a&gt;Different Modes of AES&lt;/h3&gt;&lt;h4 id=&quot;ECB&quot;&gt;&lt;a href=&quot;#ECB&quot; class=&quot;headerlink&quot; title=&quot;ECB&quot;&gt;&lt;/a&gt;ECB&lt;/h4&gt;&lt;h4 id=&quot;PCBC&quot;&gt;&lt;a href=&quot;#PCBC&quot; class=&quot;headerlink&quot; title=&quot;PCBC&quot;&gt;&lt;/a&gt;PCBC&lt;/h4&gt;&lt;h4 id=&quot;CFB&quot;&gt;&lt;a href=&quot;#CFB&quot; class=&quot;headerlink&quot; title=&quot;CFB&quot;&gt;&lt;/a&gt;CFB&lt;/h4&gt;&lt;h4 id=&quot;OFB&quot;&gt;&lt;a href=&quot;#OFB&quot; class=&quot;headerlink&quot; title=&quot;OFB&quot;&gt;&lt;/a&gt;OFB&lt;/h4&gt;&lt;h4 id=&quot;CTR&quot;&gt;&lt;a href=&quot;#CTR&quot; class=&quot;headerlink&quot; title=&quot;CTR&quot;&gt;&lt;/a&gt;CTR&lt;/h4&gt;&lt;h4 id=&quot;CBC&quot;&gt;&lt;a href=&quot;#CBC&quot; class=&quot;headerlink&quot; title=&quot;CBC&quot;&gt;&lt;/a&gt;CBC&lt;/h4&gt;&lt;h4 id=&quot;GCM&quot;&gt;&lt;a href=&quot;#GCM&quot; class=&quot;headerlink&quot; title=&quot;GCM&quot;&gt;&lt;/a&gt;GCM&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Overiew&quot;&gt;&lt;a href=&quot;#Overiew&quot; class=&quot;headerlink&quot; title=&quot;Overiew&quot;&gt;&lt;/a&gt;Overiew&lt;/h3&gt;&lt;p&gt;Here is the &lt;a href=&quot;https://en.wikipedia.org/wiki
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yular.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of How To Win Friends and Influence People</title>
    <link href="http://yular.github.io/2018/01/06/Reading-Note-of-How-To-Win-Friends-and-Influence-People/"/>
    <id>http://yular.github.io/2018/01/06/Reading-Note-of-How-To-Win-Friends-and-Influence-People/</id>
    <published>2018-01-06T22:48:54.000Z</published>
    <updated>2018-01-06T22:49:17.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Life" scheme="http://yular.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete V</title>
    <link href="http://yular.github.io/2017/12/26/Reading-Note-of-Code-Complete-V/"/>
    <id>http://yular.github.io/2017/12/26/Reading-Note-of-Code-Complete-V/</id>
    <published>2017-12-26T09:21:51.000Z</published>
    <updated>2017-12-26T09:22:17.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Java Summary II</title>
    <link href="http://yular.github.io/2017/12/23/Java-Summary-II/"/>
    <id>http://yular.github.io/2017/12/23/Java-Summary-II/</id>
    <published>2017-12-24T06:22:42.000Z</published>
    <updated>2018-01-17T06:01:41.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Summary I</title>
    <link href="http://yular.github.io/2017/12/22/Java-Summary-I/"/>
    <id>http://yular.github.io/2017/12/22/Java-Summary-I/</id>
    <published>2017-12-22T22:46:37.000Z</published>
    <updated>2017-12-22T22:46:45.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete IV</title>
    <link href="http://yular.github.io/2017/12/11/Reading-Note-of-Code-Complete-IV/"/>
    <id>http://yular.github.io/2017/12/11/Reading-Note-of-Code-Complete-IV/</id>
    <published>2017-12-11T08:22:46.000Z</published>
    <updated>2017-12-11T08:23:17.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Clean Code</title>
    <link href="http://yular.github.io/2017/12/03/Reading-Note-of-Clean-Code/"/>
    <id>http://yular.github.io/2017/12/03/Reading-Note-of-Clean-Code/</id>
    <published>2017-12-03T21:34:25.000Z</published>
    <updated>2017-12-03T21:38:12.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete III</title>
    <link href="http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-III/"/>
    <id>http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-III/</id>
    <published>2017-12-03T21:22:27.000Z</published>
    <updated>2017-12-03T21:24:37.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete II</title>
    <link href="http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-II/"/>
    <id>http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-II/</id>
    <published>2017-12-03T21:22:21.000Z</published>
    <updated>2017-12-03T21:24:28.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete I</title>
    <link href="http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-I/"/>
    <id>http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-I/</id>
    <published>2017-12-03T21:22:17.000Z</published>
    <updated>2018-01-15T06:18:18.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the summary of the book &lt;code&gt;Code Complete&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;h4 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Problem Definition: A problem definition defines what the problem is without any reference to possible solutions. The problem definition should be in user language, and described from a useras point of view. &lt;/li&gt;
&lt;li&gt;Requirement: Requirements describe in detail what a software system is supposed to do, and they are the first step toward a solution.&lt;/li&gt;
&lt;li&gt;Data Design: Data should be normally accessed directly by only one subsystem or class, except through access classes or routines allowing access to the data in controlled and abstract ways.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Marjor classes: 20% of the classes make up 80% of the system behaviour.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the summary of the book &lt;code&gt;Code Complete&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;I
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice IV</title>
    <link href="http://yular.github.io/2017/11/13/Reading-Note-of-Java-Concurrency-in-Practice-IV/"/>
    <id>http://yular.github.io/2017/11/13/Reading-Note-of-Java-Concurrency-in-Practice-IV/</id>
    <published>2017-11-13T08:59:24.000Z</published>
    <updated>2017-11-13T08:59:36.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice III</title>
    <link href="http://yular.github.io/2017/11/05/Reading-Note-of-Java-Concurrency-in-Practice-III/"/>
    <id>http://yular.github.io/2017/11/05/Reading-Note-of-Java-Concurrency-in-Practice-III/</id>
    <published>2017-11-06T07:25:12.000Z</published>
    <updated>2017-11-06T07:25:24.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice II</title>
    <link href="http://yular.github.io/2017/11/02/Reading-Note-of-Java-Concurrency-in-Practice-II/"/>
    <id>http://yular.github.io/2017/11/02/Reading-Note-of-Java-Concurrency-in-Practice-II/</id>
    <published>2017-11-03T06:28:16.000Z</published>
    <updated>2017-11-03T06:28:28.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice I</title>
    <link href="http://yular.github.io/2017/10/30/Reading-Note-of-Java-Concurrency-in-Practice-I/"/>
    <id>http://yular.github.io/2017/10/30/Reading-Note-of-Java-Concurrency-in-Practice-I/</id>
    <published>2017-10-30T07:39:52.000Z</published>
    <updated>2018-01-15T06:03:41.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the summary of the book &lt;code&gt;Java Concurrency in Practice&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;大多数现代操作系统把线程作为时序调度的基本单元，而不是进程。&lt;/li&gt;
&lt;li&gt;多线程的开销：上下文切换。&lt;/li&gt;
&lt;li&gt;线程共享：线程共享：线程共享其所属进程的内存地址空间。因此所有同一进程中的线程访问相同变量，并且从同一个堆中分配对象。因此一个线程可能修改其他线程正在使用的数据，产生意外的效果。&lt;/li&gt;
&lt;li&gt;活跃度失败：在顺序程序中，进入了死循环，导致循环之后的代码没法执行。其包括死锁，饥饿，活锁。&lt;/li&gt;
&lt;li&gt;用annotation (@ThreadSafe for example)来标记线程安全程度。&lt;/li&gt;
&lt;li&gt;以下场景都会引发非应用程序管理线程调用应用程序代码的情况，从而导致线程不安全的情况：定时器Timer，Servlets and JavaServer Pages，远程方法调用，Swing and AWT。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Thread-Safety&quot;&gt;&lt;a href=&quot;#Thread-Safety&quot; class=&quot;headerlink&quot; title=&quot;Thread Safety&quot;&gt;&lt;/a&gt;Thread Safety&lt;/h3&gt;&lt;h4 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;共享：是指一个变量可以被多个线程访问。&lt;/li&gt;
&lt;li&gt;可变：是指变量的值在其生命周期内可变。&lt;/li&gt;
&lt;li&gt;对象的状态：即对象的数据，存储与状态变量之中，以及其他附属对象的域。&lt;/li&gt;
&lt;li&gt;线程安全：编写线程安全的代码，本质上是管理对状态的访问，而且通常都是共享的，可变的状态。一个对象是否应该是线程安全取决于它是否被多个线程访问。线程安全的性质，取决于程序中如何使用&amp;gt;对象，而不是对象完成了什么。&lt;/li&gt;
&lt;li&gt;线程安全的定义：当多个线程访问一个类时，如果不考虑这些线程在运行环境下的调度和交替执行，并且不需要额外的同步以及调用方代码作额外的其他协调，这个类的行为依然正确，则此类是线程安全的。这种类封装了必要的同步，客户不需要额外提供。同时，对线程安全类的实例进行顺序或并发的一系列操作，都不会导致实例处于无效状态。&lt;/li&gt;
&lt;li&gt;原子操作：指的是一个操作，对于所有操作（包括自己），满足这种状态：假设有操作A和B，如果从执行操作A的线程角度看，当其他线程执行B时，要么B没执行，要么B全部执行完成，这样A和B互为原子操作。&lt;/li&gt;
&lt;li&gt;弱并发：请求排队等候并依次处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方法中的本地变量是存储在线程的栈中，只有该执行线程才能访问。因此两个线程不会共享本地变量的数据。&lt;/li&gt;
&lt;li&gt;无状态对象永远是线程安全的。&lt;/li&gt;
&lt;li&gt;java.util.concurrent.atomic 包含了原子变量类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Principles&quot;&gt;&lt;a href=&quot;#Principles&quot; class=&quot;headerlink&quot; title=&quot;Principles&quot;&gt;&lt;/a&gt;Principles&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;线程安全代码规范：无论何时，只要有多于一个线程访问给定的状态变量，而且其中某个线程会写入变量，就必须使用同步来协调线程对该变量的访问。&lt;/li&gt;
&lt;li&gt;修复潜在线程安全问题的方法：&lt;ul&gt;
&lt;li&gt;不要跨线程共享变量。&lt;/li&gt;
&lt;li&gt;状态变量不可变。&lt;/li&gt;
&lt;li&gt;在任何访问状态变量的时候使用同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一开始就将一个类设计成线程安全的，比在后期重新修复它更容易。&lt;/li&gt;
&lt;li&gt;设计线程安全类过程的三要素：确定对象状态是由哪些变量构成；确定限制状态变量的不变约束；制定一个管理并发访问对象状态的策略。&lt;/li&gt;
&lt;li&gt;要约束状态变量的有效值或者状态转换，需要原子性和封装性。&lt;/li&gt;
&lt;li&gt;创建一个状态依赖的类，要使用平台与类库提供的底层机制。&lt;/li&gt;
&lt;li&gt;为了保证状态的一致性，需要在单一的原子操作中更新所有相互关联的状态变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Lock&quot;&gt;&lt;a href=&quot;#Lock&quot; class=&quot;headerlink&quot; title=&quot;Lock&quot;&gt;&lt;/a&gt;Lock&lt;/h3&gt;&lt;h4 id=&quot;Principles-1&quot;&gt;&lt;a href=&quot;#Principles-1&quot; class=&quot;headerlink&quot; title=&quot;Principles&quot;&gt;&lt;/a&gt;Principles&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;锁不仅仅是保证同步和互斥，也是保证内存可见。&lt;/li&gt;
&lt;li&gt;内部锁是可以重进入的。因此线程试图获得自己占有的锁时，请求会成功。因此锁的请求是基于每线程，而不是基于每调用。&lt;/li&gt;
&lt;li&gt;将数据封装在对象内部，把对数据的访问限制在对象的方法上，更易确保线程在访问数据时总能获得正确的锁。&lt;/li&gt;
&lt;li&gt;每个共享的可变变量都需要维护由唯一一个确定的锁保护，而维护者应该清楚这个锁；对于每个涉及多个变量的不变约束，需要同一个锁保护其所有变量。&lt;/li&gt;
&lt;li&gt;对于有些耗时的计算或操作，比如网络或者控制台I／O，它们难以快速完成，因此执行这些操作期间不要占用锁。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the summary of the book &lt;code&gt;Java Concurrency in Practice&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;head
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS QuickStart</title>
    <link href="http://yular.github.io/2017/10/04/ReactJS-QuickStart/"/>
    <id>http://yular.github.io/2017/10/04/ReactJS-QuickStart/</id>
    <published>2017-10-05T01:45:50.000Z</published>
    <updated>2017-10-08T08:13:34.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the official page of &lt;a href=&quot;https://reactjs.org/docs/installation.html#trying-out-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; which describes how to try out ReactJS.&lt;/p&gt;
&lt;p&gt;Below is the Quickstart guide to install, configure and run the firt React app on the local. &lt;/p&gt;
&lt;h3 id=&quot;Install-NodeJS&quot;&gt;&lt;a href=&quot;#Install-NodeJS&quot; class=&quot;headerlink&quot; title=&quot;Install NodeJS&quot;&gt;&lt;/a&gt;Install NodeJS&lt;/h3&gt;&lt;p&gt;Here we use npm to manage project dependencies. Here is &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJS official website&lt;/a&gt;, where we can download and install &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Install-Gloabl-ReactJS-App-Creation-Package&quot;&gt;&lt;a href=&quot;#Install-Gloabl-ReactJS-App-Creation-Package&quot; class=&quot;headerlink&quot; title=&quot;Install Gloabl ReactJS App Creation Package&quot;&gt;&lt;/a&gt;Install Gloabl ReactJS App Creation Package&lt;/h3&gt;&lt;p&gt;Install &lt;code&gt;Create React App&lt;/code&gt; package globally in npm. &lt;code&gt;Create React App&lt;/code&gt; is the best way to start building a new React single page application. It helps to set up development environment to use the latest JavaScript features, provides a nice developer experience, and optimizes app for production.&lt;/p&gt;
&lt;p&gt;Here are the commands to install the package:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g create-react-app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Init-ReactJS-App&quot;&gt;&lt;a href=&quot;#Init-ReactJS-App&quot; class=&quot;headerlink&quot; title=&quot;Init ReactJS App&quot;&gt;&lt;/a&gt;Init ReactJS App&lt;/h3&gt;&lt;p&gt;Here are the commands to init ReactJS application and start it:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create-react-app first-react-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd first-react-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Install-ReactJS-as-dependencies-in-Application&quot;&gt;&lt;a href=&quot;#Install-ReactJS-as-dependencies-in-Application&quot; class=&quot;headerlink&quot; title=&quot;Install ReactJS as dependencies in Application&quot;&gt;&lt;/a&gt;Install ReactJS as dependencies in Application&lt;/h3&gt;&lt;p&gt;Here are the commands to install ReactJS as dependencies using &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save react react-dom&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After execute &lt;code&gt;npm init&lt;/code&gt; command, we will be asked to provide some basic profile information of the app like app name, author name, license and etc. All these information will appear in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Enabling-ES6-and-JSX&quot;&gt;&lt;a href=&quot;#Enabling-ES6-and-JSX&quot; class=&quot;headerlink&quot; title=&quot;Enabling ES6 and JSX&quot;&gt;&lt;/a&gt;Enabling ES6 and JSX&lt;/h3&gt;&lt;p&gt;We recommand to use &lt;code&gt;ES6&lt;/code&gt; and &lt;code&gt;JSX&lt;/code&gt; through &lt;code&gt;Babel&lt;/code&gt;. ES6 is a set of modern JavaScript features that make development easier, and JSX is an extension to the JavaScript language that works nicely with React.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;http://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel official website&lt;/a&gt; and &lt;a href=&quot;https://babeljs.io/docs/setup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel setup instructions&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Here we use &lt;code&gt;CLI&lt;/code&gt; way to install &lt;code&gt;babel-preset-react&lt;/code&gt; and &lt;code&gt;babel-preset-es2015&lt;/code&gt;. And enable them in &lt;code&gt;.babelrc&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;p&gt;Here are the commands:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev babel-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev babel-preset-react&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev babel-preset-es2015&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch .babelrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;apos;&amp;#123; &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;] &amp;#125;&amp;apos; &amp;gt; .babelrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As Babel is a JavaScript compiler, we can test it in following steps.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;apos;console.log([1, 2, 3].map(n =&amp;gt; n + 1))&amp;apos; &amp;gt; index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./node_modules/.bin/babel index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The output is similar as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;use strict&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log([1, 2, 3].map(function (n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return n + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Install-webpack-as-dependencies-in-Application&quot;&gt;&lt;a href=&quot;#Install-webpack-as-dependencies-in-Application&quot; class=&quot;headerlink&quot; title=&quot;Install webpack as dependencies in Application&quot;&gt;&lt;/a&gt;Install webpack as dependencies in Application&lt;/h3&gt;&lt;p&gt;A bundler like &lt;code&gt;webpack&lt;/code&gt; or &lt;code&gt;Browserify&lt;/code&gt; can help to write modular code and bundle it together into small packages to optimize load time.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack offical website&lt;/a&gt;. And here is the command to install webpack:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev webpack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So here is the final complete version of package.json file:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;name&amp;quot;: &amp;quot;first-react-app&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;private&amp;quot;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;dependencies&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;react&amp;quot;: &amp;quot;^16.0.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;react-dom&amp;quot;: &amp;quot;^16.0.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;react-scripts&amp;quot;: &amp;quot;1.0.14&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;scripts&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;start&amp;quot;: &amp;quot;react-scripts start&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;build&amp;quot;: &amp;quot;react-scripts build&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;test&amp;quot;: &amp;quot;react-scripts test --env=jsdom&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;eject&amp;quot;: &amp;quot;react-scripts eject&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;description&amp;quot;: &amp;quot;This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;devDependencies&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-cli&amp;quot;: &amp;quot;^6.26.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-preset-env&amp;quot;: &amp;quot;^1.6.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.24.1&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-preset-react&amp;quot;: &amp;quot;^6.24.1&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;webpack&amp;quot;: &amp;quot;^3.6.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;author&amp;quot;: &amp;quot;yular&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now if we run the command &lt;code&gt;npm start&lt;/code&gt;, we can still see the same page as before.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the official page of &lt;a href=&quot;https://reactjs.org/docs/installation.html#trying-out-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yular.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>小结：巴菲特之路和投资组合</title>
    <link href="http://yular.github.io/2017/10/02/%E5%B0%8F%E7%BB%93%EF%BC%9A%E5%B7%B4%E8%8F%B2%E7%89%B9%E4%B9%8B%E8%B7%AF%E5%92%8C%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88/"/>
    <id>http://yular.github.io/2017/10/02/小结：巴菲特之路和投资组合/</id>
    <published>2017-10-02T07:42:40.000Z</published>
    <updated>2017-10-08T00:54:27.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;相关名词定义&quot;&gt;&lt;a href=&quot;#相关名词定义&quot; class=&quot;headerlink&quot; title=&quot;相关名词定义&quot;&gt;&lt;/a&gt;相关名词定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全空间&lt;br&gt;有关债券投资收益的安全空间，是指股票价格低于其内在价值（即公司内在价值），则投资股票就存在安全收益的安全空间。同时，也指公司的收入和固定费用之间的差距足够大（收入 &amp;gt; 固定费用），投资者在公司收入意外下降时就可以得到保护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;留存收益 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%95%99%E5%AD%98%E6%94%B6%E7%9B%8A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;也称留用利润、留存收益、留存盈余、资本公积。 留存收益是指企业从历年实现的利润中担取事形成的留存于企业的内部积累，主要包括计提的盈余公积和未分配利润。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内在价值&lt;br&gt;估计内在价值 = 公司的利润 × 适当的资本化率因子。该因子受公司利润的稳定性、资产、红利政策和财务状况等因素制约。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;股息 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%82%A1%E6%81%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;股利（Dividend），又译股息或红利，是指股份公司从留存收益中派发给股东的那一部分。股利是股东投资于股份公司的收益的一部分（另一部分是资本利得），是付给资本的报酬。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就上市公司的情况中，股利只会派发给在除息日之前一日持有股票至除息日当日的人士，在除息日当日或以后才买入股票的人则不能获派股利。与此同时，证券交易所会在除息日开市前自动把股票的上一交易日收盘价扣减股利的价值，定为该股票的前一交易日的收盘价，因此股价会在开盘时自动下跌。&lt;/p&gt;
&lt;p&gt;股利一般有两种支付方式：现金股利（Cash Dividends）和紅股（Stock Dividends）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;资本成本：&lt;br&gt;资本成本 = 资本构成中相对权益比例 × 其成本 + 债务比例 × 其成本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经济附加值：&lt;br&gt;经济附加值 = 资本成本 － 净收益&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;市盈率 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;股票的市盈率（Price-to-Earning Ratio，P/E或PER），又称为本益比，指每股市价除以每股盈利（Earnings Per Share，EPS），通常作为股票是便宜抑或昂贵的指标（通货膨胀会使每股收益虚增，从而扭曲市盈率的比较价值）。市盈率把企业的股价与其制造财富的能力联系起来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每股盈利的计算方法，一般是以该企业在过去一年的净利润除以总发行已售出股数。市盈率越低，代表投资者能够以相对较低价格购入股票。假设某股票的市价为24元，而过去一年的每股盈利为3元，则市盈率为24/3=8。该股票被视为有8倍的市盈率，即在假设该企业以后每年净利润和去年相同的基础上，如果不考虑通货膨胀因素，回本期为8年，折合平均年回报率为12.5%，投资者每付出8元可分享1元的企业盈利。但上市公司通常只会把部分盈利用来派发股息，其余用来作进一步发展，所以市盈率的倒数不等于股息率。&lt;/p&gt;
&lt;p&gt;投资者计算市盈率，主要用来比较不同股票的价值。理论上，股票的市盈率愈低，表示该股票的投资风险越小，愈值得投资。比较不同行业、不同国家、不同时段的市盈率是不大可靠的。比较同类股票的市盈率较有实用价值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;金融学&lt;br&gt;金融学 = 经济学 + 心理学&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;赔率/投资回报率 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8A%95%E8%B3%87%E5%A0%B1%E9%85%AC%E7%8E%87&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;博彩术语赔率，并不是发生比，而是投资报酬率的一种概念。 是管理机构或者博彩公司会从总赌资中收取手续费后剩下的部分才当作奖金。 通常是固定的比率，也有依中奖人数平均的。 例如：你花1元钱买了一张彩票，1:6的赔率指的是：如果你输了，你损失1元；如果你赢了，你赢5元、并且将你原先的1元钱拿回，总共拿回6元。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;投资回报率，经济学名词，指投资后所得的收益与成本间的百分比率。&lt;br&gt;投资回报率一般可分为总回报率和年回报率。总回报率是不论资金投入时间，直接计算总共的回报率，亦即：总回报率=利润/投入成本。&lt;br&gt;年回报率则是计算平均资金投入一年所得到的回报率，又可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均回报率，其算法直接将总回报率除以资金投入的年数。&lt;/li&gt;
&lt;li&gt;内部回报率，或称为复利回报率，将每年获利的再投资也考虑进去，可以更精确地反映回报的多寡。其算法为：(总回报率+1)开年数的方，再减1。例如，投入两年，赚44%，年内部回报率就是1.44开平方减1，亦即20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;集中投资者的原则&quot;&gt;&lt;a href=&quot;#集中投资者的原则&quot; class=&quot;headerlink&quot; title=&quot;集中投资者的原则&quot;&gt;&lt;/a&gt;集中投资者的原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;愿意将股票看作企业所有权一部分。&lt;/li&gt;
&lt;li&gt;做好刻苦研究所拥有的企业以及其竞争对手的准备。&lt;/li&gt;
&lt;li&gt;愿意进行5年以上的投资。&lt;/li&gt;
&lt;li&gt;永远不要举债进行集中投资。&lt;/li&gt;
&lt;li&gt;需要正确的心态和性格。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;方法论&quot;&gt;&lt;a href=&quot;#方法论&quot; class=&quot;headerlink&quot; title=&quot;方法论&quot;&gt;&lt;/a&gt;方法论&lt;/h3&gt;&lt;h4 id=&quot;衡量管理水平的方法&quot;&gt;&lt;a href=&quot;#衡量管理水平的方法&quot; class=&quot;headerlink&quot; title=&quot;衡量管理水平的方法&quot;&gt;&lt;/a&gt;衡量管理水平的方法&lt;/h4&gt;&lt;p&gt;审查前几年的年度报告，特别注意当时管理层对未来战略的说法；将当时的规划和今天的结果比较，看看他们在多大程度上实现了规划；将几年前的战略与今年的战略以及观点相比较，看看哪些观念发生了改变；将感兴趣的公司的年度报告与同行业内的其他类似公司的报告相比较，哪怕只是比较一下相关业绩也会产生真知灼见。&lt;/p&gt;
&lt;h4 id=&quot;购买潜在价值大打折扣的股票&quot;&gt;&lt;a href=&quot;#购买潜在价值大打折扣的股票&quot; class=&quot;headerlink&quot; title=&quot;购买潜在价值大打折扣的股票&quot;&gt;&lt;/a&gt;购买潜在价值大打折扣的股票&lt;/h4&gt;&lt;p&gt;潜在价值大打折扣的股票是市盈率较低以及股息收益较高的股票。&lt;/p&gt;
&lt;h4 id=&quot;衡量收益与亏损&quot;&gt;&lt;a href=&quot;#衡量收益与亏损&quot; class=&quot;headerlink&quot; title=&quot;衡量收益与亏损&quot;&gt;&lt;/a&gt;衡量收益与亏损&lt;/h4&gt;&lt;p&gt;用概率权重衡量收益，用比较权重衡量亏损。&lt;/p&gt;
&lt;h4 id=&quot;决定投资数额&quot;&gt;&lt;a href=&quot;#决定投资数额&quot; class=&quot;headerlink&quot; title=&quot;决定投资数额&quot;&gt;&lt;/a&gt;决定投资数额&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;步骤一：概率的计算：事件结论情况有限，则简单的概率计算（如掷色子概率1／6）；若事件数量无限，如果有充足重复数据，则建立频数分布，反之，主观概率分析，尽可能多收集信息。&lt;/li&gt;
&lt;li&gt;步骤二：有新的信息出现时，调整计算以包含新信息（即贝叶斯分析法）。&lt;/li&gt;
&lt;li&gt;步骤三：决定投资数额：x = 2×p－1。p为上述步骤得出的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;凯利优化模式&quot;&gt;&lt;a href=&quot;#凯利优化模式&quot; class=&quot;headerlink&quot; title=&quot;凯利优化模式&quot;&gt;&lt;/a&gt;凯利优化模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;从概率角度考虑股票的买入。&lt;/li&gt;
&lt;li&gt;愿意进行长期投资来获取回报。&lt;/li&gt;
&lt;li&gt;避免借贷投资。&lt;/li&gt;
&lt;li&gt;每一次下赌注要保留一定的安全边际。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;认识市场&quot;&gt;&lt;a href=&quot;#认识市场&quot; class=&quot;headerlink&quot; title=&quot;认识市场&quot;&gt;&lt;/a&gt;认识市场&lt;/h4&gt;&lt;p&gt;市场是一个复杂多变的适应性系统。因此不要尝试去精确预测市场。&lt;/p&gt;
&lt;h4 id=&quot;“成为好的击球手的”证券券商&quot;&gt;&lt;a href=&quot;#“成为好的击球手的”证券券商&quot; class=&quot;headerlink&quot; title=&quot;“成为好的击球手的”证券券商&quot;&gt;&lt;/a&gt;“成为好的击球手的”证券券商&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将股票视为企业。&lt;/li&gt;
&lt;li&gt;增加投资规模。&lt;/li&gt;
&lt;li&gt;降低证券换手率。&lt;/li&gt;
&lt;li&gt;开发其他业绩衡量尺度。&lt;/li&gt;
&lt;li&gt;学会用概率方法思考。&lt;/li&gt;
&lt;li&gt;学会认识判断失误心理：心理学基本原理 － 局势不利比局势有利具有更大影响力。&lt;/li&gt;
&lt;li&gt;忽视市场预测。&lt;/li&gt;
&lt;li&gt;等待最佳击球机会： 找到合适的安全边际，尤其是公司以低于内在价值售出时。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;有效市场理论&quot;&gt;&lt;a href=&quot;#有效市场理论&quot; class=&quot;headerlink&quot; title=&quot;有效市场理论&quot;&gt;&lt;/a&gt;有效市场理论&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;夏普的波动理论。&lt;/li&gt;
&lt;li&gt;贝塔要素。&lt;/li&gt;
&lt;li&gt;固定资产价格模式CAPM。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;协方差&quot;&gt;&lt;a href=&quot;#协方差&quot; class=&quot;headerlink&quot; title=&quot;协方差&quot;&gt;&lt;/a&gt;协方差&lt;/h4&gt;&lt;p&gt;即计算总体个股平均方差的权重，用于衡量一组股票的走势。协方差高，两只股票沿着同一方向走动，反之则是反方向走动。后者是保守选股方式。&lt;/p&gt;
&lt;p&gt;协方差计算公式为：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%8F%E6%96%B9%E5%B7%AE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;巴菲特投资方法&quot;&gt;&lt;a href=&quot;#巴菲特投资方法&quot; class=&quot;headerlink&quot; title=&quot;巴菲特投资方法&quot;&gt;&lt;/a&gt;巴菲特投资方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;步骤一：离开股票市场。&lt;/li&gt;
&lt;li&gt;步骤二：不为经济情况烦恼。&lt;/li&gt;
&lt;li&gt;步骤三：买入公司而非股票。&lt;/li&gt;
&lt;li&gt;步骤四：管理投资组合。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;巴菲特投资准则&quot;&gt;&lt;a href=&quot;#巴菲特投资准则&quot; class=&quot;headerlink&quot; title=&quot;巴菲特投资准则&quot;&gt;&lt;/a&gt;巴菲特投资准则&lt;/h3&gt;&lt;h4 id=&quot;商业准则&quot;&gt;&lt;a href=&quot;#商业准则&quot; class=&quot;headerlink&quot; title=&quot;商业准则&quot;&gt;&lt;/a&gt;商业准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;公司业务简单易懂且有连贯的经营历史。&lt;/li&gt;
&lt;li&gt;公司有良好的长期发展前景，即公司的长期经济结构特征值得肯定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;管理准则&quot;&gt;&lt;a href=&quot;#管理准则&quot; class=&quot;headerlink&quot; title=&quot;管理准则&quot;&gt;&lt;/a&gt;管理准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;管理人员行为理智。&lt;/li&gt;
&lt;li&gt;管理人员坦诚对待股东，能保持渠道畅通，使得企业收益能转入到投资者手中而不是被据为己有。&lt;/li&gt;
&lt;li&gt;管理人员抵制“行业潮流驱使”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;财务准则&quot;&gt;&lt;a href=&quot;#财务准则&quot; class=&quot;headerlink&quot; title=&quot;财务准则&quot;&gt;&lt;/a&gt;财务准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;关注权益资本回报率。&lt;/li&gt;
&lt;li&gt;计算股东收益。&lt;/li&gt;
&lt;li&gt;寻找利润高的公司。&lt;/li&gt;
&lt;li&gt;对一美元的留存收益确实至少创造了一美元的市场价值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;市场准则&quot;&gt;&lt;a href=&quot;#市场准则&quot; class=&quot;headerlink&quot; title=&quot;市场准则&quot;&gt;&lt;/a&gt;市场准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;公司价值。&lt;/li&gt;
&lt;li&gt;目标公司的股票能以明显的内在价值的折扣购入。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;巴菲特管理公司原则&quot;&gt;&lt;a href=&quot;#巴菲特管理公司原则&quot; class=&quot;headerlink&quot; title=&quot;巴菲特管理公司原则&quot;&gt;&lt;/a&gt;巴菲特管理公司原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;理智原则&lt;/li&gt;
&lt;li&gt;坦白原则&lt;/li&gt;
&lt;li&gt;抵制机构的强迫命令原则 &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;红杉投资方法&quot;&gt;&lt;a href=&quot;#红杉投资方法&quot; class=&quot;headerlink&quot; title=&quot;红杉投资方法&quot;&gt;&lt;/a&gt;红杉投资方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;选择最佳的好股，然后让投资组合围绕着这些选择进行。&lt;/li&gt;
&lt;li&gt;选择低换手率的股票，长期持有效益好的公司的股票，利用复利获取更多税后利润。 &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;推荐读物&quot;&gt;&lt;a href=&quot;#推荐读物&quot; class=&quot;headerlink&quot; title=&quot;推荐读物&quot;&gt;&lt;/a&gt;推荐读物&lt;/h3&gt;&lt;p&gt;本杰明.格雷厄姆：《证券分析》《聪明的投资者》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关名词定义&quot;&gt;&lt;a href=&quot;#相关名词定义&quot; class=&quot;headerlink&quot; title=&quot;相关名词定义&quot;&gt;&lt;/a&gt;相关名词定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全空间&lt;br&gt;有关债券投资收益的安全空间，是指股票价格低于其内在价值（即公司内在价值），
    
    </summary>
    
    
      <category term="Finance" scheme="http://yular.github.io/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java VII</title>
    <link href="http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-VII/"/>
    <id>http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-VII/</id>
    <published>2017-10-02T06:18:39.000Z</published>
    <updated>2017-10-02T07:04:17.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-63-Include-failure-capture-information-in-detail-message&quot;&gt;&lt;a href=&quot;#Item-63-Include-failure-capture-information-in-detail-message&quot; class=&quot;headerlink&quot; title=&quot;Item 63. Include failure-capture information in detail message&quot;&gt;&lt;/a&gt;Item 63. Include failure-capture information in detail message&lt;/h3&gt;&lt;p&gt;To capture the failure, the detail message of an exception should contain the values of all parameters and fields that contributed to the exception.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-64-Strive-for-failure-atomicity&quot;&gt;&lt;a href=&quot;#Item-64-Strive-for-failure-atomicity&quot; class=&quot;headerlink&quot; title=&quot;Item 64. Strive for failure atomicity&quot;&gt;&lt;/a&gt;Item 64. Strive for failure atomicity&lt;/h3&gt;&lt;p&gt;A failed method invocation should leave the object in the state that it was in prior to the invocation.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-65-Do-not-ignore-exceptions&quot;&gt;&lt;a href=&quot;#Item-65-Do-not-ignore-exceptions&quot; class=&quot;headerlink&quot; title=&quot;Item 65. Do not ignore exceptions&quot;&gt;&lt;/a&gt;Item 65. Do not ignore exceptions&lt;/h3&gt;&lt;p&gt;At the very least, the catch block (empty one) should contain a comment explaining why it is appropriate to ignore the exception.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-66-Synchronize-access-to-shared-mutable-data&quot;&gt;&lt;a href=&quot;#Item-66-Synchronize-access-to-shared-mutable-data&quot; class=&quot;headerlink&quot; title=&quot;Item 66. Synchronize access to shared mutable data&quot;&gt;&lt;/a&gt;Item 66. Synchronize access to shared mutable data&lt;/h3&gt;&lt;p&gt;When multiple threads share mutable data, each thread that reads or writes the data must perform synchronization.&lt;/p&gt;
&lt;p&gt;Do not use &lt;code&gt;Thread.stop&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-67-Avoid-excessive-synchronization&quot;&gt;&lt;a href=&quot;#Item-67-Avoid-excessive-synchronization&quot; class=&quot;headerlink&quot; title=&quot;Item 67. Avoid excessive synchronization&quot;&gt;&lt;/a&gt;Item 67. Avoid excessive synchronization&lt;/h3&gt;&lt;p&gt;To avoid liveness and safety failures, never cede control to the client within a synchronized method or block.&lt;/p&gt;
&lt;p&gt;Do as little work as possible inside synchronized regions.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-68-Prefer-executors-and-tasks-to-threads&quot;&gt;&lt;a href=&quot;#Item-68-Prefer-executors-and-tasks-to-threads&quot; class=&quot;headerlink&quot; title=&quot;Item 68. Prefer executors and tasks to threads&quot;&gt;&lt;/a&gt;Item 68. Prefer executors and tasks to threads&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-69-Prefer-concurrency-utilities-to-wait-and-notify&quot;&gt;&lt;a href=&quot;#Item-69-Prefer-concurrency-utilities-to-wait-and-notify&quot; class=&quot;headerlink&quot; title=&quot;Item 69. Prefer concurrency utilities to wait and notify&quot;&gt;&lt;/a&gt;Item 69. Prefer concurrency utilities to wait and notify&lt;/h3&gt;&lt;p&gt;Here are some rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;ConcurrentHashMap&lt;/code&gt; in preference to &lt;code&gt;Collections.synchronizeMap&lt;/code&gt; or &lt;code&gt;Hashtable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For interval timing, always use System.nanoTime in preference to System.currentTimeMillis.&lt;/li&gt;
&lt;li&gt;Always use wait loop idiom to invoke the wait method; never invoke it outside of a loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-70-Document-thread-safety&quot;&gt;&lt;a href=&quot;#Item-70-Document-thread-safety&quot; class=&quot;headerlink&quot; title=&quot;Item 70. Document thread safety&quot;&gt;&lt;/a&gt;Item 70. Document thread safety&lt;/h3&gt;&lt;p&gt;To enable safe concurrent use, a class must clearly document what level of thread safety it supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;unconditionally thread-safe: instances are mutable but the class has sufficient internal synchronization.&lt;/li&gt;
&lt;li&gt;conditionally thread-safe: like unconditionally thread-safe, but some methods require external synchronization.&lt;/li&gt;
&lt;li&gt;not thread-safe&lt;/li&gt;
&lt;li&gt;thread-hostile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If write an unconditionally thread-safe class, consider using a private lock object in place of synchronized methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-71-Use-lazy-initialization-judiciously&quot;&gt;&lt;a href=&quot;#Item-71-Use-lazy-initialization-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 71. Use lazy initialization judiciously&quot;&gt;&lt;/a&gt;Item 71. Use lazy initialization judiciously&lt;/h3&gt;&lt;p&gt;Under most circumstances, normal initialization is preferable to lazy initialization.&lt;/p&gt;
&lt;p&gt;Here are the rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To use lazy initialization for a static field, use the lazy initialization holder for class idiom.&lt;/li&gt;
&lt;li&gt;To use lazy initialization for an instance field, use the double-check idiom, which is that once without locking, and then if the field appears to be uninitialized, a second time with locking.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-72-Do-not-depend-on-the-thread-scheduler&quot;&gt;&lt;a href=&quot;#Item-72-Do-not-depend-on-the-thread-scheduler&quot; class=&quot;headerlink&quot; title=&quot;Item 72. Do not depend on the thread scheduler&quot;&gt;&lt;/a&gt;Item 72. Do not depend on the thread scheduler&lt;/h3&gt;&lt;p&gt;Here are the rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not fix the program by putting in calls to &lt;code&gt;Thread.yield&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Thread priorities are the least portable features of Java platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-73-Avoid-thread-groups&quot;&gt;&lt;a href=&quot;#Item-73-Avoid-thread-groups&quot; class=&quot;headerlink&quot; title=&quot;Item 73. Avoid thread groups&quot;&gt;&lt;/a&gt;Item 73. Avoid thread groups&lt;/h3&gt;&lt;p&gt;Thread groups are obsolete.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-74-Implement-Serializable-judiciously&quot;&gt;&lt;a href=&quot;#Item-74-Implement-Serializable-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 74. Implement Serializable judiciously&quot;&gt;&lt;/a&gt;Item 74. Implement Serializable judiciously&lt;/h3&gt;&lt;p&gt;Here are the reasons and rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementing Serializable decreases the flexibility to change a class’s implementation once it has been released.&lt;/li&gt;
&lt;li&gt;Implementing Serializable increases the likelihood of bugs and security holes.&lt;/li&gt;
&lt;li&gt;Implementing Serializable increases the testing burden associated with releasing a new version of a class.&lt;/li&gt;
&lt;li&gt;Classes designed for inheritance should rarely implement Serializable, and interfaces should rarely extend it. Provide a parameterless constructor on nonserializable classes designed for inheritance.&lt;/li&gt;
&lt;li&gt;Inner class should not implement Serializable.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-75-Consider-using-a-custom-serialized-form&quot;&gt;&lt;a href=&quot;#Item-75-Consider-using-a-custom-serialized-form&quot; class=&quot;headerlink&quot; title=&quot;Item 75. Consider using a custom serialized form&quot;&gt;&lt;/a&gt;Item 75. Consider using a custom serialized form&lt;/h3&gt;&lt;p&gt;The default serialized form is likely to be appropriate if an object’s physical representation is identical to its logical content.&lt;br&gt;Often must provide a &lt;code&gt;readObject&lt;/code&gt; method to ensure invariants and security when use default serialized form.&lt;/p&gt;
&lt;p&gt;The disadvantages of using default serialized form when an object’s physical representation differs substantially from its logical data content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It permanetly ties the exported API to the current internal repesentation.&lt;/li&gt;
&lt;li&gt;It can consume excessive space.&lt;/li&gt;
&lt;li&gt;It can consume excessive time.&lt;/li&gt;
&lt;li&gt;It can cause stack overflows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all instance fields are transient, it is technically permissible to dispense with invoking &lt;code&gt;defaultWriteObject&lt;/code&gt; and &lt;code&gt;defaultReadObject&lt;/code&gt; but it is not recommended.&lt;/p&gt;
&lt;p&gt;Must impose any synchronization on object serialization that would impose on any other method that reads the entire state of the object.&lt;/p&gt;
&lt;p&gt;Regardless of what serialized form choosed, decalre an explicit serial verison UID in every serializable class.&lt;/p&gt;
&lt;h3 id=&quot;Item-76-Write-readObject-methods-defensively&quot;&gt;&lt;a href=&quot;#Item-76-Write-readObject-methods-defensively&quot; class=&quot;headerlink&quot; title=&quot;Item 76. Write readObject methods defensively&quot;&gt;&lt;/a&gt;Item 76. Write readObject methods defensively&lt;/h3&gt;&lt;p&gt;When an object is deserialized, it is critical to defensively copy any field containing an object references that a client must not posses.&lt;/p&gt;
&lt;p&gt;Do not use the &lt;code&gt;writeUnshared&lt;/code&gt; and &lt;code&gt;readUnshared&lt;/code&gt; methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-77-For-instance-control-prefer-enum-type-to-readResolve&quot;&gt;&lt;a href=&quot;#Item-77-For-instance-control-prefer-enum-type-to-readResolve&quot; class=&quot;headerlink&quot; title=&quot;Item 77. For instance control, prefer enum type to readResolve&quot;&gt;&lt;/a&gt;Item 77. For instance control, prefer enum type to readResolve&lt;/h3&gt;&lt;p&gt;If depend on readResolve for instance control, all instances fields with object reference types must be declared transient.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-78-Consider-serialization-proxies-instead-of-serialized-instances&quot;&gt;&lt;a href=&quot;#Item-78-Consider-serialization-proxies-instead-of-serialized-instances&quot; class=&quot;headerlink&quot; title=&quot;Item 78. Consider serialization proxies instead of serialized instances&quot;&gt;&lt;/a&gt;Item 78. Consider serialization proxies instead of serialized instances&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-63-Include-failure-capture-information-in-detail-message&quot;&gt;&lt;a href=&quot;#Item-63-Include-failure-capture-information-in-detail-messa
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
