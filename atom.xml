<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YBC HomePage</title>
  <subtitle>Study~ Work~ Life~ Everything is here~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yular.github.io/"/>
  <updated>2017-12-03T21:24:37.000Z</updated>
  <id>http://yular.github.io/</id>
  
  <author>
    <name>BaiChuan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reading Note of Code Complete III</title>
    <link href="http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-III/"/>
    <id>http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-III/</id>
    <published>2017-12-03T21:22:27.000Z</published>
    <updated>2017-12-03T21:24:37.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete II</title>
    <link href="http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-II/"/>
    <id>http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-II/</id>
    <published>2017-12-03T21:22:21.000Z</published>
    <updated>2017-12-03T21:24:28.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete I</title>
    <link href="http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-I/"/>
    <id>http://yular.github.io/2017/12/03/Reading-Note-of-Code-Complete-I/</id>
    <published>2017-12-03T21:22:17.000Z</published>
    <updated>2017-12-03T21:24:20.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice IV</title>
    <link href="http://yular.github.io/2017/11/13/Reading-Note-of-Java-Concurrency-in-Practice-IV/"/>
    <id>http://yular.github.io/2017/11/13/Reading-Note-of-Java-Concurrency-in-Practice-IV/</id>
    <published>2017-11-13T08:59:24.000Z</published>
    <updated>2017-11-13T08:59:36.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice III</title>
    <link href="http://yular.github.io/2017/11/05/Reading-Note-of-Java-Concurrency-in-Practice-III/"/>
    <id>http://yular.github.io/2017/11/05/Reading-Note-of-Java-Concurrency-in-Practice-III/</id>
    <published>2017-11-06T07:25:12.000Z</published>
    <updated>2017-11-06T07:25:24.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice II</title>
    <link href="http://yular.github.io/2017/11/02/Reading-Note-of-Java-Concurrency-in-Practice-II/"/>
    <id>http://yular.github.io/2017/11/02/Reading-Note-of-Java-Concurrency-in-Practice-II/</id>
    <published>2017-11-03T06:28:16.000Z</published>
    <updated>2017-11-03T06:28:28.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java Concurrency in Practice I</title>
    <link href="http://yular.github.io/2017/10/30/Reading-Note-of-Java-Concurrency-in-Practice-I/"/>
    <id>http://yular.github.io/2017/10/30/Reading-Note-of-Java-Concurrency-in-Practice-I/</id>
    <published>2017-10-30T07:39:52.000Z</published>
    <updated>2017-11-27T09:35:51.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the summary of the book &lt;code&gt;Java Concurrency in Practice&lt;/code&gt;. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the summary of the book &lt;code&gt;Java Concurrency in Practice&lt;/code&gt;. &lt;/p&gt;

    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS QuickStart</title>
    <link href="http://yular.github.io/2017/10/04/ReactJS-QuickStart/"/>
    <id>http://yular.github.io/2017/10/04/ReactJS-QuickStart/</id>
    <published>2017-10-05T01:45:50.000Z</published>
    <updated>2017-10-08T08:13:34.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the official page of &lt;a href=&quot;https://reactjs.org/docs/installation.html#trying-out-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; which describes how to try out ReactJS.&lt;/p&gt;
&lt;p&gt;Below is the Quickstart guide to install, configure and run the firt React app on the local. &lt;/p&gt;
&lt;h3 id=&quot;Install-NodeJS&quot;&gt;&lt;a href=&quot;#Install-NodeJS&quot; class=&quot;headerlink&quot; title=&quot;Install NodeJS&quot;&gt;&lt;/a&gt;Install NodeJS&lt;/h3&gt;&lt;p&gt;Here we use npm to manage project dependencies. Here is &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJS official website&lt;/a&gt;, where we can download and install &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Install-Gloabl-ReactJS-App-Creation-Package&quot;&gt;&lt;a href=&quot;#Install-Gloabl-ReactJS-App-Creation-Package&quot; class=&quot;headerlink&quot; title=&quot;Install Gloabl ReactJS App Creation Package&quot;&gt;&lt;/a&gt;Install Gloabl ReactJS App Creation Package&lt;/h3&gt;&lt;p&gt;Install &lt;code&gt;Create React App&lt;/code&gt; package globally in npm. &lt;code&gt;Create React App&lt;/code&gt; is the best way to start building a new React single page application. It helps to set up development environment to use the latest JavaScript features, provides a nice developer experience, and optimizes app for production.&lt;/p&gt;
&lt;p&gt;Here are the commands to install the package:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g create-react-app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Init-ReactJS-App&quot;&gt;&lt;a href=&quot;#Init-ReactJS-App&quot; class=&quot;headerlink&quot; title=&quot;Init ReactJS App&quot;&gt;&lt;/a&gt;Init ReactJS App&lt;/h3&gt;&lt;p&gt;Here are the commands to init ReactJS application and start it:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create-react-app first-react-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd first-react-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Install-ReactJS-as-dependencies-in-Application&quot;&gt;&lt;a href=&quot;#Install-ReactJS-as-dependencies-in-Application&quot; class=&quot;headerlink&quot; title=&quot;Install ReactJS as dependencies in Application&quot;&gt;&lt;/a&gt;Install ReactJS as dependencies in Application&lt;/h3&gt;&lt;p&gt;Here are the commands to install ReactJS as dependencies using &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save react react-dom&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After execute &lt;code&gt;npm init&lt;/code&gt; command, we will be asked to provide some basic profile information of the app like app name, author name, license and etc. All these information will appear in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Enabling-ES6-and-JSX&quot;&gt;&lt;a href=&quot;#Enabling-ES6-and-JSX&quot; class=&quot;headerlink&quot; title=&quot;Enabling ES6 and JSX&quot;&gt;&lt;/a&gt;Enabling ES6 and JSX&lt;/h3&gt;&lt;p&gt;We recommand to use &lt;code&gt;ES6&lt;/code&gt; and &lt;code&gt;JSX&lt;/code&gt; through &lt;code&gt;Babel&lt;/code&gt;. ES6 is a set of modern JavaScript features that make development easier, and JSX is an extension to the JavaScript language that works nicely with React.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;http://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel official website&lt;/a&gt; and &lt;a href=&quot;https://babeljs.io/docs/setup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel setup instructions&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Here we use &lt;code&gt;CLI&lt;/code&gt; way to install &lt;code&gt;babel-preset-react&lt;/code&gt; and &lt;code&gt;babel-preset-es2015&lt;/code&gt;. And enable them in &lt;code&gt;.babelrc&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;p&gt;Here are the commands:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev babel-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev babel-preset-react&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev babel-preset-es2015&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch .babelrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;apos;&amp;#123; &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;] &amp;#125;&amp;apos; &amp;gt; .babelrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As Babel is a JavaScript compiler, we can test it in following steps.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;apos;console.log([1, 2, 3].map(n =&amp;gt; n + 1))&amp;apos; &amp;gt; index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./node_modules/.bin/babel index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The output is similar as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;use strict&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log([1, 2, 3].map(function (n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return n + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Install-webpack-as-dependencies-in-Application&quot;&gt;&lt;a href=&quot;#Install-webpack-as-dependencies-in-Application&quot; class=&quot;headerlink&quot; title=&quot;Install webpack as dependencies in Application&quot;&gt;&lt;/a&gt;Install webpack as dependencies in Application&lt;/h3&gt;&lt;p&gt;A bundler like &lt;code&gt;webpack&lt;/code&gt; or &lt;code&gt;Browserify&lt;/code&gt; can help to write modular code and bundle it together into small packages to optimize load time.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack offical website&lt;/a&gt;. And here is the command to install webpack:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev webpack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So here is the final complete version of package.json file:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;name&amp;quot;: &amp;quot;first-react-app&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;private&amp;quot;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;dependencies&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;react&amp;quot;: &amp;quot;^16.0.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;react-dom&amp;quot;: &amp;quot;^16.0.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;react-scripts&amp;quot;: &amp;quot;1.0.14&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;scripts&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;start&amp;quot;: &amp;quot;react-scripts start&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;build&amp;quot;: &amp;quot;react-scripts build&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;test&amp;quot;: &amp;quot;react-scripts test --env=jsdom&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;eject&amp;quot;: &amp;quot;react-scripts eject&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;description&amp;quot;: &amp;quot;This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;devDependencies&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-cli&amp;quot;: &amp;quot;^6.26.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-preset-env&amp;quot;: &amp;quot;^1.6.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.24.1&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-preset-react&amp;quot;: &amp;quot;^6.24.1&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;webpack&amp;quot;: &amp;quot;^3.6.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;author&amp;quot;: &amp;quot;yular&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now if we run the command &lt;code&gt;npm start&lt;/code&gt;, we can still see the same page as before.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the official page of &lt;a href=&quot;https://reactjs.org/docs/installation.html#trying-out-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yular.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>小结：巴菲特之路和投资组合</title>
    <link href="http://yular.github.io/2017/10/02/%E5%B0%8F%E7%BB%93%EF%BC%9A%E5%B7%B4%E8%8F%B2%E7%89%B9%E4%B9%8B%E8%B7%AF%E5%92%8C%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88/"/>
    <id>http://yular.github.io/2017/10/02/小结：巴菲特之路和投资组合/</id>
    <published>2017-10-02T07:42:40.000Z</published>
    <updated>2017-10-08T00:54:27.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;相关名词定义&quot;&gt;&lt;a href=&quot;#相关名词定义&quot; class=&quot;headerlink&quot; title=&quot;相关名词定义&quot;&gt;&lt;/a&gt;相关名词定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全空间&lt;br&gt;有关债券投资收益的安全空间，是指股票价格低于其内在价值（即公司内在价值），则投资股票就存在安全收益的安全空间。同时，也指公司的收入和固定费用之间的差距足够大（收入 &amp;gt; 固定费用），投资者在公司收入意外下降时就可以得到保护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;留存收益 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%95%99%E5%AD%98%E6%94%B6%E7%9B%8A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;也称留用利润、留存收益、留存盈余、资本公积。 留存收益是指企业从历年实现的利润中担取事形成的留存于企业的内部积累，主要包括计提的盈余公积和未分配利润。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内在价值&lt;br&gt;估计内在价值 = 公司的利润 × 适当的资本化率因子。该因子受公司利润的稳定性、资产、红利政策和财务状况等因素制约。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;股息 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%82%A1%E6%81%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;股利（Dividend），又译股息或红利，是指股份公司从留存收益中派发给股东的那一部分。股利是股东投资于股份公司的收益的一部分（另一部分是资本利得），是付给资本的报酬。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就上市公司的情况中，股利只会派发给在除息日之前一日持有股票至除息日当日的人士，在除息日当日或以后才买入股票的人则不能获派股利。与此同时，证券交易所会在除息日开市前自动把股票的上一交易日收盘价扣减股利的价值，定为该股票的前一交易日的收盘价，因此股价会在开盘时自动下跌。&lt;/p&gt;
&lt;p&gt;股利一般有两种支付方式：现金股利（Cash Dividends）和紅股（Stock Dividends）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;资本成本：&lt;br&gt;资本成本 = 资本构成中相对权益比例 × 其成本 + 债务比例 × 其成本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经济附加值：&lt;br&gt;经济附加值 = 资本成本 － 净收益&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;市盈率 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B8%82%E7%9B%88%E7%8E%87&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;股票的市盈率（Price-to-Earning Ratio，P/E或PER），又称为本益比，指每股市价除以每股盈利（Earnings Per Share，EPS），通常作为股票是便宜抑或昂贵的指标（通货膨胀会使每股收益虚增，从而扭曲市盈率的比较价值）。市盈率把企业的股价与其制造财富的能力联系起来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每股盈利的计算方法，一般是以该企业在过去一年的净利润除以总发行已售出股数。市盈率越低，代表投资者能够以相对较低价格购入股票。假设某股票的市价为24元，而过去一年的每股盈利为3元，则市盈率为24/3=8。该股票被视为有8倍的市盈率，即在假设该企业以后每年净利润和去年相同的基础上，如果不考虑通货膨胀因素，回本期为8年，折合平均年回报率为12.5%，投资者每付出8元可分享1元的企业盈利。但上市公司通常只会把部分盈利用来派发股息，其余用来作进一步发展，所以市盈率的倒数不等于股息率。&lt;/p&gt;
&lt;p&gt;投资者计算市盈率，主要用来比较不同股票的价值。理论上，股票的市盈率愈低，表示该股票的投资风险越小，愈值得投资。比较不同行业、不同国家、不同时段的市盈率是不大可靠的。比较同类股票的市盈率较有实用价值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;金融学&lt;br&gt;金融学 = 经济学 + 心理学&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;赔率/投资回报率 (&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8A%95%E8%B3%87%E5%A0%B1%E9%85%AC%E7%8E%87&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;)&lt;br&gt;博彩术语赔率，并不是发生比，而是投资报酬率的一种概念。 是管理机构或者博彩公司会从总赌资中收取手续费后剩下的部分才当作奖金。 通常是固定的比率，也有依中奖人数平均的。 例如：你花1元钱买了一张彩票，1:6的赔率指的是：如果你输了，你损失1元；如果你赢了，你赢5元、并且将你原先的1元钱拿回，总共拿回6元。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;投资回报率，经济学名词，指投资后所得的收益与成本间的百分比率。&lt;br&gt;投资回报率一般可分为总回报率和年回报率。总回报率是不论资金投入时间，直接计算总共的回报率，亦即：总回报率=利润/投入成本。&lt;br&gt;年回报率则是计算平均资金投入一年所得到的回报率，又可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均回报率，其算法直接将总回报率除以资金投入的年数。&lt;/li&gt;
&lt;li&gt;内部回报率，或称为复利回报率，将每年获利的再投资也考虑进去，可以更精确地反映回报的多寡。其算法为：(总回报率+1)开年数的方，再减1。例如，投入两年，赚44%，年内部回报率就是1.44开平方减1，亦即20%。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;集中投资者的原则&quot;&gt;&lt;a href=&quot;#集中投资者的原则&quot; class=&quot;headerlink&quot; title=&quot;集中投资者的原则&quot;&gt;&lt;/a&gt;集中投资者的原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;愿意将股票看作企业所有权一部分。&lt;/li&gt;
&lt;li&gt;做好刻苦研究所拥有的企业以及其竞争对手的准备。&lt;/li&gt;
&lt;li&gt;愿意进行5年以上的投资。&lt;/li&gt;
&lt;li&gt;永远不要举债进行集中投资。&lt;/li&gt;
&lt;li&gt;需要正确的心态和性格。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;方法论&quot;&gt;&lt;a href=&quot;#方法论&quot; class=&quot;headerlink&quot; title=&quot;方法论&quot;&gt;&lt;/a&gt;方法论&lt;/h3&gt;&lt;h4 id=&quot;衡量管理水平的方法&quot;&gt;&lt;a href=&quot;#衡量管理水平的方法&quot; class=&quot;headerlink&quot; title=&quot;衡量管理水平的方法&quot;&gt;&lt;/a&gt;衡量管理水平的方法&lt;/h4&gt;&lt;p&gt;审查前几年的年度报告，特别注意当时管理层对未来战略的说法；将当时的规划和今天的结果比较，看看他们在多大程度上实现了规划；将几年前的战略与今年的战略以及观点相比较，看看哪些观念发生了改变；将感兴趣的公司的年度报告与同行业内的其他类似公司的报告相比较，哪怕只是比较一下相关业绩也会产生真知灼见。&lt;/p&gt;
&lt;h4 id=&quot;购买潜在价值大打折扣的股票&quot;&gt;&lt;a href=&quot;#购买潜在价值大打折扣的股票&quot; class=&quot;headerlink&quot; title=&quot;购买潜在价值大打折扣的股票&quot;&gt;&lt;/a&gt;购买潜在价值大打折扣的股票&lt;/h4&gt;&lt;p&gt;潜在价值大打折扣的股票是市盈率较低以及股息收益较高的股票。&lt;/p&gt;
&lt;h4 id=&quot;衡量收益与亏损&quot;&gt;&lt;a href=&quot;#衡量收益与亏损&quot; class=&quot;headerlink&quot; title=&quot;衡量收益与亏损&quot;&gt;&lt;/a&gt;衡量收益与亏损&lt;/h4&gt;&lt;p&gt;用概率权重衡量收益，用比较权重衡量亏损。&lt;/p&gt;
&lt;h4 id=&quot;决定投资数额&quot;&gt;&lt;a href=&quot;#决定投资数额&quot; class=&quot;headerlink&quot; title=&quot;决定投资数额&quot;&gt;&lt;/a&gt;决定投资数额&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;步骤一：概率的计算：事件结论情况有限，则简单的概率计算（如掷色子概率1／6）；若事件数量无限，如果有充足重复数据，则建立频数分布，反之，主观概率分析，尽可能多收集信息。&lt;/li&gt;
&lt;li&gt;步骤二：有新的信息出现时，调整计算以包含新信息（即贝叶斯分析法）。&lt;/li&gt;
&lt;li&gt;步骤三：决定投资数额：x = 2×p－1。p为上述步骤得出的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;凯利优化模式&quot;&gt;&lt;a href=&quot;#凯利优化模式&quot; class=&quot;headerlink&quot; title=&quot;凯利优化模式&quot;&gt;&lt;/a&gt;凯利优化模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;从概率角度考虑股票的买入。&lt;/li&gt;
&lt;li&gt;愿意进行长期投资来获取回报。&lt;/li&gt;
&lt;li&gt;避免借贷投资。&lt;/li&gt;
&lt;li&gt;每一次下赌注要保留一定的安全边际。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;认识市场&quot;&gt;&lt;a href=&quot;#认识市场&quot; class=&quot;headerlink&quot; title=&quot;认识市场&quot;&gt;&lt;/a&gt;认识市场&lt;/h4&gt;&lt;p&gt;市场是一个复杂多变的适应性系统。因此不要尝试去精确预测市场。&lt;/p&gt;
&lt;h4 id=&quot;“成为好的击球手的”证券券商&quot;&gt;&lt;a href=&quot;#“成为好的击球手的”证券券商&quot; class=&quot;headerlink&quot; title=&quot;“成为好的击球手的”证券券商&quot;&gt;&lt;/a&gt;“成为好的击球手的”证券券商&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将股票视为企业。&lt;/li&gt;
&lt;li&gt;增加投资规模。&lt;/li&gt;
&lt;li&gt;降低证券换手率。&lt;/li&gt;
&lt;li&gt;开发其他业绩衡量尺度。&lt;/li&gt;
&lt;li&gt;学会用概率方法思考。&lt;/li&gt;
&lt;li&gt;学会认识判断失误心理：心理学基本原理 － 局势不利比局势有利具有更大影响力。&lt;/li&gt;
&lt;li&gt;忽视市场预测。&lt;/li&gt;
&lt;li&gt;等待最佳击球机会： 找到合适的安全边际，尤其是公司以低于内在价值售出时。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;有效市场理论&quot;&gt;&lt;a href=&quot;#有效市场理论&quot; class=&quot;headerlink&quot; title=&quot;有效市场理论&quot;&gt;&lt;/a&gt;有效市场理论&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;夏普的波动理论。&lt;/li&gt;
&lt;li&gt;贝塔要素。&lt;/li&gt;
&lt;li&gt;固定资产价格模式CAPM。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;协方差&quot;&gt;&lt;a href=&quot;#协方差&quot; class=&quot;headerlink&quot; title=&quot;协方差&quot;&gt;&lt;/a&gt;协方差&lt;/h4&gt;&lt;p&gt;即计算总体个股平均方差的权重，用于衡量一组股票的走势。协方差高，两只股票沿着同一方向走动，反之则是反方向走动。后者是保守选股方式。&lt;/p&gt;
&lt;p&gt;协方差计算公式为：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%8F%E6%96%B9%E5%B7%AE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;巴菲特投资方法&quot;&gt;&lt;a href=&quot;#巴菲特投资方法&quot; class=&quot;headerlink&quot; title=&quot;巴菲特投资方法&quot;&gt;&lt;/a&gt;巴菲特投资方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;步骤一：离开股票市场。&lt;/li&gt;
&lt;li&gt;步骤二：不为经济情况烦恼。&lt;/li&gt;
&lt;li&gt;步骤三：买入公司而非股票。&lt;/li&gt;
&lt;li&gt;步骤四：管理投资组合。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;巴菲特投资准则&quot;&gt;&lt;a href=&quot;#巴菲特投资准则&quot; class=&quot;headerlink&quot; title=&quot;巴菲特投资准则&quot;&gt;&lt;/a&gt;巴菲特投资准则&lt;/h3&gt;&lt;h4 id=&quot;商业准则&quot;&gt;&lt;a href=&quot;#商业准则&quot; class=&quot;headerlink&quot; title=&quot;商业准则&quot;&gt;&lt;/a&gt;商业准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;公司业务简单易懂且有连贯的经营历史。&lt;/li&gt;
&lt;li&gt;公司有良好的长期发展前景，即公司的长期经济结构特征值得肯定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;管理准则&quot;&gt;&lt;a href=&quot;#管理准则&quot; class=&quot;headerlink&quot; title=&quot;管理准则&quot;&gt;&lt;/a&gt;管理准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;管理人员行为理智。&lt;/li&gt;
&lt;li&gt;管理人员坦诚对待股东，能保持渠道畅通，使得企业收益能转入到投资者手中而不是被据为己有。&lt;/li&gt;
&lt;li&gt;管理人员抵制“行业潮流驱使”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;财务准则&quot;&gt;&lt;a href=&quot;#财务准则&quot; class=&quot;headerlink&quot; title=&quot;财务准则&quot;&gt;&lt;/a&gt;财务准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;关注权益资本回报率。&lt;/li&gt;
&lt;li&gt;计算股东收益。&lt;/li&gt;
&lt;li&gt;寻找利润高的公司。&lt;/li&gt;
&lt;li&gt;对一美元的留存收益确实至少创造了一美元的市场价值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;市场准则&quot;&gt;&lt;a href=&quot;#市场准则&quot; class=&quot;headerlink&quot; title=&quot;市场准则&quot;&gt;&lt;/a&gt;市场准则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;公司价值。&lt;/li&gt;
&lt;li&gt;目标公司的股票能以明显的内在价值的折扣购入。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;巴菲特管理公司原则&quot;&gt;&lt;a href=&quot;#巴菲特管理公司原则&quot; class=&quot;headerlink&quot; title=&quot;巴菲特管理公司原则&quot;&gt;&lt;/a&gt;巴菲特管理公司原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;理智原则&lt;/li&gt;
&lt;li&gt;坦白原则&lt;/li&gt;
&lt;li&gt;抵制机构的强迫命令原则 &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;红杉投资方法&quot;&gt;&lt;a href=&quot;#红杉投资方法&quot; class=&quot;headerlink&quot; title=&quot;红杉投资方法&quot;&gt;&lt;/a&gt;红杉投资方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;选择最佳的好股，然后让投资组合围绕着这些选择进行。&lt;/li&gt;
&lt;li&gt;选择低换手率的股票，长期持有效益好的公司的股票，利用复利获取更多税后利润。 &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;推荐读物&quot;&gt;&lt;a href=&quot;#推荐读物&quot; class=&quot;headerlink&quot; title=&quot;推荐读物&quot;&gt;&lt;/a&gt;推荐读物&lt;/h3&gt;&lt;p&gt;本杰明.格雷厄姆：《证券分析》《聪明的投资者》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关名词定义&quot;&gt;&lt;a href=&quot;#相关名词定义&quot; class=&quot;headerlink&quot; title=&quot;相关名词定义&quot;&gt;&lt;/a&gt;相关名词定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安全空间&lt;br&gt;有关债券投资收益的安全空间，是指股票价格低于其内在价值（即公司内在价值），
    
    </summary>
    
    
      <category term="Finance" scheme="http://yular.github.io/tags/Finance/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java VII</title>
    <link href="http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-VII/"/>
    <id>http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-VII/</id>
    <published>2017-10-02T06:18:39.000Z</published>
    <updated>2017-10-02T07:04:17.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-63-Include-failure-capture-information-in-detail-message&quot;&gt;&lt;a href=&quot;#Item-63-Include-failure-capture-information-in-detail-message&quot; class=&quot;headerlink&quot; title=&quot;Item 63. Include failure-capture information in detail message&quot;&gt;&lt;/a&gt;Item 63. Include failure-capture information in detail message&lt;/h3&gt;&lt;p&gt;To capture the failure, the detail message of an exception should contain the values of all parameters and fields that contributed to the exception.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-64-Strive-for-failure-atomicity&quot;&gt;&lt;a href=&quot;#Item-64-Strive-for-failure-atomicity&quot; class=&quot;headerlink&quot; title=&quot;Item 64. Strive for failure atomicity&quot;&gt;&lt;/a&gt;Item 64. Strive for failure atomicity&lt;/h3&gt;&lt;p&gt;A failed method invocation should leave the object in the state that it was in prior to the invocation.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-65-Do-not-ignore-exceptions&quot;&gt;&lt;a href=&quot;#Item-65-Do-not-ignore-exceptions&quot; class=&quot;headerlink&quot; title=&quot;Item 65. Do not ignore exceptions&quot;&gt;&lt;/a&gt;Item 65. Do not ignore exceptions&lt;/h3&gt;&lt;p&gt;At the very least, the catch block (empty one) should contain a comment explaining why it is appropriate to ignore the exception.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-66-Synchronize-access-to-shared-mutable-data&quot;&gt;&lt;a href=&quot;#Item-66-Synchronize-access-to-shared-mutable-data&quot; class=&quot;headerlink&quot; title=&quot;Item 66. Synchronize access to shared mutable data&quot;&gt;&lt;/a&gt;Item 66. Synchronize access to shared mutable data&lt;/h3&gt;&lt;p&gt;When multiple threads share mutable data, each thread that reads or writes the data must perform synchronization.&lt;/p&gt;
&lt;p&gt;Do not use &lt;code&gt;Thread.stop&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-67-Avoid-excessive-synchronization&quot;&gt;&lt;a href=&quot;#Item-67-Avoid-excessive-synchronization&quot; class=&quot;headerlink&quot; title=&quot;Item 67. Avoid excessive synchronization&quot;&gt;&lt;/a&gt;Item 67. Avoid excessive synchronization&lt;/h3&gt;&lt;p&gt;To avoid liveness and safety failures, never cede control to the client within a synchronized method or block.&lt;/p&gt;
&lt;p&gt;Do as little work as possible inside synchronized regions.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-68-Prefer-executors-and-tasks-to-threads&quot;&gt;&lt;a href=&quot;#Item-68-Prefer-executors-and-tasks-to-threads&quot; class=&quot;headerlink&quot; title=&quot;Item 68. Prefer executors and tasks to threads&quot;&gt;&lt;/a&gt;Item 68. Prefer executors and tasks to threads&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-69-Prefer-concurrency-utilities-to-wait-and-notify&quot;&gt;&lt;a href=&quot;#Item-69-Prefer-concurrency-utilities-to-wait-and-notify&quot; class=&quot;headerlink&quot; title=&quot;Item 69. Prefer concurrency utilities to wait and notify&quot;&gt;&lt;/a&gt;Item 69. Prefer concurrency utilities to wait and notify&lt;/h3&gt;&lt;p&gt;Here are some rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;ConcurrentHashMap&lt;/code&gt; in preference to &lt;code&gt;Collections.synchronizeMap&lt;/code&gt; or &lt;code&gt;Hashtable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For interval timing, always use System.nanoTime in preference to System.currentTimeMillis.&lt;/li&gt;
&lt;li&gt;Always use wait loop idiom to invoke the wait method; never invoke it outside of a loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-70-Document-thread-safety&quot;&gt;&lt;a href=&quot;#Item-70-Document-thread-safety&quot; class=&quot;headerlink&quot; title=&quot;Item 70. Document thread safety&quot;&gt;&lt;/a&gt;Item 70. Document thread safety&lt;/h3&gt;&lt;p&gt;To enable safe concurrent use, a class must clearly document what level of thread safety it supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;immutable&lt;/li&gt;
&lt;li&gt;unconditionally thread-safe: instances are mutable but the class has sufficient internal synchronization.&lt;/li&gt;
&lt;li&gt;conditionally thread-safe: like unconditionally thread-safe, but some methods require external synchronization.&lt;/li&gt;
&lt;li&gt;not thread-safe&lt;/li&gt;
&lt;li&gt;thread-hostile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If write an unconditionally thread-safe class, consider using a private lock object in place of synchronized methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-71-Use-lazy-initialization-judiciously&quot;&gt;&lt;a href=&quot;#Item-71-Use-lazy-initialization-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 71. Use lazy initialization judiciously&quot;&gt;&lt;/a&gt;Item 71. Use lazy initialization judiciously&lt;/h3&gt;&lt;p&gt;Under most circumstances, normal initialization is preferable to lazy initialization.&lt;/p&gt;
&lt;p&gt;Here are the rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To use lazy initialization for a static field, use the lazy initialization holder for class idiom.&lt;/li&gt;
&lt;li&gt;To use lazy initialization for an instance field, use the double-check idiom, which is that once without locking, and then if the field appears to be uninitialized, a second time with locking.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-72-Do-not-depend-on-the-thread-scheduler&quot;&gt;&lt;a href=&quot;#Item-72-Do-not-depend-on-the-thread-scheduler&quot; class=&quot;headerlink&quot; title=&quot;Item 72. Do not depend on the thread scheduler&quot;&gt;&lt;/a&gt;Item 72. Do not depend on the thread scheduler&lt;/h3&gt;&lt;p&gt;Here are the rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not fix the program by putting in calls to &lt;code&gt;Thread.yield&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Thread priorities are the least portable features of Java platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-73-Avoid-thread-groups&quot;&gt;&lt;a href=&quot;#Item-73-Avoid-thread-groups&quot; class=&quot;headerlink&quot; title=&quot;Item 73. Avoid thread groups&quot;&gt;&lt;/a&gt;Item 73. Avoid thread groups&lt;/h3&gt;&lt;p&gt;Thread groups are obsolete.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-74-Implement-Serializable-judiciously&quot;&gt;&lt;a href=&quot;#Item-74-Implement-Serializable-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 74. Implement Serializable judiciously&quot;&gt;&lt;/a&gt;Item 74. Implement Serializable judiciously&lt;/h3&gt;&lt;p&gt;Here are the reasons and rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementing Serializable decreases the flexibility to change a class’s implementation once it has been released.&lt;/li&gt;
&lt;li&gt;Implementing Serializable increases the likelihood of bugs and security holes.&lt;/li&gt;
&lt;li&gt;Implementing Serializable increases the testing burden associated with releasing a new version of a class.&lt;/li&gt;
&lt;li&gt;Classes designed for inheritance should rarely implement Serializable, and interfaces should rarely extend it. Provide a parameterless constructor on nonserializable classes designed for inheritance.&lt;/li&gt;
&lt;li&gt;Inner class should not implement Serializable.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-75-Consider-using-a-custom-serialized-form&quot;&gt;&lt;a href=&quot;#Item-75-Consider-using-a-custom-serialized-form&quot; class=&quot;headerlink&quot; title=&quot;Item 75. Consider using a custom serialized form&quot;&gt;&lt;/a&gt;Item 75. Consider using a custom serialized form&lt;/h3&gt;&lt;p&gt;The default serialized form is likely to be appropriate if an object’s physical representation is identical to its logical content.&lt;br&gt;Often must provide a &lt;code&gt;readObject&lt;/code&gt; method to ensure invariants and security when use default serialized form.&lt;/p&gt;
&lt;p&gt;The disadvantages of using default serialized form when an object’s physical representation differs substantially from its logical data content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It permanetly ties the exported API to the current internal repesentation.&lt;/li&gt;
&lt;li&gt;It can consume excessive space.&lt;/li&gt;
&lt;li&gt;It can consume excessive time.&lt;/li&gt;
&lt;li&gt;It can cause stack overflows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If all instance fields are transient, it is technically permissible to dispense with invoking &lt;code&gt;defaultWriteObject&lt;/code&gt; and &lt;code&gt;defaultReadObject&lt;/code&gt; but it is not recommended.&lt;/p&gt;
&lt;p&gt;Must impose any synchronization on object serialization that would impose on any other method that reads the entire state of the object.&lt;/p&gt;
&lt;p&gt;Regardless of what serialized form choosed, decalre an explicit serial verison UID in every serializable class.&lt;/p&gt;
&lt;h3 id=&quot;Item-76-Write-readObject-methods-defensively&quot;&gt;&lt;a href=&quot;#Item-76-Write-readObject-methods-defensively&quot; class=&quot;headerlink&quot; title=&quot;Item 76. Write readObject methods defensively&quot;&gt;&lt;/a&gt;Item 76. Write readObject methods defensively&lt;/h3&gt;&lt;p&gt;When an object is deserialized, it is critical to defensively copy any field containing an object references that a client must not posses.&lt;/p&gt;
&lt;p&gt;Do not use the &lt;code&gt;writeUnshared&lt;/code&gt; and &lt;code&gt;readUnshared&lt;/code&gt; methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-77-For-instance-control-prefer-enum-type-to-readResolve&quot;&gt;&lt;a href=&quot;#Item-77-For-instance-control-prefer-enum-type-to-readResolve&quot; class=&quot;headerlink&quot; title=&quot;Item 77. For instance control, prefer enum type to readResolve&quot;&gt;&lt;/a&gt;Item 77. For instance control, prefer enum type to readResolve&lt;/h3&gt;&lt;p&gt;If depend on readResolve for instance control, all instances fields with object reference types must be declared transient.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-78-Consider-serialization-proxies-instead-of-serialized-instances&quot;&gt;&lt;a href=&quot;#Item-78-Consider-serialization-proxies-instead-of-serialized-instances&quot; class=&quot;headerlink&quot; title=&quot;Item 78. Consider serialization proxies instead of serialized instances&quot;&gt;&lt;/a&gt;Item 78. Consider serialization proxies instead of serialized instances&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-63-Include-failure-capture-information-in-detail-message&quot;&gt;&lt;a href=&quot;#Item-63-Include-failure-capture-information-in-detail-messa
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java VI</title>
    <link href="http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-VI/"/>
    <id>http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-VI/</id>
    <published>2017-10-02T05:20:52.000Z</published>
    <updated>2017-10-22T23:32:56.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-51-Beware-of-performance-of-string-concatenation&quot;&gt;&lt;a href=&quot;#Item-51-Beware-of-performance-of-string-concatenation&quot; class=&quot;headerlink&quot; title=&quot;Item 51. Beware of performance of string concatenation&quot;&gt;&lt;/a&gt;Item 51. Beware of performance of string concatenation&lt;/h3&gt;&lt;p&gt;To achieve acceptable performance, use a StringBuilder in place of a String.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-52-Refer-to-objects-by-their-interfaces&quot;&gt;&lt;a href=&quot;#Item-52-Refer-to-objects-by-their-interfaces&quot; class=&quot;headerlink&quot; title=&quot;Item 52. Refer to objects by their interfaces&quot;&gt;&lt;/a&gt;Item 52. Refer to objects by their interfaces&lt;/h3&gt;&lt;p&gt;If appropriate interface types exist, then parameters, return values, vraibales, and fields should all be declared using interface types.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-53-Prefer-interfaces-to-reflection&quot;&gt;&lt;a href=&quot;#Item-53-Prefer-interfaces-to-reflection&quot; class=&quot;headerlink&quot; title=&quot;Item 53. Prefer interfaces to reflection&quot;&gt;&lt;/a&gt;Item 53. Prefer interfaces to reflection&lt;/h3&gt;&lt;p&gt;As a rule, objects should not be accesed reflectively in normal applications at runtime.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lose all the benefits of compile-time type checking.&lt;/li&gt;
&lt;li&gt;The code required to perform reflective access is clumsy and verbose.&lt;/li&gt;
&lt;li&gt;Performance suffers.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-54-Use-native-methods-judiciously&quot;&gt;&lt;a href=&quot;#Item-54-Use-native-methods-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 54. Use native methods judiciously&quot;&gt;&lt;/a&gt;Item 54. Use native methods judiciously&lt;/h3&gt;&lt;p&gt;Java Native Interface (JNI) allows Java applications to call native methods, which are special methods written in native programming languages such as C or C++.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-55-Optimize-judiciously&quot;&gt;&lt;a href=&quot;#Item-55-Optimize-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 55. Optimize judiciously&quot;&gt;&lt;/a&gt;Item 55. Optimize judiciously&lt;/h3&gt;&lt;p&gt;Here are the rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strive to write good programs rather than fast ones.&lt;/li&gt;
&lt;li&gt;Strive to aovid design decisions that limit performance.&lt;/li&gt;
&lt;li&gt;Consider the performance consequences of API design decisions.&lt;/li&gt;
&lt;li&gt;Measure performance before and after each attempted optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-56-Adhere-to-generally-accepted-naming-conventions&quot;&gt;&lt;a href=&quot;#Item-56-Adhere-to-generally-accepted-naming-conventions&quot; class=&quot;headerlink&quot; title=&quot;Item 56. Adhere to generally accepted naming conventions&quot;&gt;&lt;/a&gt;Item 56. Adhere to generally accepted naming conventions&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-57-Use-exceptions-only-for-exceptional-conditions&quot;&gt;&lt;a href=&quot;#Item-57-Use-exceptions-only-for-exceptional-conditions&quot; class=&quot;headerlink&quot; title=&quot;Item 57. Use exceptions only for exceptional conditions&quot;&gt;&lt;/a&gt;Item 57. Use exceptions only for exceptional conditions&lt;/h3&gt;&lt;p&gt;Never use exceptions for ordinary control flow. And good APIs must not enforce users to do that.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-58-Use-checked-exception-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors&quot;&gt;&lt;a href=&quot;#Item-58-Use-checked-exception-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors&quot; class=&quot;headerlink&quot; title=&quot;Item 58. Use checked exception for recoverable conditions and runtime exceptions for programming errors&quot;&gt;&lt;/a&gt;Item 58. Use checked exception for recoverable conditions and runtime exceptions for programming errors&lt;/h3&gt;&lt;p&gt;Exceptions which are subclass of Exception, are recoverable. Exceptions which are subclass of Error, are unrecoverable.&lt;/p&gt;
&lt;p&gt;RuntimeException is unchecked exception. Thus, all of the unchecked throwables implemented should subclass RuntimeException.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-59-Avoid-unnecessary-use-of-checked-exceptions&quot;&gt;&lt;a href=&quot;#Item-59-Avoid-unnecessary-use-of-checked-exceptions&quot; class=&quot;headerlink&quot; title=&quot;Item 59. Avoid unnecessary use of checked exceptions&quot;&gt;&lt;/a&gt;Item 59. Avoid unnecessary use of checked exceptions&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-60-Favor-the-use-of-standard-exceptions&quot;&gt;&lt;a href=&quot;#Item-60-Favor-the-use-of-standard-exceptions&quot; class=&quot;headerlink&quot; title=&quot;Item 60. Favor the use of standard exceptions&quot;&gt;&lt;/a&gt;Item 60. Favor the use of standard exceptions&lt;/h3&gt;&lt;p&gt;Java 7 and 8: Use try-with-resources (TWR) in IO operation to take care of resources management. TWR uses a new interface called &lt;code&gt;AutoCloseable&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-61-Throw-exceptions-appropriate-to-the-abstraction&quot;&gt;&lt;a href=&quot;#Item-61-Throw-exceptions-appropriate-to-the-abstraction&quot; class=&quot;headerlink&quot; title=&quot;Item 61. Throw exceptions appropriate to the abstraction&quot;&gt;&lt;/a&gt;Item 61. Throw exceptions appropriate to the abstraction&lt;/h3&gt;&lt;p&gt;Higher layers catch low-level exceptions and, in their place, throw exceptions that can be explained in terms of the high-level abstraction.&lt;/p&gt;
&lt;p&gt;While exception translation is superior to mindless propagation of exceptions from lower layers, it should not be overused.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-62-Document-all-exceptions-thrown-by-each-method&quot;&gt;&lt;a href=&quot;#Item-62-Document-all-exceptions-thrown-by-each-method&quot; class=&quot;headerlink&quot; title=&quot;Item 62. Document all exceptions thrown by each method&quot;&gt;&lt;/a&gt;Item 62. Document all exceptions thrown by each method&lt;/h3&gt;&lt;p&gt;Always declare checked exceptions individually, and document precisely the conditions under which each one is thrown using the Javadoc &lt;code&gt;@throws&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Use the Javadoc &lt;code&gt;@throws&lt;/code&gt; tag to document each unchecked exception that a method can throw, but do not use the throws keyword to include unchecked exceptions in the method declaration.&lt;/p&gt;
&lt;p&gt;If an exception is thrown by many methods in a class for the same reason, it is acceptable to document the exception in the class’s documentation comment.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-51-Beware-of-performance-of-string-concatenation&quot;&gt;&lt;a href=&quot;#Item-51-Beware-of-performance-of-string-concatenation&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java V</title>
    <link href="http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-V/"/>
    <id>http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-V/</id>
    <published>2017-10-02T05:02:21.000Z</published>
    <updated>2017-10-02T05:20:47.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-41-Use-overloading-judiciously&quot;&gt;&lt;a href=&quot;#Item-41-Use-overloading-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 41. Use overloading judiciously&quot;&gt;&lt;/a&gt;Item 41. Use overloading judiciously&lt;/h3&gt;&lt;p&gt;A safe and conservative policy is never to export two overloadings with the same number of parameters.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-42-Use-varargs-judiciously&quot;&gt;&lt;a href=&quot;#Item-42-Use-varargs-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 42. Use varargs judiciously&quot;&gt;&lt;/a&gt;Item 42. Use varargs judiciously&lt;/h3&gt;&lt;p&gt;Use varargs only when a call really operates on a variable-length sequence of values.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-43-Return-empty-arrays-or-collections-not-nulls&quot;&gt;&lt;a href=&quot;#Item-43-Return-empty-arrays-or-collections-not-nulls&quot; class=&quot;headerlink&quot; title=&quot;Item 43. Return empty arrays or collections, not nulls&quot;&gt;&lt;/a&gt;Item 43. Return empty arrays or collections, not nulls&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-44-Write-doc-comments-for-all-exposed-API-elements&quot;&gt;&lt;a href=&quot;#Item-44-Write-doc-comments-for-all-exposed-API-elements&quot; class=&quot;headerlink&quot; title=&quot;Item 44. Write doc comments for all exposed API elements&quot;&gt;&lt;/a&gt;Item 44. Write doc comments for all exposed API elements&lt;/h3&gt;&lt;p&gt;Here are the rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To document API properly, must precede every exported class, interface, constructor, method and field declaration with a doc comment.&lt;/li&gt;
&lt;li&gt;The doc comment for a method should describe succinctly the contract between the method and its client.&lt;/li&gt;
&lt;li&gt;No longer necessary to use the HTML &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; tages in doc comments: the Javadoc {@code} tag is preferable because it eliminates the need to escape HTML metacharacters.&lt;/li&gt;
&lt;li&gt;To document a generic type or method, be sure to document all type parameters.&lt;/li&gt;
&lt;li&gt;To document an enum type, be sure to document the constants.&lt;/li&gt;
&lt;li&gt;To document an annotation type, be sure to document any members as well as type itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-45-Minimize-the-scope-of-local-variables&quot;&gt;&lt;a href=&quot;#Item-45-Minimize-the-scope-of-local-variables&quot; class=&quot;headerlink&quot; title=&quot;Item 45. Minimize the scope of local variables&quot;&gt;&lt;/a&gt;Item 45. Minimize the scope of local variables&lt;/h3&gt;&lt;p&gt;Declare the local variables where they are first used. And the declaration should contain an initializer.&lt;/p&gt;
&lt;p&gt;Keep methods small and focused.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-46-Prefer-for-each-loops-to-traditional-for-loops&quot;&gt;&lt;a href=&quot;#Item-46-Prefer-for-each-loops-to-traditional-for-loops&quot; class=&quot;headerlink&quot; title=&quot;Item 46. Prefer for-each loops to traditional for loops&quot;&gt;&lt;/a&gt;Item 46. Prefer for-each loops to traditional for loops&lt;/h3&gt;&lt;p&gt;Three situations where for-each loop should not be used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filtering&lt;/li&gt;
&lt;li&gt;Transforming&lt;/li&gt;
&lt;li&gt;Parallel iteration&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-47-Know-and-use-libraries&quot;&gt;&lt;a href=&quot;#Item-47-Know-and-use-libraries&quot; class=&quot;headerlink&quot; title=&quot;Item 47. Know and use libraries&quot;&gt;&lt;/a&gt;Item 47. Know and use libraries&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-48-Avoid-float-and-double-if-exact-answers-are-required&quot;&gt;&lt;a href=&quot;#Item-48-Avoid-float-and-double-if-exact-answers-are-required&quot; class=&quot;headerlink&quot; title=&quot;Item 48. Avoid float and double if exact answers are required&quot;&gt;&lt;/a&gt;Item 48. Avoid float and double if exact answers are required&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-49-Prefer-primitive-types-to-boxed-primitives&quot;&gt;&lt;a href=&quot;#Item-49-Prefer-primitive-types-to-boxed-primitives&quot; class=&quot;headerlink&quot; title=&quot;Item 49. Prefer primitive types to boxed primitives&quot;&gt;&lt;/a&gt;Item 49. Prefer primitive types to boxed primitives&lt;/h3&gt;&lt;p&gt;Autoboxing reduces the verbosity but not the danger of using boxed primitives.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-50-Avoid-strings-where-other-types-are-more-appropriate&quot;&gt;&lt;a href=&quot;#Item-50-Avoid-strings-where-other-types-are-more-appropriate&quot; class=&quot;headerlink&quot; title=&quot;Item 50. Avoid strings where other types are more appropriate&quot;&gt;&lt;/a&gt;Item 50. Avoid strings where other types are more appropriate&lt;/h3&gt;&lt;p&gt;Strings are poor substitutes for other value types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Poor substitutes for enum types.&lt;/li&gt;
&lt;li&gt;Poor substitutes for aggregate types.&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Poor substitutes for capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-41-Use-overloading-judiciously&quot;&gt;&lt;a href=&quot;#Item-41-Use-overloading-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 41. Use overloadi
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java IV</title>
    <link href="http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-IV/"/>
    <id>http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-IV/</id>
    <published>2017-10-02T04:34:37.000Z</published>
    <updated>2017-10-02T05:01:09.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-31-Use-instance-fields-instead-of-ordinals&quot;&gt;&lt;a href=&quot;#Item-31-Use-instance-fields-instead-of-ordinals&quot; class=&quot;headerlink&quot; title=&quot;Item 31. Use instance fields instead of ordinals&quot;&gt;&lt;/a&gt;Item 31. Use instance fields instead of ordinals&lt;/h3&gt;&lt;p&gt;All enums have an ordinal method returning the numerical position of each enum constant in its type.&lt;/p&gt;
&lt;p&gt;Never derive a value associated with an enum from its ordinal; store it in an instance field instead.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-32-Use-EnumSet-instead-of-bit-fields&quot;&gt;&lt;a href=&quot;#Item-32-Use-EnumSet-instead-of-bit-fields&quot; class=&quot;headerlink&quot; title=&quot;Item 32. Use EnumSet instead of bit fields&quot;&gt;&lt;/a&gt;Item 32. Use EnumSet instead of bit fields&lt;/h3&gt;&lt;p&gt;Especially an enum type will be used in sets&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-33-Use-EnumMap-instead-of-ordinal-indexing&quot;&gt;&lt;a href=&quot;#Item-33-Use-EnumMap-instead-of-ordinal-indexing&quot; class=&quot;headerlink&quot; title=&quot;Item 33. Use EnumMap instead of ordinal indexing&quot;&gt;&lt;/a&gt;Item 33. Use EnumMap instead of ordinal indexing&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-34-Emulate-extensible-enums-with-interface&quot;&gt;&lt;a href=&quot;#Item-34-Emulate-extensible-enums-with-interface&quot; class=&quot;headerlink&quot; title=&quot;Item 34. Emulate extensible enums with interface&quot;&gt;&lt;/a&gt;Item 34. Emulate extensible enums with interface&lt;/h3&gt;&lt;p&gt;One compelling use case for extensible enumerated types is operation codes.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-35-Prefer-annotations-to-naming-patterns&quot;&gt;&lt;a href=&quot;#Item-35-Prefer-annotations-to-naming-patterns&quot; class=&quot;headerlink&quot; title=&quot;Item 35. Prefer annotations to naming patterns&quot;&gt;&lt;/a&gt;Item 35. Prefer annotations to naming patterns&lt;/h3&gt;&lt;p&gt;All programmers should use predefined annotation types provided by the Java platform.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-36-Consistently-use-the-Override-annotation&quot;&gt;&lt;a href=&quot;#Item-36-Consistently-use-the-Override-annotation&quot; class=&quot;headerlink&quot; title=&quot;Item 36. Consistently use the Override annotation&quot;&gt;&lt;/a&gt;Item 36. Consistently use the Override annotation&lt;/h3&gt;&lt;p&gt;Should use the Override annotation on every method declaration that you believe to override a superclass declaration.&lt;/p&gt;
&lt;p&gt;One exception is that in concrete classes, need not annotate methods that you believe to override abstract methods declaration.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-37-Use-marker-interfaces-to-define-types&quot;&gt;&lt;a href=&quot;#Item-37-Use-marker-interfaces-to-define-types&quot; class=&quot;headerlink&quot; title=&quot;Item 37. Use marker interfaces to define types&quot;&gt;&lt;/a&gt;Item 37. Use marker interfaces to define types&lt;/h3&gt;&lt;p&gt;Advantages of marker interface:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define a type implemented by instances of the marked class but marker annotations do not;&lt;/li&gt;
&lt;li&gt;Maker interface can be targeted more precisely and if an annotation type is declared with target ElementType.TYPE, it can be applied to any class or interface.&lt;/li&gt;
&lt;li&gt;Must use marker interface if marker only applies to classes and interfaces, or want to write one or more methods accepting only objects having this marking.&lt;/li&gt;
&lt;li&gt;If want to limit the use of marker to elements of a particular interface, define the marker as a subinterface of that interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advantages of marker annotations over marker interfaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is possible to add more information to an annotation type after it is already in use by adding one or more annotation elements with defaults.&lt;/li&gt;
&lt;li&gt;Must use an annotation if the marker applies to any program element other than a class or interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-38-Check-parameters-for-validity&quot;&gt;&lt;a href=&quot;#Item-38-Check-parameters-for-validity&quot; class=&quot;headerlink&quot; title=&quot;Item 38. Check parameters for validity&quot;&gt;&lt;/a&gt;Item 38. Check parameters for validity&lt;/h3&gt;&lt;p&gt;For public methods, use Javadoc &lt;code&gt;@throws&lt;/code&gt; tag to document the exception that will be thrown if a restriction on parameter values is violated. For nonpublic methods, use assertion to check parameters.&lt;/p&gt;
&lt;p&gt;Constructor should check the validity of parameters stored away for later use.&lt;/p&gt;
&lt;p&gt;Exception is the case in which the validity check would be expensive or impractical and it is performed implicitly.&lt;/p&gt;
&lt;p&gt;Should design methods to be as general as it is practical to make them. The fewer restriction on parameters, the better; Document all the restrictions and enforce them with explicit checks at the beginning of the method body.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-39-Make-defensive-copies-when-needed&quot;&gt;&lt;a href=&quot;#Item-39-Make-defensive-copies-when-needed&quot; class=&quot;headerlink&quot; title=&quot;Item 39. Make defensive copies when needed&quot;&gt;&lt;/a&gt;Item 39. Make defensive copies when needed&lt;/h3&gt;&lt;p&gt;Must program defensively with assumption that clients of class will do their best to destroy its invariants.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-40-Design-method-signatures-carefully&quot;&gt;&lt;a href=&quot;#Item-40-Design-method-signatures-carefully&quot; class=&quot;headerlink&quot; title=&quot;Item 40. Design method signatures carefully&quot;&gt;&lt;/a&gt;Item 40. Design method signatures carefully&lt;/h3&gt;&lt;p&gt;Here are the rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose method names carefully.&lt;/li&gt;
&lt;li&gt;Do not go overboard in providing convenience methods.&lt;/li&gt;
&lt;li&gt;Avoid long parameter lists.&lt;/li&gt;
&lt;li&gt;For parameter types, favor interfaces over classes.&lt;/li&gt;
&lt;li&gt;Prefer two-element enum type to boolean parameters.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-31-Use-instance-fields-instead-of-ordinals&quot;&gt;&lt;a href=&quot;#Item-31-Use-instance-fields-instead-of-ordinals&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java III</title>
    <link href="http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-III/"/>
    <id>http://yular.github.io/2017/10/01/Reading-Note-of-Effective-Java-III/</id>
    <published>2017-10-02T00:52:05.000Z</published>
    <updated>2017-10-02T02:56:37.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-21-Use-function-objects-to-represent-strategies&quot;&gt;&lt;a href=&quot;#Item-21-Use-function-objects-to-represent-strategies&quot; class=&quot;headerlink&quot; title=&quot;Item 21. Use function objects to represent strategies&quot;&gt;&lt;/a&gt;Item 21. Use function objects to represent strategies&lt;/h3&gt;&lt;p&gt;Strategy pattern is to allow the caller of a function to specialize its behavior by passing in a second function. Function objects are instances of classes implementing interfaces whose methods perform operations on other objects, passed explicitly to that methods. A typical concrete strategy class is stateless, has no fields, and thus all instances are functionally equivalent.&lt;/p&gt;
&lt;p&gt;In Java, to implement Strategy pattern, declare an interface to represent the strategy, and a class that implements this interface for each concrete strategy.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-22-Favor-static-member-classes-over-nonstatic&quot;&gt;&lt;a href=&quot;#Item-22-Favor-static-member-classes-over-nonstatic&quot; class=&quot;headerlink&quot; title=&quot;Item 22. Favor static member classes over nonstatic.&quot;&gt;&lt;/a&gt;Item 22. Favor static member classes over nonstatic.&lt;/h3&gt;&lt;p&gt;Static member clases are kinds of nested class. One common use of a static member class is as a public helper class, useful only in conjunction with its outer class. The association between a nonstatic member class instance and its enclosing instance is established when the former is created, and it cannot be modified thereafter. The association takes up time and space for nonstatic member class construction.&lt;/p&gt;
&lt;p&gt;One common use of a nonstatic member class is to define an Adapter allowing an instance of the outer clas to be viewed as an instance of some unrelated class. Each instance of a nonstatic member class is implicitly associated with an enclosing instance of its enclosing class. Within instance methods of a nonstatic member class, can invoke methods on the enclosing instance or obtain a reference to the enclosing instance using the &lt;em&gt; qualified this&lt;/em&gt; construct.&lt;/p&gt;
&lt;p&gt;If declare a member class does not require access to an enclosing instance, always use static modifier in declaration.&lt;/p&gt;
&lt;p&gt;Common use of private static member classe is to reperesent components of the object represented by their enclosing class.&lt;/p&gt;
&lt;p&gt;Common use of anonymous classes is to create function objects on the fly, to create process objects, such as Runnable, Thread, or TimerTask instances, and within static factory methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-23-Do-not-use-raw-types-in-new-code&quot;&gt;&lt;a href=&quot;#Item-23-Do-not-use-raw-types-in-new-code&quot; class=&quot;headerlink&quot; title=&quot;Item 23. Do not use raw types in new code&quot;&gt;&lt;/a&gt;Item 23. Do not use raw types in new code&lt;/h3&gt;&lt;p&gt;A class or interface whose declaration has one or more type parameters is a generic class or interface, and they are called generic types. For example, List&lt;e&gt; is generic type. &lt;/e&gt;&lt;/p&gt;
&lt;p&gt;Each generic type defines a set of parameterized types, which consists of actual type parameters corresponding to the generic type as formal type parameters. For example, List&lt;string&gt;.&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;Each generic type defines a raw type, which is the name of the generic type used without any accompanying actual tpye parameters. For example, List.&lt;/p&gt;
&lt;p&gt;It is fine to use types parameterized to allow insertion of arbitrary objects. For example, List&lt;object&gt;.&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;If the element type is unknown and does not matter, use unbounded wildcard types. When use unbouned wilcard types, not only cannot put any element except null into a Collection&amp;lt;?&amp;gt;, but also cannot assume anything about the type of the objects that user get out. For example,Set&amp;lt;?&amp;gt;. To use unbounded wildcard type, do this: &lt;code&gt;Set&amp;lt;?&amp;gt; st = new Set&amp;lt;String&amp;gt;()&lt;/code&gt; by specifying a type; otherwise, no element can be inserted to the data collection. If these restrictions are unacceptable, use generic methods or bounded wildcard types.&lt;/p&gt;
&lt;p&gt;Two exceptions to the rule of disallowing raw types, both stem from the fact that generic type information is erased at runtime.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must use raw type in class literals. For example, List.class.&lt;/li&gt;
&lt;li&gt;The preferred way to use the instanceof operator with generic types is o instanceof Set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bounded type: exp. &lt;e extends=&quot;&quot; number=&quot;&quot;&gt;.&lt;/e&gt;&lt;/p&gt;
&lt;p&gt;Bounded wildcard type: exp. &amp;lt;? extends Number&amp;gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-24-Eliminate-unchecked-warnings-Ensure-typesafe&quot;&gt;&lt;a href=&quot;#Item-24-Eliminate-unchecked-warnings-Ensure-typesafe&quot; class=&quot;headerlink&quot; title=&quot;Item 24. Eliminate unchecked warnings. (Ensure typesafe)&quot;&gt;&lt;/a&gt;Item 24. Eliminate unchecked warnings. (Ensure typesafe)&lt;/h3&gt;&lt;p&gt;If cannot eliminate a warning, prove that the code provoking the warning is typesafe, and only then suppress the warning with an &lt;code&gt;@SuppressWarnings(&amp;quot;unchecked&amp;quot;)&lt;/code&gt; annotation. And add a comment saying why it is safe to do so.&lt;/p&gt;
&lt;p&gt;Always use the Suppress-Warnings annotation on the smallest scope possible.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-25-Prefer-lists-to-arrays&quot;&gt;&lt;a href=&quot;#Item-25-Prefer-lists-to-arrays&quot; class=&quot;headerlink&quot; title=&quot;Item 25. Prefer lists to arrays&quot;&gt;&lt;/a&gt;Item 25. Prefer lists to arrays&lt;/h3&gt;&lt;p&gt;Arrays are covariant (if Sub is a subtype of Super, Sub[] is also a subtype of Super[]), and reified (know and enforce element types at runtime). &lt;/p&gt;
&lt;p&gt;Generics are invariant and erasure (enforce type constraints only at compile time and discard them at runtime).&lt;/p&gt;
&lt;p&gt;Do not mix use generics and arrays. For example, List&lt;string&gt;[].&lt;/string&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-26-Favor-generic-types&quot;&gt;&lt;a href=&quot;#Item-26-Favor-generic-types&quot; class=&quot;headerlink&quot; title=&quot;Item 26. Favor generic types&quot;&gt;&lt;/a&gt;Item 26. Favor generic types&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-27-Favor-generic-methods&quot;&gt;&lt;a href=&quot;#Item-27-Favor-generic-methods&quot; class=&quot;headerlink&quot; title=&quot;Item 27. Favor generic methods&quot;&gt;&lt;/a&gt;Item 27. Favor generic methods&lt;/h3&gt;&lt;p&gt;The type parameter list, which declares the type parameter, goes between the method’s modifiers and it’s return type.&lt;/p&gt;
&lt;p&gt;Recursive type bound is that a type parameter is bounded by some expression involving that type parameter itself. For example, interface Comparable&lt;t&gt; .&lt;/t&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-28-Use-bounded-wildcards-to-increase-API-flexibility&quot;&gt;&lt;a href=&quot;#Item-28-Use-bounded-wildcards-to-increase-API-flexibility&quot; class=&quot;headerlink&quot; title=&quot;Item 28. Use bounded wildcards to increase API flexibility&quot;&gt;&lt;/a&gt;Item 28. Use bounded wildcards to increase API flexibility&lt;/h3&gt;&lt;p&gt;For maximum flexibility, use wildcard types on input parameters representing producers (extends E) or consumers (super E), which is PECS rule. But do not use wildcard types are return types.&lt;/p&gt;
&lt;p&gt;PECS rules: producers-extends, consumers-super. Both Comparable and Comparator are consumer pattern.&lt;/p&gt;
&lt;p&gt;Properly used, wildcard types are nearly invisible to users of a class. If the user of a class has to think about wildcard types, there is probably something wrong with the class’s API.&lt;/p&gt;
&lt;p&gt;If a type parameter appears once in a method declaration, replace it with a wildcard. Replace unbounded type parameter with unbounded wildcard, and replace bounded type parameter with bounded wildcard.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-29-Consider-typesafe-heterogeneous-containers&quot;&gt;&lt;a href=&quot;#Item-29-Consider-typesafe-heterogeneous-containers&quot; class=&quot;headerlink&quot; title=&quot;Item 29. Consider typesafe heterogeneous containers&quot;&gt;&lt;/a&gt;Item 29. Consider typesafe heterogeneous containers&lt;/h3&gt;&lt;p&gt;For example, Map&lt;class&lt;?&gt;, Object&amp;gt; typesafe and all keys are of different types.&lt;/class&lt;?&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-30-Use-enums-instead-of-int-constants&quot;&gt;&lt;a href=&quot;#Item-30-Use-enums-instead-of-int-constants&quot; class=&quot;headerlink&quot; title=&quot;Item 30. Use enums instead of int constants&quot;&gt;&lt;/a&gt;Item 30. Use enums instead of int constants&lt;/h3&gt;&lt;p&gt;To associate data with enum constants, declare instance fields and write a constructor that takes the data and stores it in the fields. If enum is generally useful, it should be a top level class; if its use is tied to a specific top-level class, it should be a member class of the top level class.&lt;/p&gt;
&lt;p&gt;Use constants specific method implementation pattern. Can combine with constant-specific data. The disadvantages is to make it harder to share code among enum constants.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-21-Use-function-objects-to-represent-strategies&quot;&gt;&lt;a href=&quot;#Item-21-Use-function-objects-to-represent-strategies&quot; class=&quot;headerl
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java II</title>
    <link href="http://yular.github.io/2017/09/27/Reading-Note-of-Effective-Java-II/"/>
    <id>http://yular.github.io/2017/09/27/Reading-Note-of-Effective-Java-II/</id>
    <published>2017-09-27T07:51:21.000Z</published>
    <updated>2017-09-30T08:20:51.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-11-Override-clone-judiciously&quot;&gt;&lt;a href=&quot;#Item-11-Override-clone-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 11. Override clone judiciously&quot;&gt;&lt;/a&gt;Item 11. Override clone judiciously&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Clone: creates an object without calling a constructor. x.clone() != x but x.clone().equals(x). But a well-behaved clone method should call constructor.&lt;/li&gt;
&lt;li&gt;If override the clone method in a nonfinal class, should return an object obtained by invoking super.clone().&lt;/li&gt;
&lt;li&gt;In practice, a class implemeneting Cloneable is expected to provide a properly functioning public clone method.&lt;/li&gt;
&lt;li&gt;clone method: never make the client do anything the library can do for the client.&lt;/li&gt;
&lt;li&gt;In effect, the clone method functions as another constructor; you must ensure that it does no harm to the original object and that it properly establishes invariants on the clone.&lt;/li&gt;
&lt;li&gt;The clone architecture is incompatible with normal use of final fields referring to mutable objects.&lt;/li&gt;
&lt;li&gt;Like a constructor, a clone method cannot invoke any nonfinal (overriden) methods on the clone under construction.&lt;/li&gt;
&lt;li&gt;A fine approach to object copying is to provide a copy constructor or copy factory.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-12-Consider-implementing-Comparable&quot;&gt;&lt;a href=&quot;#Item-12-Consider-implementing-Comparable&quot; class=&quot;headerlink&quot; title=&quot;Item 12. Consider implementing Comparable&quot;&gt;&lt;/a&gt;Item 12. Consider implementing Comparable&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;compareTo contract includes reflexivity, symmetry, and transitivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-13-Minimize-the-accessibility-of-classes-and-members&quot;&gt;&lt;a href=&quot;#Item-13-Minimize-the-accessibility-of-classes-and-members&quot; class=&quot;headerlink&quot; title=&quot;Item 13. Minimize the accessibility of classes and members&quot;&gt;&lt;/a&gt;Item 13. Minimize the accessibility of classes and members&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Information hiding: make each class or member as inaccessible as possible.&lt;/li&gt;
&lt;li&gt;It is acceptable to make a private member of a public class pack-private to test it, but it is not acceptable to raise the accessibility any higher than that.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-14-In-public-classes-use-accessor-methods-not-public-fields&quot;&gt;&lt;a href=&quot;#Item-14-In-public-classes-use-accessor-methods-not-public-fields&quot; class=&quot;headerlink&quot; title=&quot;Item 14. In public classes, use accessor methods, not public fields&quot;&gt;&lt;/a&gt;Item 14. In public classes, use accessor methods, not public fields&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Classes with public mutable fields are not thread-safe and instance fields should never be public.&lt;/li&gt;
&lt;li&gt;Only exception is to expose constants via public static final fields, assuming that the constants form an integral part of the abstractions provided by the class.&lt;/li&gt;
&lt;li&gt;In public classes, use accessor methods, not public fields. But if a class is package-private or a private nested class, it is fine to expose its data fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-15-Minimize-mutability&quot;&gt;&lt;a href=&quot;#Item-15-Minimize-mutability&quot; class=&quot;headerlink&quot; title=&quot;Item 15. Minimize mutability&quot;&gt;&lt;/a&gt;Item 15. Minimize mutability&lt;/h3&gt;&lt;p&gt;Five rules to make a class immutable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not provide any methods modifying the object’s state.&lt;/li&gt;
&lt;li&gt;Ensure that the class cannot be extended.&lt;/li&gt;
&lt;li&gt;Make all fields final.&lt;/li&gt;
&lt;li&gt;Make all fields private.&lt;/li&gt;
&lt;li&gt;Ensure exclusive access to any mutable components.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functional programming approach enables immutability.&lt;/p&gt;
&lt;p&gt;Immutable objects are simple, inherently thread-safe, can be shared freely, and require no synchronization.&lt;/p&gt;
&lt;p&gt;Classes should be immutable unless there is a very good reason to make them mutable. If a class cannot be made immutable, limit its mutability as much as possible.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-16-Favor-composition-over-inheritance&quot;&gt;&lt;a href=&quot;#Item-16-Favor-composition-over-inheritance&quot; class=&quot;headerlink&quot; title=&quot;Item 16. Favor composition over inheritance&quot;&gt;&lt;/a&gt;Item 16. Favor composition over inheritance&lt;/h3&gt;&lt;p&gt;Unlike method invocation, inheritance violates encapsulation.&lt;/p&gt;
&lt;p&gt;Composition: the existing class becomes a component of a new one. Each instance method in the new class invokes the corresponding method on the contained instance of the existing class and returns the results. This is called forwarding and &lt;code&gt;Decorator pattern&lt;/code&gt;. And combination of composition and forwarding is loosely referred to as delegation.&lt;/p&gt;
&lt;p&gt;Inheritance is appropriate only in circumstances where the subclass is a subtype of the superclass.&lt;/p&gt;
&lt;p&gt;Wrapper classes (composition) are not suited for callback framework.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-17-Design-and-document-for-inheritance-or-else-prohibit-it&quot;&gt;&lt;a href=&quot;#Item-17-Design-and-document-for-inheritance-or-else-prohibit-it&quot; class=&quot;headerlink&quot; title=&quot;Item 17. Design and document for inheritance or else prohibit it&quot;&gt;&lt;/a&gt;Item 17. Design and document for inheritance or else prohibit it&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The class must document precisely the effects of overriding any method and its self-use of overridable methods.&lt;/li&gt;
&lt;li&gt;To allow programmers to write efficient subclasses without undue pain, a class may have to provide hooks into its internal working in the form of judiciously chosen protected methods or even protected methods or even protected fields. That helps subclasses reuse them more easily.&lt;/li&gt;
&lt;li&gt;The only way to test a class designed for inheritance is to write subclasses. Experience shows that three subclasses are sufficient to test an standard class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To allow inheritance, follow these rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constructors must not invoke overridable methods.&lt;/li&gt;
&lt;li&gt;If implement Clonable and Serializable in a class, neither clone nor readObject may invoke an override method directly or indirectly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Designing a class for inheritance places substantial limitations on the class. &lt;/p&gt;
&lt;p&gt;The best solution to inheritance problem is to prohibit subclassing in classes that are not designed and documented to be safely subclassed. Two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Declare the class final.&lt;/li&gt;
&lt;li&gt;Make all the constructors private or package-private and to add public static factories in place of the constructors.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-18-Prefer-interfaces-to-abstract-classes&quot;&gt;&lt;a href=&quot;#Item-18-Prefer-interfaces-to-abstract-classes&quot; class=&quot;headerlink&quot; title=&quot;Item 18. Prefer interfaces to abstract classes&quot;&gt;&lt;/a&gt;Item 18. Prefer interfaces to abstract classes&lt;/h3&gt;&lt;p&gt;Extending abstract class means subclass is a type of abstract class. Existing classes can be easily retrofitted to implement a new interface.&lt;/p&gt;
&lt;p&gt;Interfaces are ideal for defining mixins. Mixins mean a class can implement in addition to its primary type to declare that it provides some optional behavior. They allow the construction of nonhierarchical type framework.&lt;/p&gt;
&lt;p&gt;Interfaces enable safe, powerful functionality enhancements.&lt;/p&gt;
&lt;p&gt;Combine the virtues of interfaces and abstract class by providing an abstract skeletal implementation class to go with each nontrivial interface exported. A typical skeletal implementation is an abstract class implements interface(s). So it is designed for inheritance.&lt;/p&gt;
&lt;p&gt;Simple implementation is that it implements an interface and is designed for inheritance but not abstract.&lt;/p&gt;
&lt;p&gt;Abstract class is far easier to evolve than interface is. Once interface is released and widely implemented, it is almost impossible to change. Really need to get it right in the first time.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-19-Use-interfaces-only-to-define-type&quot;&gt;&lt;a href=&quot;#Item-19-Use-interfaces-only-to-define-type&quot; class=&quot;headerlink&quot; title=&quot;Item 19. Use interfaces only to define type&quot;&gt;&lt;/a&gt;Item 19. Use interfaces only to define type&lt;/h3&gt;&lt;p&gt;The constant interface pattern is a poor use of interfaces.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-20-Prefer-class-hierarchies-to-tagged-classes&quot;&gt;&lt;a href=&quot;#Item-20-Prefer-class-hierarchies-to-tagged-classes&quot; class=&quot;headerlink&quot; title=&quot;Item 20. Prefer class hierarchies to tagged classes&quot;&gt;&lt;/a&gt;Item 20. Prefer class hierarchies to tagged classes&lt;/h3&gt;&lt;p&gt;Tag class is the class whose instances come in two or more flavors and contain a tag field indicating the flavor of the instance.&lt;/p&gt;
&lt;p&gt;So all in all: Interface &amp;gt; abstract class &amp;gt; tagged class. ( &amp;gt; means preference)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-11-Override-clone-judiciously&quot;&gt;&lt;a href=&quot;#Item-11-Override-clone-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 11. Override clone 
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 9 New Features</title>
    <link href="http://yular.github.io/2017/09/23/Java-9-New-Features/"/>
    <id>http://yular.github.io/2017/09/23/Java-9-New-Features/</id>
    <published>2017-09-24T01:08:51.000Z</published>
    <updated>2017-11-27T09:29:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Java 9 is released on Sep 21, 2017. Many new features are added and here is the complete list of new feature from &lt;a href=&quot;http://openjdk.java.net/projects/jdk9/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenJDK official page&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Java-9-REPL-JShell&quot;&gt;&lt;a href=&quot;#Java-9-REPL-JShell&quot; class=&quot;headerlink&quot; title=&quot;Java 9 REPL(JShell)&quot;&gt;&lt;/a&gt;Java 9 REPL(JShell)&lt;/h3&gt;&lt;p&gt;In Java 9, we can use a command line tool called &lt;code&gt;JShell&lt;/code&gt; to execute Java statement, which is similar to python shell. The command to start JSell is:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; jshell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(output is similar as follow)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  Welcome to JShell -- Version 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  For an introduction type: /help intro&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And we can write and execute Java code as following simple example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jshell&amp;gt; int a = 10, b = 20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a ==&amp;gt; 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b ==&amp;gt; 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jshell&amp;gt; int c = a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c ==&amp;gt; 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jshell&amp;gt; int sum = a + b + c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum ==&amp;gt; 60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jshell&amp;gt; System.out.println(&amp;quot;Sum of a, b and c is : &amp;quot; + sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sum of a, b and c is : 60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### Factory Methods for Immutable Data Structures&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In Java 9, factory methods for immutable List, Set, Map and Map.Entry are available to create empty or non-empty Collection object. They are `of()` methods. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Here are some simple examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** Immutable List  **&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;jshell&amp;gt; List immutableEmptyList = List.of();&lt;br&gt;immutableEmptyList ==&amp;gt; []&lt;/p&gt;
&lt;p&gt;jshell&amp;gt; List immutableList = List.of(“one”,”two”,”three”);&lt;br&gt;immutableList ==&amp;gt; [one, two, three]&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;** Immutable Map **&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;jshell&amp;gt; Map immutableEmptyMap = Map.of()&lt;br&gt;immutableEmptyMap ==&amp;gt; {}&lt;/p&gt;
&lt;p&gt;jshell&amp;gt; Map immutableMap = Map.of(“one”, 1, “two”, 2, “three”, 3)&lt;br&gt;immutableMap ==&amp;gt; {three=3, two=2, one=1}&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### Private Methods in Interface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In Java 9, users can define private static or non-static methods inside interface.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;See this sample code:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;import java.time.Clock;&lt;br&gt;import java.time.Duration;&lt;br&gt;import java.time.Instant;&lt;/p&gt;
&lt;p&gt;public interface isDatabaseItem {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Long defaultTimeToLive = generateDefaultTimeToLive();

private static Long generateDefaultTimeToLive() {
    Instant currentTime = Instant.now( Clock.systemDefaultZone() );
    return currentTime.plus( Duration.ofSeconds(1L) ).getEpochSecond();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;```&lt;/p&gt;
&lt;h3 id=&quot;Modue-Definition&quot;&gt;&lt;a href=&quot;#Modue-Definition&quot; class=&quot;headerlink&quot; title=&quot;Modue Definition&quot;&gt;&lt;/a&gt;Modue Definition&lt;/h3&gt;&lt;h3 id=&quot;Http2-Client&quot;&gt;&lt;a href=&quot;#Http2-Client&quot; class=&quot;headerlink&quot; title=&quot;Http2 Client&quot;&gt;&lt;/a&gt;Http2 Client&lt;/h3&gt;&lt;h3 id=&quot;Improvements-in-Stream-API&quot;&gt;&lt;a href=&quot;#Improvements-in-Stream-API&quot; class=&quot;headerlink&quot; title=&quot;Improvements in Stream API&quot;&gt;&lt;/a&gt;Improvements in Stream API&lt;/h3&gt;&lt;p&gt;(To be continue)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java 9 is released on Sep 21, 2017. Many new features are added and here is the complete list of new feature from &lt;a href=&quot;http://openjdk
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Test Driven Development</title>
    <link href="http://yular.github.io/2017/09/14/Thinking-in-Test-Driven-Development/"/>
    <id>http://yular.github.io/2017/09/14/Thinking-in-Test-Driven-Development/</id>
    <published>2017-09-15T05:26:09.000Z</published>
    <updated>2017-09-15T06:24:02.000Z</updated>
    
    <content type="html">&lt;p&gt;The book: Test Driven Development By Example, which is written by Kent Beck, is really a good book. I do not think currently I have already fully mastered the TDD skill and be able to apply this skill in my SDE job in the 100% right way. But I still would like to share my thoughts on this book.&lt;/p&gt;
&lt;p&gt;In my software development model, here are the steps to apply TDD in practice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fully understand the user requirement.&lt;/li&gt;
&lt;li&gt;Do a good design for the project, which includes the system design and object-oriented design.&lt;/li&gt;
&lt;li&gt;Based on the design, list all the features need to accomplish.&lt;/li&gt;
&lt;li&gt;Start with one of these features, write a test for it, then try to pass the test (fake it or provide the correct code), and refactor the test code and production code.&lt;/li&gt;
&lt;li&gt;While implement more and more features, refactor the production code (remove duplication, use inheritance, use interface and so on …). If any tests fail after refactor, figure out what is going wrong and fix the bug. Also remember to refactor the test code.&lt;/li&gt;
&lt;li&gt;While refactor the code, keep the code clean so that it is simple, easy to read and maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;p&gt;Here are some useful tips borrowed from the book.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a test list including all the required tests at the beginning.&lt;/li&gt;
&lt;li&gt;The goal of each test is to leave the world in exactly the same state before it ran.&lt;/li&gt;
&lt;li&gt;Each test should represent one step towards overall goal.&lt;/li&gt;
&lt;li&gt;What should be tested:&lt;ul&gt;
&lt;li&gt;Conditions&lt;/li&gt;
&lt;li&gt;Loops&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What factors should be included in the test:&lt;ul&gt;
&lt;li&gt;What does the operation belong to.&lt;/li&gt;
&lt;li&gt;What are the correct inputs.&lt;/li&gt;
&lt;li&gt;What is the correct output given those input.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some attributes of tests suggesting a design in trouble:&lt;ul&gt;
&lt;li&gt;Long setup code.&lt;/li&gt;
&lt;li&gt;Setup duplication.&lt;/li&gt;
&lt;li&gt;Long running tests.&lt;/li&gt;
&lt;li&gt;Fragile tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write assert first in the test.&lt;/li&gt;
&lt;li&gt;To improve test coverage, take a fixed set of tests and simplify the logic of the program.&lt;/li&gt;
&lt;li&gt;Avoid test coupling. All the tests should be run independently.&lt;/li&gt;
&lt;li&gt;Isolating tests also helps to decouple objects (Improve the design).&lt;/li&gt;
&lt;li&gt;Tests should be in a small scale instead of whole application.&lt;/li&gt;
&lt;li&gt;For common objects needed by several tests, convert local variables into instance variables.&lt;/li&gt;
&lt;li&gt;Use data that makes the test easy to read and follow.&lt;/li&gt;
&lt;li&gt;Evident data seems to be an exception to the rule that you do not want magic numbers in your code.&lt;/li&gt;
&lt;li&gt;When a defect is reported, write the smallest possible test that fails, and that once it runs, the defect will be repaired.&lt;/li&gt;
&lt;li&gt;To implement an operation that works with collections of objects, implement it without the collection first, then make it work with collections.&lt;/li&gt;
&lt;li&gt;To design objects that will be widely shared but for whom identify is unimportant, set their state when they are created and never change it, and operations on the object always return a new object.&lt;/li&gt;
&lt;li&gt;Always make sure all the tests are running before check in your own code.&lt;/li&gt;
&lt;li&gt;Unless have reason to distrust it, do not test code from others. &lt;/li&gt;
&lt;li&gt;toString method is an exception that does not require test.&lt;/li&gt;
&lt;li&gt;Physical setup (for working environment): cheap disk, nice chair.&lt;/li&gt;
&lt;li&gt;Get cheap/slow/old machines for individual email and surfing.&lt;/li&gt;
&lt;li&gt;Leave a programming session when programming alone, leave the last test broken.&lt;/li&gt;
&lt;li&gt;Leave a programming session when programming in a team, leave all the test running.&lt;/li&gt;
&lt;li&gt;Feel lost, throw away the code and start over.&lt;/li&gt;
&lt;li&gt;Feel tired or stuck, take a break.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The book: Test Driven Development By Example, which is written by Kent Beck, is really a good book. I do not think currently I have alrea
    
    </summary>
    
    
      <category term="Test" scheme="http://yular.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Aspect Oriented Programming</title>
    <link href="http://yular.github.io/2017/09/11/Aspect-Oriented-Programming/"/>
    <id>http://yular.github.io/2017/09/11/Aspect-Oriented-Programming/</id>
    <published>2017-09-11T08:51:57.000Z</published>
    <updated>2017-09-11T08:57:16.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspect-oriented programming in Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a “pointcut” specification, such as “log all function calls when the function’s name begins with ‘set’”. This allows behaviors that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality. AOP forms a basis for aspect-oriented software development.&lt;/p&gt;
&lt;p&gt;Note that AOP usually uses &lt;a href=&quot;http://yular.github.io/2017/09/10/Proxy-Pattern-In-Java/&quot;&gt;Proxy Pattern&lt;/a&gt; in its implementation.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspect-oriented programming in
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yular.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Proxy Pattern (In Java)</title>
    <link href="http://yular.github.io/2017/09/10/Proxy-Pattern-In-Java/"/>
    <id>http://yular.github.io/2017/09/10/Proxy-Pattern-In-Java/</id>
    <published>2017-09-11T00:02:49.000Z</published>
    <updated>2017-09-11T01:31:17.000Z</updated>
    
    <content type="html">&lt;p&gt;See the meaning of &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy in Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we know, when we visit a web service, we may not directly get the access of the hosts where the service is deployed but the hosts which sends the same or reasonable response as the service does. And those hosts are proxies.&lt;/p&gt;
&lt;p&gt;So in the design pattern, proxy pattern uses the similar mechanism. A class (proxy class) represents the functionality of the other class. Proxy class implements or extends the same interface or abstract class as the class proxied does, and proxy instance contains the instance proxied.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy Pattern in Wikipedia&lt;/a&gt;. The diagram there can help to understand the structure of this design pattern.&lt;/p&gt;
&lt;p&gt;Here is some sample code about Proxy Pattern.&lt;/p&gt;
&lt;h3 id=&quot;Sample-Code&quot;&gt;&lt;a href=&quot;#Sample-Code&quot; class=&quot;headerlink&quot; title=&quot;Sample Code&quot;&gt;&lt;/a&gt;Sample Code&lt;/h3&gt;&lt;p&gt;Here is the link of below &lt;a href=&quot;https://github.com/yular/Java-CodeLibrary/tree/master/DesignPattern/ProxyPattern/src/com/yulartech/designpattern/proxypattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Firt of all, here is the service interface:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface ImageService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then the real image service and proxy image service must implement this interface.&lt;/p&gt;
&lt;p&gt;Real image service source code is below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class RealImageService implements ImageService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RealImageService(String imageFileName)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.imageFileName = imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        upLoadImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void upLoadImage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final String msg = String.format(&amp;quot;Successfully upload image %s to the service.&amp;quot;, imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void showImage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final String msg = String.format(&amp;quot;Show the image %s.&amp;quot;, imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Proxy image service source code is below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ProxyImageService implements ImageService&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private RealImageService realImageService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private boolean isImageCached;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public ProxyImageService(String imageFileName)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.imageFileName = imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.isImageCached = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void showImage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (realImageService == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            realImageService = new RealImageService(imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isImageCached) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final String msg = String.format(&amp;quot;Get image %s from cache in proxy. &amp;quot;, imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        realImageService.showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cacheImageInProxy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void cacheImageInProxy() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isImageCached = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;At last, implement a Main class to run the demo:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String imageFileName = &amp;quot;test-image.png&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ProxyImageService proxyImageService = new ProxyImageService(imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //Show image from actual service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxyImageService.showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //Show image from proxy service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxyImageService.showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And if everything goes well, output should be:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Successfully upload image test-image.png to the service.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Show the image test-image.png.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Get image test-image.png from cache in proxy. Show the image test-image.png.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That means we can retrieve images from proxy in cache instead of actual image service: Proxy class just represents the functionality of the other class.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;See the meaning of &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy in Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we know
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yular.github.io/tags/Design-Pattern/"/>
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java I</title>
    <link href="http://yular.github.io/2017/09/07/Reading-Note-of-Effective-Java-I/"/>
    <id>http://yular.github.io/2017/09/07/Reading-Note-of-Effective-Java-I/</id>
    <published>2017-09-07T08:00:28.000Z</published>
    <updated>2017-09-27T07:56:06.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-1-Consider-static-factory-methods-instead-of-constructors&quot;&gt;&lt;a href=&quot;#Item-1-Consider-static-factory-methods-instead-of-constructors&quot; class=&quot;headerlink&quot; title=&quot;Item 1. Consider static factory methods instead of constructors&quot;&gt;&lt;/a&gt;Item 1. Consider static factory methods instead of constructors&lt;/h3&gt;&lt;p&gt;Static factory method, which is different from regular factory pattern. With a well-chosen name is easier to use and the resulting client code easier to read. Not required to create a new object each time they are invoked, singleton factory for example. Can return an object of any subtype of their return type. Requires the client to refer to the returned object by its interface rather than its implementation class, which is generally good practice. Reduce the verbosity of creating parameterized type instances.&lt;/p&gt;
&lt;p&gt;But this pattern has some disadvantages. Main disadvantage is that classes without public or protected constructors cannot be subclassed. They are not readily distinguishable from other static methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters&quot;&gt;&lt;a href=&quot;#Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters&quot; class=&quot;headerlink&quot; title=&quot;Item 2. Consider a builder when faced with many constructor parameters.&quot;&gt;&lt;/a&gt;Item 2. Consider a builder when faced with many constructor parameters.&lt;/h3&gt;&lt;p&gt;Builder is a static class.&lt;/p&gt;
&lt;p&gt;The main disadvantage of a builder is that cost of creating builder is unlikely to be noticeable.&lt;/p&gt;
&lt;h3 id=&quot;Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type&quot;&gt;&lt;a href=&quot;#Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type&quot; class=&quot;headerlink&quot; title=&quot;Item 3. Enforce the singleton property with a private constructor or an enum type.&quot;&gt;&lt;/a&gt;Item 3. Enforce the singleton property with a private constructor or an enum type.&lt;/h3&gt;&lt;p&gt;Making a class a singleton can make it difficult to test its clients as it is impossible for mocking unless an interface is provided.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-4-Enforce-noninstantiability-with-a-private-constructor&quot;&gt;&lt;a href=&quot;#Item-4-Enforce-noninstantiability-with-a-private-constructor&quot; class=&quot;headerlink&quot; title=&quot;Item 4. Enforce noninstantiability with a private constructor.&quot;&gt;&lt;/a&gt;Item 4. Enforce noninstantiability with a private constructor.&lt;/h3&gt;&lt;p&gt;This kind of classes are utility class, which group static methods and static fields. Need to add comments on these classes.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-5-Avoid-creating-unnecessary-objects&quot;&gt;&lt;a href=&quot;#Item-5-Avoid-creating-unnecessary-objects&quot; class=&quot;headerlink&quot; title=&quot;Item 5. Avoid creating unnecessary objects.&quot;&gt;&lt;/a&gt;Item 5. Avoid creating unnecessary objects.&lt;/h3&gt;&lt;p&gt;Reuse a single object if possible. A reusable object should be immutable. And static factory methods are better choice to create reusable objects.&lt;/p&gt;
&lt;p&gt;So do not use following code:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = new String(&amp;quot;abc&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;but use:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = &amp;quot;abc&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Item-5-1-Prefer-primitives-to-boxed-primitives-and-watch-out-for-unintentional-autoboxing&quot;&gt;&lt;a href=&quot;#Item-5-1-Prefer-primitives-to-boxed-primitives-and-watch-out-for-unintentional-autoboxing&quot; class=&quot;headerlink&quot; title=&quot;Item 5.1 Prefer primitives to boxed primitives and watch out for unintentional autoboxing.&quot;&gt;&lt;/a&gt;Item 5.1 Prefer primitives to boxed primitives and watch out for unintentional autoboxing.&lt;/h4&gt;&lt;h4 id=&quot;Item-5-2-Defensive-copying-on-reusable-objects-may-cause-insidious-bugs-and-security-holes&quot;&gt;&lt;a href=&quot;#Item-5-2-Defensive-copying-on-reusable-objects-may-cause-insidious-bugs-and-security-holes&quot; class=&quot;headerlink&quot; title=&quot;Item 5.2 Defensive copying on reusable objects may cause insidious bugs and security holes.&quot;&gt;&lt;/a&gt;Item 5.2 Defensive copying on reusable objects may cause insidious bugs and security holes.&lt;/h4&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-6-Eliminate-obsolete-object-references-Otherwise-memory-leak-may-happen&quot;&gt;&lt;a href=&quot;#Item-6-Eliminate-obsolete-object-references-Otherwise-memory-leak-may-happen&quot; class=&quot;headerlink&quot; title=&quot;Item 6. Eliminate obsolete object references (Otherwise memory leak may happen)&quot;&gt;&lt;/a&gt;Item 6. Eliminate obsolete object references (Otherwise memory leak may happen)&lt;/h3&gt;&lt;p&gt;Two ways to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exception rather than norm: Null out references once they become obsolete.&lt;/li&gt;
&lt;li&gt;Best way: Let the variable containing the reference fall out of scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source of memory leak:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A class manages its own memory.&lt;/li&gt;
&lt;li&gt;Cache. Solution: use weak hashmap.&lt;/li&gt;
&lt;li&gt;Listeners and other callbacks: store only weak references to them, like keys in weak hashmap.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-7-Avoid-finalizers&quot;&gt;&lt;a href=&quot;#Item-7-Avoid-finalizers&quot; class=&quot;headerlink&quot; title=&quot;Item 7. Avoid finalizers&quot;&gt;&lt;/a&gt;Item 7. Avoid finalizers&lt;/h3&gt;&lt;p&gt;Finalizers are unpredictable, often dangerous and generally unnecessary. Avoid using finalizer() method in Java: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finalizer may not be executed promptly and finalizer queue can be low priority in some JVM environment.&lt;/li&gt;
&lt;li&gt;Never depends on a finalizer to update critical persistent state because program can terminate without executing finalizers.&lt;/li&gt;
&lt;li&gt;There is a severe performance penalty for using finalizer. Never do time critical tasks in finalizer().&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead, provide an explicit termination method. Explicit termination methods are typically used in combination with the try-finally construt to ensure termination.&lt;/p&gt;
&lt;p&gt;Finalizer can be used to log a warning if it finds that the resource has not been terminated.&lt;/p&gt;
&lt;p&gt;Finalizer can be used as a safety net in case of explicit termination methods are not called.&lt;/p&gt;
&lt;p&gt;Use finalizer to terminate noncritical native resources.&lt;/p&gt;
&lt;p&gt;Remember to invoke &lt;code&gt;super.finalize&lt;/code&gt; when have to use finalizer. &lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-8-Obey-the-general-contract-when-overriding-equals&quot;&gt;&lt;a href=&quot;#Item-8-Obey-the-general-contract-when-overriding-equals&quot; class=&quot;headerlink&quot; title=&quot;Item 8. Obey the general contract when overriding equals&quot;&gt;&lt;/a&gt;Item 8. Obey the general contract when overriding equals&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Each instance of the class is inherently unique.&lt;/li&gt;
&lt;li&gt;Do not care whether the class provides a logical equality test.&lt;/li&gt;
&lt;li&gt;A super class has already overriden equals and its behavior is appropriate for this class.&lt;/li&gt;
&lt;li&gt;The class is private or package-private, and you are certain that its equals methods will never be invoked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals method general contract:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reflexive: x.equals(x) must be true.&lt;/li&gt;
&lt;li&gt;Symmetric: x.equals(y) is true then y.equals(x) must be true.&lt;/li&gt;
&lt;li&gt;Transitive: x.equals(y) and y.equals(z) are true then x.equals(z) is true.&lt;/li&gt;
&lt;li&gt;Consitent: x.equals(y) is the same result always unless object is modified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Liskov substitution principle says that any important property of a type should also hold for its subtypes so that any methods written for the type should work equally well on its subtypes.&lt;/p&gt;
&lt;p&gt;Important notes to write equals method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can add a value component to a subclass of an abstract class without violating the equals contract.&lt;/li&gt;
&lt;li&gt;Do not write an equals method depending on unreliable resources.&lt;/li&gt;
&lt;li&gt;Non-nullity: all objects must be unequal to null.&lt;/li&gt;
&lt;li&gt;A high quality equals method: use == to check if the argument is a reference to this object. Use the instanceof operator to check if the argument has the correct type; Cast the argument to the correct type. For each significant field in the class, check if that field of the argument matches the corresponding field of this object.&lt;/li&gt;
&lt;li&gt;When finished writing equals method, check if it is symmetric, transitive and consistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-9-Always-override-hashCode-when-you-override-equals&quot;&gt;&lt;a href=&quot;#Item-9-Always-override-hashCode-when-you-override-equals&quot; class=&quot;headerlink&quot; title=&quot;Item 9. Always override hashCode when you override equals&quot;&gt;&lt;/a&gt;Item 9. Always override hashCode when you override equals&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Do not try to be too clever.&lt;/li&gt;
&lt;li&gt;Do not substitute another type for Object in the equals declaration.&lt;/li&gt;
&lt;li&gt;Equal objects must have equal hashcodes.&lt;/li&gt;
&lt;li&gt;Do not be tempted to exclude significant parts of an object from the hashcode computation to improve performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-10-Always-override-toString&quot;&gt;&lt;a href=&quot;#Item-10-Always-override-toString&quot; class=&quot;headerlink&quot; title=&quot;Item 10. Always override toString&quot;&gt;&lt;/a&gt;Item 10. Always override toString&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;It is recommended to override toString and even in subclasses.&lt;/li&gt;
&lt;li&gt;In practice, toString method should return all of the interesting information contained in the object.&lt;/li&gt;
&lt;li&gt;Whether or not decide to specify the format of toString return value, clearly document intentions, provide programmatic access to all of the information contained in the value returned by toString.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-1-Consider-static-factory-methods-instead-of-constructors&quot;&gt;&lt;a href=&quot;#Item-1-Consider-static-factory-methods-instead-of-construc
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
