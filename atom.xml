<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YBC HomePage</title>
  <subtitle>Study~ Work~ Life~ Everything is here~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yular.github.io/"/>
  <updated>2017-09-28T08:25:46.000Z</updated>
  <id>http://yular.github.io/</id>
  
  <author>
    <name>BaiChuan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reading Note of Effective Java II</title>
    <link href="http://yular.github.io/2017/09/27/Reading-Note-of-Effective-Java-II/"/>
    <id>http://yular.github.io/2017/09/27/Reading-Note-of-Effective-Java-II/</id>
    <published>2017-09-27T07:51:21.000Z</published>
    <updated>2017-09-28T08:25:46.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-11-Override-clone-judiciously&quot;&gt;&lt;a href=&quot;#Item-11-Override-clone-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 11. Override clone judiciously&quot;&gt;&lt;/a&gt;Item 11. Override clone judiciously&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Clone: creates an object without calling a constructor. x.clone() != x but x.clone().equals(x). But a well-behaved clone method should call constructor.&lt;/li&gt;
&lt;li&gt;If override the clone method in a nonfinal class, should return an object obtained by invoking super.clone().&lt;/li&gt;
&lt;li&gt;In practice, a class implemeneting Cloneable is expected to provide a properly functioning public clone method.&lt;/li&gt;
&lt;li&gt;clone method: never make the client do anything the library can do for the client.&lt;/li&gt;
&lt;li&gt;In effect, the clone method functions as another constructor; you must ensure that it does no harm to the original object and that it properly establishes invariants on the clone.&lt;/li&gt;
&lt;li&gt;The clone architecture is incompatible with normal use of final fields referring to mutable objects.&lt;/li&gt;
&lt;li&gt;Like a constructor, a clone method cannot invoke any nonfinal (overriden) methods on the clone under construction.&lt;/li&gt;
&lt;li&gt;A fine approach to object copying is to provide a copy constructor or copy factory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Item-12-Consider-implementing-Comparable&quot;&gt;&lt;a href=&quot;#Item-12-Consider-implementing-Comparable&quot; class=&quot;headerlink&quot; title=&quot;Item 12. Consider implementing Comparable&quot;&gt;&lt;/a&gt;Item 12. Consider implementing Comparable&lt;/h3&gt;&lt;h3 id=&quot;Item-13-Minimize-the-accessibility-of-classes-and-members&quot;&gt;&lt;a href=&quot;#Item-13-Minimize-the-accessibility-of-classes-and-members&quot; class=&quot;headerlink&quot; title=&quot;Item 13. Minimize the accessibility of classes and members&quot;&gt;&lt;/a&gt;Item 13. Minimize the accessibility of classes and members&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-11-Override-clone-judiciously&quot;&gt;&lt;a href=&quot;#Item-11-Override-clone-judiciously&quot; class=&quot;headerlink&quot; title=&quot;Item 11. Override clone 
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 9 New Features</title>
    <link href="http://yular.github.io/2017/09/23/Java-9-New-Features/"/>
    <id>http://yular.github.io/2017/09/23/Java-9-New-Features/</id>
    <published>2017-09-24T01:08:51.000Z</published>
    <updated>2017-09-24T01:35:18.000Z</updated>
    
    <content type="html">&lt;p&gt;Java 9 is released on Sep 21, 2017. Many new features are added and here is the complete list of new feature from &lt;a href=&quot;http://openjdk.java.net/projects/jdk9/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenJDK official page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(To be continue)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java 9 is released on Sep 21, 2017. Many new features are added and here is the complete list of new feature from &lt;a href=&quot;http://openjdk
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Test Driven Development</title>
    <link href="http://yular.github.io/2017/09/14/Thinking-in-Test-Driven-Development/"/>
    <id>http://yular.github.io/2017/09/14/Thinking-in-Test-Driven-Development/</id>
    <published>2017-09-15T05:26:09.000Z</published>
    <updated>2017-09-15T06:24:02.000Z</updated>
    
    <content type="html">&lt;p&gt;The book: Test Driven Development By Example, which is written by Kent Beck, is really a good book. I do not think currently I have already fully mastered the TDD skill and be able to apply this skill in my SDE job in the 100% right way. But I still would like to share my thoughts on this book.&lt;/p&gt;
&lt;p&gt;In my software development model, here are the steps to apply TDD in practice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fully understand the user requirement.&lt;/li&gt;
&lt;li&gt;Do a good design for the project, which includes the system design and object-oriented design.&lt;/li&gt;
&lt;li&gt;Based on the design, list all the features need to accomplish.&lt;/li&gt;
&lt;li&gt;Start with one of these features, write a test for it, then try to pass the test (fake it or provide the correct code), and refactor the test code and production code.&lt;/li&gt;
&lt;li&gt;While implement more and more features, refactor the production code (remove duplication, use inheritance, use interface and so on …). If any tests fail after refactor, figure out what is going wrong and fix the bug. Also remember to refactor the test code.&lt;/li&gt;
&lt;li&gt;While refactor the code, keep the code clean so that it is simple, easy to read and maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;p&gt;Here are some useful tips borrowed from the book.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a test list including all the required tests at the beginning.&lt;/li&gt;
&lt;li&gt;The goal of each test is to leave the world in exactly the same state before it ran.&lt;/li&gt;
&lt;li&gt;Each test should represent one step towards overall goal.&lt;/li&gt;
&lt;li&gt;What should be tested:&lt;ul&gt;
&lt;li&gt;Conditions&lt;/li&gt;
&lt;li&gt;Loops&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What factors should be included in the test:&lt;ul&gt;
&lt;li&gt;What does the operation belong to.&lt;/li&gt;
&lt;li&gt;What are the correct inputs.&lt;/li&gt;
&lt;li&gt;What is the correct output given those input.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some attributes of tests suggesting a design in trouble:&lt;ul&gt;
&lt;li&gt;Long setup code.&lt;/li&gt;
&lt;li&gt;Setup duplication.&lt;/li&gt;
&lt;li&gt;Long running tests.&lt;/li&gt;
&lt;li&gt;Fragile tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write assert first in the test.&lt;/li&gt;
&lt;li&gt;To improve test coverage, take a fixed set of tests and simplify the logic of the program.&lt;/li&gt;
&lt;li&gt;Avoid test coupling. All the tests should be run independently.&lt;/li&gt;
&lt;li&gt;Isolating tests also helps to decouple objects (Improve the design).&lt;/li&gt;
&lt;li&gt;Tests should be in a small scale instead of whole application.&lt;/li&gt;
&lt;li&gt;For common objects needed by several tests, convert local variables into instance variables.&lt;/li&gt;
&lt;li&gt;Use data that makes the test easy to read and follow.&lt;/li&gt;
&lt;li&gt;Evident data seems to be an exception to the rule that you do not want magic numbers in your code.&lt;/li&gt;
&lt;li&gt;When a defect is reported, write the smallest possible test that fails, and that once it runs, the defect will be repaired.&lt;/li&gt;
&lt;li&gt;To implement an operation that works with collections of objects, implement it without the collection first, then make it work with collections.&lt;/li&gt;
&lt;li&gt;To design objects that will be widely shared but for whom identify is unimportant, set their state when they are created and never change it, and operations on the object always return a new object.&lt;/li&gt;
&lt;li&gt;Always make sure all the tests are running before check in your own code.&lt;/li&gt;
&lt;li&gt;Unless have reason to distrust it, do not test code from others. &lt;/li&gt;
&lt;li&gt;toString method is an exception that does not require test.&lt;/li&gt;
&lt;li&gt;Physical setup (for working environment): cheap disk, nice chair.&lt;/li&gt;
&lt;li&gt;Get cheap/slow/old machines for individual email and surfing.&lt;/li&gt;
&lt;li&gt;Leave a programming session when programming alone, leave the last test broken.&lt;/li&gt;
&lt;li&gt;Leave a programming session when programming in a team, leave all the test running.&lt;/li&gt;
&lt;li&gt;Feel lost, throw away the code and start over.&lt;/li&gt;
&lt;li&gt;Feel tired or stuck, take a break.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The book: Test Driven Development By Example, which is written by Kent Beck, is really a good book. I do not think currently I have alrea
    
    </summary>
    
    
      <category term="Test" scheme="http://yular.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Aspect Oriented Programming</title>
    <link href="http://yular.github.io/2017/09/11/Aspect-Oriented-Programming/"/>
    <id>http://yular.github.io/2017/09/11/Aspect-Oriented-Programming/</id>
    <published>2017-09-11T08:51:57.000Z</published>
    <updated>2017-09-11T08:57:16.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspect-oriented programming in Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a “pointcut” specification, such as “log all function calls when the function’s name begins with ‘set’”. This allows behaviors that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality. AOP forms a basis for aspect-oriented software development.&lt;/p&gt;
&lt;p&gt;Note that AOP usually uses &lt;a href=&quot;http://yular.github.io/2017/09/10/Proxy-Pattern-In-Java/&quot;&gt;Proxy Pattern&lt;/a&gt; in its implementation.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspect-oriented programming in
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yular.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Proxy Pattern (In Java)</title>
    <link href="http://yular.github.io/2017/09/10/Proxy-Pattern-In-Java/"/>
    <id>http://yular.github.io/2017/09/10/Proxy-Pattern-In-Java/</id>
    <published>2017-09-11T00:02:49.000Z</published>
    <updated>2017-09-11T01:31:17.000Z</updated>
    
    <content type="html">&lt;p&gt;See the meaning of &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy in Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we know, when we visit a web service, we may not directly get the access of the hosts where the service is deployed but the hosts which sends the same or reasonable response as the service does. And those hosts are proxies.&lt;/p&gt;
&lt;p&gt;So in the design pattern, proxy pattern uses the similar mechanism. A class (proxy class) represents the functionality of the other class. Proxy class implements or extends the same interface or abstract class as the class proxied does, and proxy instance contains the instance proxied.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy Pattern in Wikipedia&lt;/a&gt;. The diagram there can help to understand the structure of this design pattern.&lt;/p&gt;
&lt;p&gt;Here is some sample code about Proxy Pattern.&lt;/p&gt;
&lt;h3 id=&quot;Sample-Code&quot;&gt;&lt;a href=&quot;#Sample-Code&quot; class=&quot;headerlink&quot; title=&quot;Sample Code&quot;&gt;&lt;/a&gt;Sample Code&lt;/h3&gt;&lt;p&gt;Here is the link of below &lt;a href=&quot;https://github.com/yular/Java-CodeLibrary/tree/master/DesignPattern/ProxyPattern/src/com/yulartech/designpattern/proxypattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Firt of all, here is the service interface:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface ImageService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then the real image service and proxy image service must implement this interface.&lt;/p&gt;
&lt;p&gt;Real image service source code is below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class RealImageService implements ImageService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RealImageService(String imageFileName)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.imageFileName = imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        upLoadImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void upLoadImage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final String msg = String.format(&amp;quot;Successfully upload image %s to the service.&amp;quot;, imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void showImage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final String msg = String.format(&amp;quot;Show the image %s.&amp;quot;, imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Proxy image service source code is below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ProxyImageService implements ImageService&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private RealImageService realImageService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private boolean isImageCached;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public ProxyImageService(String imageFileName)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.imageFileName = imageFileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.isImageCached = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void showImage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (realImageService == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            realImageService = new RealImageService(imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isImageCached) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final String msg = String.format(&amp;quot;Get image %s from cache in proxy. &amp;quot;, imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        realImageService.showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cacheImageInProxy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void cacheImageInProxy() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isImageCached = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;At last, implement a Main class to run the demo:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.yulartech.designpattern.proxypattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String imageFileName = &amp;quot;test-image.png&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ProxyImageService proxyImageService = new ProxyImageService(imageFileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //Show image from actual service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxyImageService.showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //Show image from proxy service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxyImageService.showImage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And if everything goes well, output should be:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Successfully upload image test-image.png to the service.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Show the image test-image.png.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Get image test-image.png from cache in proxy. Show the image test-image.png.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That means we can retrieve images from proxy in cache instead of actual image service: Proxy class just represents the functionality of the other class.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;See the meaning of &lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy in Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we know
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yular.github.io/tags/Design-Pattern/"/>
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java I</title>
    <link href="http://yular.github.io/2017/09/07/Reading-Note-of-Effective-Java-I/"/>
    <id>http://yular.github.io/2017/09/07/Reading-Note-of-Effective-Java-I/</id>
    <published>2017-09-07T08:00:28.000Z</published>
    <updated>2017-09-27T07:56:06.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Item-1-Consider-static-factory-methods-instead-of-constructors&quot;&gt;&lt;a href=&quot;#Item-1-Consider-static-factory-methods-instead-of-constructors&quot; class=&quot;headerlink&quot; title=&quot;Item 1. Consider static factory methods instead of constructors&quot;&gt;&lt;/a&gt;Item 1. Consider static factory methods instead of constructors&lt;/h3&gt;&lt;p&gt;Static factory method, which is different from regular factory pattern. With a well-chosen name is easier to use and the resulting client code easier to read. Not required to create a new object each time they are invoked, singleton factory for example. Can return an object of any subtype of their return type. Requires the client to refer to the returned object by its interface rather than its implementation class, which is generally good practice. Reduce the verbosity of creating parameterized type instances.&lt;/p&gt;
&lt;p&gt;But this pattern has some disadvantages. Main disadvantage is that classes without public or protected constructors cannot be subclassed. They are not readily distinguishable from other static methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters&quot;&gt;&lt;a href=&quot;#Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters&quot; class=&quot;headerlink&quot; title=&quot;Item 2. Consider a builder when faced with many constructor parameters.&quot;&gt;&lt;/a&gt;Item 2. Consider a builder when faced with many constructor parameters.&lt;/h3&gt;&lt;p&gt;Builder is a static class.&lt;/p&gt;
&lt;p&gt;The main disadvantage of a builder is that cost of creating builder is unlikely to be noticeable.&lt;/p&gt;
&lt;h3 id=&quot;Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type&quot;&gt;&lt;a href=&quot;#Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type&quot; class=&quot;headerlink&quot; title=&quot;Item 3. Enforce the singleton property with a private constructor or an enum type.&quot;&gt;&lt;/a&gt;Item 3. Enforce the singleton property with a private constructor or an enum type.&lt;/h3&gt;&lt;p&gt;Making a class a singleton can make it difficult to test its clients as it is impossible for mocking unless an interface is provided.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-4-Enforce-noninstantiability-with-a-private-constructor&quot;&gt;&lt;a href=&quot;#Item-4-Enforce-noninstantiability-with-a-private-constructor&quot; class=&quot;headerlink&quot; title=&quot;Item 4. Enforce noninstantiability with a private constructor.&quot;&gt;&lt;/a&gt;Item 4. Enforce noninstantiability with a private constructor.&lt;/h3&gt;&lt;p&gt;This kind of classes are utility class, which group static methods and static fields. Need to add comments on these classes.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-5-Avoid-creating-unnecessary-objects&quot;&gt;&lt;a href=&quot;#Item-5-Avoid-creating-unnecessary-objects&quot; class=&quot;headerlink&quot; title=&quot;Item 5. Avoid creating unnecessary objects.&quot;&gt;&lt;/a&gt;Item 5. Avoid creating unnecessary objects.&lt;/h3&gt;&lt;p&gt;Reuse a single object if possible. A reusable object should be immutable. And static factory methods are better choice to create reusable objects.&lt;/p&gt;
&lt;p&gt;So do not use following code:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = new String(&amp;quot;abc&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;but use:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = &amp;quot;abc&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Item-5-1-Prefer-primitives-to-boxed-primitives-and-watch-out-for-unintentional-autoboxing&quot;&gt;&lt;a href=&quot;#Item-5-1-Prefer-primitives-to-boxed-primitives-and-watch-out-for-unintentional-autoboxing&quot; class=&quot;headerlink&quot; title=&quot;Item 5.1 Prefer primitives to boxed primitives and watch out for unintentional autoboxing.&quot;&gt;&lt;/a&gt;Item 5.1 Prefer primitives to boxed primitives and watch out for unintentional autoboxing.&lt;/h4&gt;&lt;h4 id=&quot;Item-5-2-Defensive-copying-on-reusable-objects-may-cause-insidious-bugs-and-security-holes&quot;&gt;&lt;a href=&quot;#Item-5-2-Defensive-copying-on-reusable-objects-may-cause-insidious-bugs-and-security-holes&quot; class=&quot;headerlink&quot; title=&quot;Item 5.2 Defensive copying on reusable objects may cause insidious bugs and security holes.&quot;&gt;&lt;/a&gt;Item 5.2 Defensive copying on reusable objects may cause insidious bugs and security holes.&lt;/h4&gt;&lt;hr&gt;

&lt;h3 id=&quot;Item-6-Eliminate-obsolete-object-references-Otherwise-memory-leak-may-happen&quot;&gt;&lt;a href=&quot;#Item-6-Eliminate-obsolete-object-references-Otherwise-memory-leak-may-happen&quot; class=&quot;headerlink&quot; title=&quot;Item 6. Eliminate obsolete object references (Otherwise memory leak may happen)&quot;&gt;&lt;/a&gt;Item 6. Eliminate obsolete object references (Otherwise memory leak may happen)&lt;/h3&gt;&lt;p&gt;Two ways to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exception rather than norm: Null out references once they become obsolete.&lt;/li&gt;
&lt;li&gt;Best way: Let the variable containing the reference fall out of scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source of memory leak:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A class manages its own memory.&lt;/li&gt;
&lt;li&gt;Cache. Solution: use weak hashmap.&lt;/li&gt;
&lt;li&gt;Listeners and other callbacks: store only weak references to them, like keys in weak hashmap.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-7-Avoid-finalizers&quot;&gt;&lt;a href=&quot;#Item-7-Avoid-finalizers&quot; class=&quot;headerlink&quot; title=&quot;Item 7. Avoid finalizers&quot;&gt;&lt;/a&gt;Item 7. Avoid finalizers&lt;/h3&gt;&lt;p&gt;Finalizers are unpredictable, often dangerous and generally unnecessary. Avoid using finalizer() method in Java: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finalizer may not be executed promptly and finalizer queue can be low priority in some JVM environment.&lt;/li&gt;
&lt;li&gt;Never depends on a finalizer to update critical persistent state because program can terminate without executing finalizers.&lt;/li&gt;
&lt;li&gt;There is a severe performance penalty for using finalizer. Never do time critical tasks in finalizer().&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead, provide an explicit termination method. Explicit termination methods are typically used in combination with the try-finally construt to ensure termination.&lt;/p&gt;
&lt;p&gt;Finalizer can be used to log a warning if it finds that the resource has not been terminated.&lt;/p&gt;
&lt;p&gt;Finalizer can be used as a safety net in case of explicit termination methods are not called.&lt;/p&gt;
&lt;p&gt;Use finalizer to terminate noncritical native resources.&lt;/p&gt;
&lt;p&gt;Remember to invoke &lt;code&gt;super.finalize&lt;/code&gt; when have to use finalizer. &lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-8-Obey-the-general-contract-when-overriding-equals&quot;&gt;&lt;a href=&quot;#Item-8-Obey-the-general-contract-when-overriding-equals&quot; class=&quot;headerlink&quot; title=&quot;Item 8. Obey the general contract when overriding equals&quot;&gt;&lt;/a&gt;Item 8. Obey the general contract when overriding equals&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Each instance of the class is inherently unique.&lt;/li&gt;
&lt;li&gt;Do not care whether the class provides a logical equality test.&lt;/li&gt;
&lt;li&gt;A super class has already overriden equals and its behavior is appropriate for this class.&lt;/li&gt;
&lt;li&gt;The class is private or package-private, and you are certain that its equals methods will never be invoked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals method general contract:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reflexive: x.equals(x) must be true.&lt;/li&gt;
&lt;li&gt;Symmetric: x.equals(y) is true then y.equals(x) must be true.&lt;/li&gt;
&lt;li&gt;Transitive: x.equals(y) and y.equals(z) are true then x.equals(z) is true.&lt;/li&gt;
&lt;li&gt;Consitent: x.equals(y) is the same result always unless object is modified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Liskov substitution principle says that any important property of a type should also hold for its subtypes so that any methods written for the type should work equally well on its subtypes.&lt;/p&gt;
&lt;p&gt;Important notes to write equals method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can add a value component to a subclass of an abstract class without violating the equals contract.&lt;/li&gt;
&lt;li&gt;Do not write an equals method depending on unreliable resources.&lt;/li&gt;
&lt;li&gt;Non-nullity: all objects must be unequal to null.&lt;/li&gt;
&lt;li&gt;A high quality equals method: use == to check if the argument is a reference to this object. Use the instanceof operator to check if the argument has the correct type; Cast the argument to the correct type. For each significant field in the class, check if that field of the argument matches the corresponding field of this object.&lt;/li&gt;
&lt;li&gt;When finished writing equals method, check if it is symmetric, transitive and consistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-9-Always-override-hashCode-when-you-override-equals&quot;&gt;&lt;a href=&quot;#Item-9-Always-override-hashCode-when-you-override-equals&quot; class=&quot;headerlink&quot; title=&quot;Item 9. Always override hashCode when you override equals&quot;&gt;&lt;/a&gt;Item 9. Always override hashCode when you override equals&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Do not try to be too clever.&lt;/li&gt;
&lt;li&gt;Do not substitute another type for Object in the equals declaration.&lt;/li&gt;
&lt;li&gt;Equal objects must have equal hashcodes.&lt;/li&gt;
&lt;li&gt;Do not be tempted to exclude significant parts of an object from the hashcode computation to improve performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Item-10-Always-override-toString&quot;&gt;&lt;a href=&quot;#Item-10-Always-override-toString&quot; class=&quot;headerlink&quot; title=&quot;Item 10. Always override toString&quot;&gt;&lt;/a&gt;Item 10. Always override toString&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;It is recommended to override toString and even in subclasses.&lt;/li&gt;
&lt;li&gt;In practice, toString method should return all of the interesting information contained in the object.&lt;/li&gt;
&lt;li&gt;Whether or not decide to specify the format of toString return value, clearly document intentions, provide programmatic access to all of the information contained in the value returned by toString.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Item-1-Consider-static-factory-methods-instead-of-constructors&quot;&gt;&lt;a href=&quot;#Item-1-Consider-static-factory-methods-instead-of-construc
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Java in a Nutshell</title>
    <link href="http://yular.github.io/2017/09/07/Reading-Note-of-Java-in-a-Nutshell/"/>
    <id>http://yular.github.io/2017/09/07/Reading-Note-of-Java-in-a-Nutshell/</id>
    <published>2017-09-07T07:48:01.000Z</published>
    <updated>2017-09-07T07:48:01.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux Text Processing Command I</title>
    <link href="http://yular.github.io/2017/09/04/Linux-Text-Processing-Command-I/"/>
    <id>http://yular.github.io/2017/09/04/Linux-Text-Processing-Command-I/</id>
    <published>2017-09-05T05:21:45.000Z</published>
    <updated>2017-09-05T05:50:50.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort&quot;&gt;&lt;/a&gt;sort&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File sort utility, often used as a filter in a pipe.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;tsort&quot;&gt;&lt;a href=&quot;#tsort&quot; class=&quot;headerlink&quot; title=&quot;tsort&quot;&gt;&lt;/a&gt;tsort&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Topological sort.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;uniq&quot;&gt;&lt;a href=&quot;#uniq&quot; class=&quot;headerlink&quot; title=&quot;uniq&quot;&gt;&lt;/a&gt;uniq&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Remove duplicate lines from a sorted file.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;expand-unexpand&quot;&gt;&lt;a href=&quot;#expand-unexpand&quot; class=&quot;headerlink&quot; title=&quot;expand, unexpand&quot;&gt;&lt;/a&gt;expand, unexpand&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;expand: a filter converting tabs to spaces. Ofen used in a pipe.&lt;/li&gt;
&lt;li&gt;unexpand: reverse effect of expand.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;cut&quot;&gt;&lt;a href=&quot;#cut&quot; class=&quot;headerlink&quot; title=&quot;cut&quot;&gt;&lt;/a&gt;&lt;strong&gt;cut&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Widely used for text processing.&lt;/li&gt;
&lt;li&gt;A tool for extracting fields from files. Can be used in a pipe.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;paste&quot;&gt;&lt;a href=&quot;#paste&quot; class=&quot;headerlink&quot; title=&quot;paste&quot;&gt;&lt;/a&gt;&lt;strong&gt;paste&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Tool for merging together different files into a single, multi-column file.&lt;/li&gt;
&lt;li&gt;When combining with &lt;code&gt;cut&lt;/code&gt;, useful for creating system log files.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;join&quot;&gt;&lt;a href=&quot;#join&quot; class=&quot;headerlink&quot; title=&quot;join&quot;&gt;&lt;/a&gt;&lt;strong&gt;join&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Tool for merging two files in a meaningful fashion, creating a simple version of relational database.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;head&quot;&gt;&lt;a href=&quot;#head&quot; class=&quot;headerlink&quot; title=&quot;head&quot;&gt;&lt;/a&gt;&lt;strong&gt;head&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Lists the begining of a file to &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;tail&quot;&gt;&lt;a href=&quot;#tail&quot; class=&quot;headerlink&quot; title=&quot;tail&quot;&gt;&lt;/a&gt;&lt;strong&gt;tail&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List the end of a file to &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;-f&lt;/code&gt; option, useful for monitoring system.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;grep&quot;&gt;&lt;a href=&quot;#grep&quot; class=&quot;headerlink&quot; title=&quot;grep&quot;&gt;&lt;/a&gt;&lt;strong&gt;grep&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A multi-purpose file search tool that uses Regular Expressions.&lt;/li&gt;
&lt;li&gt;Command pattern: grep pattern [files …]&lt;/li&gt;
&lt;li&gt;Very useful in pipe.&lt;/li&gt;
&lt;li&gt;-i: a case sensitive search.&lt;/li&gt;
&lt;li&gt;-w: matches only whole words.&lt;/li&gt;
&lt;li&gt;-r: searches files recursively.&lt;/li&gt;
&lt;li&gt;-n: lists the matching lines.&lt;/li&gt;
&lt;li&gt;-v: filters out matches.&lt;/li&gt;
&lt;li&gt;-c: gives a numerical count of matches.&lt;/li&gt;
&lt;li&gt;–color: marks the matching string in color.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;agrep&quot;&gt;&lt;a href=&quot;#agrep&quot; class=&quot;headerlink&quot; title=&quot;agrep&quot;&gt;&lt;/a&gt;&lt;strong&gt;agrep&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Approximate grep, extending the capabilities of &lt;code&gt;grep&lt;/code&gt; to approximate matching.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;look&quot;&gt;&lt;a href=&quot;#look&quot; class=&quot;headerlink&quot; title=&quot;look&quot;&gt;&lt;/a&gt;look&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Works like &lt;code&gt;grep&lt;/code&gt;, but does a look up on a “dictionary”, a sorted word list in &lt;code&gt;/usr/dict/words&lt;/code&gt; by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;sed&quot;&gt;&lt;a href=&quot;#sed&quot; class=&quot;headerlink&quot; title=&quot;sed&quot;&gt;&lt;/a&gt;&lt;strong&gt;sed&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Non-interactive stream editor, permitting using many ex commands in batch mode.&lt;/li&gt;
&lt;li&gt;Useful in shell scripts and pipe.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;awk&quot;&gt;&lt;a href=&quot;#awk&quot; class=&quot;headerlink&quot; title=&quot;awk&quot;&gt;&lt;/a&gt;&lt;strong&gt;awk&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Programmable file extractor and formatter, good for manipulating and/or extracting fields(columns) in structured text files. Has syntax similar to C.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;wc&quot;&gt;&lt;a href=&quot;#wc&quot; class=&quot;headerlink&quot; title=&quot;wc&quot;&gt;&lt;/a&gt;wc&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Give a “word count” on a file or I/O stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;tr&quot;&gt;&lt;a href=&quot;#tr&quot; class=&quot;headerlink&quot; title=&quot;tr&quot;&gt;&lt;/a&gt;&lt;strong&gt;tr&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Character translation filter.&lt;/li&gt;
&lt;li&gt;Must use quoting and/or brackets as appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;fold&quot;&gt;&lt;a href=&quot;#fold&quot; class=&quot;headerlink&quot; title=&quot;fold&quot;&gt;&lt;/a&gt;fold&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A filter that wraps lines of input to a specified width.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;fmt&quot;&gt;&lt;a href=&quot;#fmt&quot; class=&quot;headerlink&quot; title=&quot;fmt&quot;&gt;&lt;/a&gt;fmt&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Simple-minded file formatter, used as a filter in a pipe to wrap long lines of text output.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;col&quot;&gt;&lt;a href=&quot;#col&quot; class=&quot;headerlink&quot; title=&quot;col&quot;&gt;&lt;/a&gt;col&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;column&quot;&gt;&lt;a href=&quot;#column&quot; class=&quot;headerlink&quot; title=&quot;column&quot;&gt;&lt;/a&gt;column&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Column formatter.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;colrm&quot;&gt;&lt;a href=&quot;#colrm&quot; class=&quot;headerlink&quot; title=&quot;colrm&quot;&gt;&lt;/a&gt;colrm&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Column removal filter.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;nl&quot;&gt;&lt;a href=&quot;#nl&quot; class=&quot;headerlink&quot; title=&quot;nl&quot;&gt;&lt;/a&gt;nl&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Line numbering filter.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;pr&quot;&gt;&lt;a href=&quot;#pr&quot; class=&quot;headerlink&quot; title=&quot;pr&quot;&gt;&lt;/a&gt;pr&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Print formatting filter.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;gettext&quot;&gt;&lt;a href=&quot;#gettext&quot; class=&quot;headerlink&quot; title=&quot;gettext&quot;&gt;&lt;/a&gt;gettext&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A set of utilities for localizing and translating the text output of programs into foreign languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;msgfmt&quot;&gt;&lt;a href=&quot;#msgfmt&quot; class=&quot;headerlink&quot; title=&quot;msgfmt&quot;&gt;&lt;/a&gt;msgfmt&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;iconv&quot;&gt;&lt;a href=&quot;#iconv&quot; class=&quot;headerlink&quot; title=&quot;iconv&quot;&gt;&lt;/a&gt;iconv&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;recode&quot;&gt;&lt;a href=&quot;#recode&quot; class=&quot;headerlink&quot; title=&quot;recode&quot;&gt;&lt;/a&gt;recode&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;TeX-gs&quot;&gt;&lt;a href=&quot;#TeX-gs&quot; class=&quot;headerlink&quot; title=&quot;TeX,gs&quot;&gt;&lt;/a&gt;TeX,gs&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;texexec&quot;&gt;&lt;a href=&quot;#texexec&quot; class=&quot;headerlink&quot; title=&quot;texexec&quot;&gt;&lt;/a&gt;texexec&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;enscript&quot;&gt;&lt;a href=&quot;#enscript&quot; class=&quot;headerlink&quot; title=&quot;enscript&quot;&gt;&lt;/a&gt;enscript&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;groff-tbl-eqn&quot;&gt;&lt;a href=&quot;#groff-tbl-eqn&quot; class=&quot;headerlink&quot; title=&quot;groff, tbl, eqn&quot;&gt;&lt;/a&gt;groff, tbl, eqn&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;lex-yacc&quot;&gt;&lt;a href=&quot;#lex-yacc&quot; class=&quot;headerlink&quot; title=&quot;lex, yacc&quot;&gt;&lt;/a&gt;lex, yacc&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Lexical analyzer commands.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort&quot;&gt;&lt;/a&gt;sort&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File sort utility, often used as a filter in a pipe.&lt;/li
    
    </summary>
    
    
      <category term="Linux" scheme="http://yular.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux System and Adminstrative Commands V</title>
    <link href="http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-V/"/>
    <id>http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-V/</id>
    <published>2017-09-05T05:11:11.000Z</published>
    <updated>2017-09-05T05:18:04.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;System-Resources&quot;&gt;&lt;a href=&quot;#System-Resources&quot; class=&quot;headerlink&quot; title=&quot;System Resources&quot;&gt;&lt;/a&gt;System Resources&lt;/h2&gt;&lt;h3 id=&quot;ulimit&quot;&gt;&lt;a href=&quot;#ulimit&quot; class=&quot;headerlink&quot; title=&quot;ulimit&quot;&gt;&lt;/a&gt;ulimit&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Set an upper limit on use of system resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;quota&quot;&gt;&lt;a href=&quot;#quota&quot; class=&quot;headerlink&quot; title=&quot;quota&quot;&gt;&lt;/a&gt;quota&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Display user or group disk quota.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;setquota&quot;&gt;&lt;a href=&quot;#setquota&quot; class=&quot;headerlink&quot; title=&quot;setquota&quot;&gt;&lt;/a&gt;setquota&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Set user or group disk quotas from command-line.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;umask&quot;&gt;&lt;a href=&quot;#umask&quot; class=&quot;headerlink&quot; title=&quot;umask&quot;&gt;&lt;/a&gt;umask&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;User file creation permission mask.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;rdev&quot;&gt;&lt;a href=&quot;#rdev&quot; class=&quot;headerlink&quot; title=&quot;rdev&quot;&gt;&lt;/a&gt;rdev&lt;/h3&gt;&lt;h2 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h2&gt;&lt;h3 id=&quot;lsmod&quot;&gt;&lt;a href=&quot;#lsmod&quot; class=&quot;headerlink&quot; title=&quot;lsmod&quot;&gt;&lt;/a&gt;lsmod&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List installed kernel modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;insmod&quot;&gt;&lt;a href=&quot;#insmod&quot; class=&quot;headerlink&quot; title=&quot;insmod&quot;&gt;&lt;/a&gt;insmod&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Force installation of a kernel module.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;rmmod&quot;&gt;&lt;a href=&quot;#rmmod&quot; class=&quot;headerlink&quot; title=&quot;rmmod&quot;&gt;&lt;/a&gt;rmmod&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;modprobe&quot;&gt;&lt;a href=&quot;#modprobe&quot; class=&quot;headerlink&quot; title=&quot;modprobe&quot;&gt;&lt;/a&gt;modprobe&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Module loader that is normally invoked automatically in a startup script.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;depmod&quot;&gt;&lt;a href=&quot;#depmod&quot; class=&quot;headerlink&quot; title=&quot;depmod&quot;&gt;&lt;/a&gt;depmod&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Creates module dependency file.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;modinfo&quot;&gt;&lt;a href=&quot;#modinfo&quot; class=&quot;headerlink&quot; title=&quot;modinfo&quot;&gt;&lt;/a&gt;modinfo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Output information about a loadable module.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h2 id=&quot;Miscellaneous&quot;&gt;&lt;a href=&quot;#Miscellaneous&quot; class=&quot;headerlink&quot; title=&quot;Miscellaneous&quot;&gt;&lt;/a&gt;Miscellaneous&lt;/h2&gt;&lt;h3 id=&quot;env&quot;&gt;&lt;a href=&quot;#env&quot; class=&quot;headerlink&quot; title=&quot;env&quot;&gt;&lt;/a&gt;env&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Runs a program or script with certain environmental variables set or changed without changing the overall system environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;ldd&quot;&gt;&lt;a href=&quot;#ldd&quot; class=&quot;headerlink&quot; title=&quot;ldd&quot;&gt;&lt;/a&gt;ldd&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;watch&quot;&gt;&lt;a href=&quot;#watch&quot; class=&quot;headerlink&quot; title=&quot;watch&quot;&gt;&lt;/a&gt;watch&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Run a command repeatedly at specified time intervals.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;strip&quot;&gt;&lt;a href=&quot;#strip&quot; class=&quot;headerlink&quot; title=&quot;strip&quot;&gt;&lt;/a&gt;strip&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;nm&quot;&gt;&lt;a href=&quot;#nm&quot; class=&quot;headerlink&quot; title=&quot;nm&quot;&gt;&lt;/a&gt;nm&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;xrandr&quot;&gt;&lt;a href=&quot;#xrandr&quot; class=&quot;headerlink&quot; title=&quot;xrandr&quot;&gt;&lt;/a&gt;xrandr&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;rdist&quot;&gt;&lt;a href=&quot;#rdist&quot; class=&quot;headerlink&quot; title=&quot;rdist&quot;&gt;&lt;/a&gt;rdist&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;System-Resources&quot;&gt;&lt;a href=&quot;#System-Resources&quot; class=&quot;headerlink&quot; title=&quot;System Resources&quot;&gt;&lt;/a&gt;System Resources&lt;/h2&gt;&lt;h3 id=&quot;ulimit&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux System and Adminstrative Commands IV</title>
    <link href="http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-IV/"/>
    <id>http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-IV/</id>
    <published>2017-09-05T02:40:54.000Z</published>
    <updated>2017-09-05T05:10:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Network&quot;&gt;&lt;a href=&quot;#Network&quot; class=&quot;headerlink&quot; title=&quot;Network&quot;&gt;&lt;/a&gt;Network&lt;/h2&gt;&lt;h3 id=&quot;nmap&quot;&gt;&lt;a href=&quot;#nmap&quot; class=&quot;headerlink&quot; title=&quot;nmap&quot;&gt;&lt;/a&gt;nmap&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Network mapper and port scanner.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;ifconfig&quot;&gt;&lt;a href=&quot;#ifconfig&quot; class=&quot;headerlink&quot; title=&quot;ifconfig&quot;&gt;&lt;/a&gt;ifconfig&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Network interface configuration and tuning utility.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;netstat&quot;&gt;&lt;a href=&quot;#netstat&quot; class=&quot;headerlink&quot; title=&quot;netstat&quot;&gt;&lt;/a&gt;netstat&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show current network statistics and information, such as routing tables and active connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;iwconfig&quot;&gt;&lt;a href=&quot;#iwconfig&quot; class=&quot;headerlink&quot; title=&quot;iwconfig&quot;&gt;&lt;/a&gt;iwconfig&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Command set of wireless network configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;ip&quot;&gt;&lt;a href=&quot;#ip&quot; class=&quot;headerlink&quot; title=&quot;ip&quot;&gt;&lt;/a&gt;ip&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Utility for setting up, changing, and analyzing IP networks and attached devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;route&quot;&gt;&lt;a href=&quot;#route&quot; class=&quot;headerlink&quot; title=&quot;route&quot;&gt;&lt;/a&gt;route&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show info about or making changes to the kernel routing table.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;iptables&quot;&gt;&lt;a href=&quot;#iptables&quot; class=&quot;headerlink&quot; title=&quot;iptables&quot;&gt;&lt;/a&gt;iptables&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;chkconfig&quot;&gt;&lt;a href=&quot;#chkconfig&quot; class=&quot;headerlink&quot; title=&quot;chkconfig&quot;&gt;&lt;/a&gt;chkconfig&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Check network and system configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;tcpdump&quot;&gt;&lt;a href=&quot;#tcpdump&quot; class=&quot;headerlink&quot; title=&quot;tcpdump&quot;&gt;&lt;/a&gt;tcpdump&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A tool for analyzing and troubleshooting traffic on a network by dumping packet headers matching specified criteria.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h2 id=&quot;Filesystem&quot;&gt;&lt;a href=&quot;#Filesystem&quot; class=&quot;headerlink&quot; title=&quot;Filesystem&quot;&gt;&lt;/a&gt;Filesystem&lt;/h2&gt;&lt;h3 id=&quot;mount&quot;&gt;&lt;a href=&quot;#mount&quot; class=&quot;headerlink&quot; title=&quot;mount&quot;&gt;&lt;/a&gt;mount&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Mount a filesystem, usually on an external device.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;unmount&quot;&gt;&lt;a href=&quot;#unmount&quot; class=&quot;headerlink&quot; title=&quot;unmount&quot;&gt;&lt;/a&gt;unmount&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;gnome-mount&quot;&gt;&lt;a href=&quot;#gnome-mount&quot; class=&quot;headerlink&quot; title=&quot;gnome-mount&quot;&gt;&lt;/a&gt;gnome-mount&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;sync&quot;&gt;&lt;a href=&quot;#sync&quot; class=&quot;headerlink&quot; title=&quot;sync&quot;&gt;&lt;/a&gt;sync&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Force an immediate write of all updated data from buffers to hard drive.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;losetup&quot;&gt;&lt;a href=&quot;#losetup&quot; class=&quot;headerlink&quot; title=&quot;losetup&quot;&gt;&lt;/a&gt;losetup&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Set up and configure loopback devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;mkswap&quot;&gt;&lt;a href=&quot;#mkswap&quot; class=&quot;headerlink&quot; title=&quot;mkswap&quot;&gt;&lt;/a&gt;mkswap&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;swapon-swapoff&quot;&gt;&lt;a href=&quot;#swapon-swapoff&quot; class=&quot;headerlink&quot; title=&quot;swapon, swapoff&quot;&gt;&lt;/a&gt;swapon, swapoff&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Enable/disable swap partition or file.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;mke2fs&quot;&gt;&lt;a href=&quot;#mke2fs&quot; class=&quot;headerlink&quot; title=&quot;mke2fs&quot;&gt;&lt;/a&gt;mke2fs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Create a Linux ext2 filesystem.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;mkdosfs&quot;&gt;&lt;a href=&quot;#mkdosfs&quot; class=&quot;headerlink&quot; title=&quot;mkdosfs&quot;&gt;&lt;/a&gt;mkdosfs&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;tune2fs&quot;&gt;&lt;a href=&quot;#tune2fs&quot; class=&quot;headerlink&quot; title=&quot;tune2fs&quot;&gt;&lt;/a&gt;tune2fs&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;dumpe2fs&quot;&gt;&lt;a href=&quot;#dumpe2fs&quot; class=&quot;headerlink&quot; title=&quot;dumpe2fs&quot;&gt;&lt;/a&gt;dumpe2fs&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;hdparm&quot;&gt;&lt;a href=&quot;#hdparm&quot; class=&quot;headerlink&quot; title=&quot;hdparm&quot;&gt;&lt;/a&gt;hdparm&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;fdisk&quot;&gt;&lt;a href=&quot;#fdisk&quot; class=&quot;headerlink&quot; title=&quot;fdisk&quot;&gt;&lt;/a&gt;fdisk&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;fsck-e2fsck-debugfs&quot;&gt;&lt;a href=&quot;#fsck-e2fsck-debugfs&quot; class=&quot;headerlink&quot; title=&quot;fsck, e2fsck, debugfs&quot;&gt;&lt;/a&gt;fsck, e2fsck, debugfs&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;badlocks&quot;&gt;&lt;a href=&quot;#badlocks&quot; class=&quot;headerlink&quot; title=&quot;badlocks&quot;&gt;&lt;/a&gt;badlocks&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;lsusb-usbmodules&quot;&gt;&lt;a href=&quot;#lsusb-usbmodules&quot; class=&quot;headerlink&quot; title=&quot;lsusb, usbmodules&quot;&gt;&lt;/a&gt;lsusb, usbmodules&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;lspci&quot;&gt;&lt;a href=&quot;#lspci&quot; class=&quot;headerlink&quot; title=&quot;lspci&quot;&gt;&lt;/a&gt;lspci&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;mkbootdisk&quot;&gt;&lt;a href=&quot;#mkbootdisk&quot; class=&quot;headerlink&quot; title=&quot;mkbootdisk&quot;&gt;&lt;/a&gt;mkbootdisk&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;mkisofs&quot;&gt;&lt;a href=&quot;#mkisofs&quot; class=&quot;headerlink&quot; title=&quot;mkisofs&quot;&gt;&lt;/a&gt;mkisofs&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;chroot&quot;&gt;&lt;a href=&quot;#chroot&quot; class=&quot;headerlink&quot; title=&quot;chroot&quot;&gt;&lt;/a&gt;chroot&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;lockfile&quot;&gt;&lt;a href=&quot;#lockfile&quot; class=&quot;headerlink&quot; title=&quot;lockfile&quot;&gt;&lt;/a&gt;lockfile&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;flock&quot;&gt;&lt;a href=&quot;#flock&quot; class=&quot;headerlink&quot; title=&quot;flock&quot;&gt;&lt;/a&gt;flock&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;mknod&quot;&gt;&lt;a href=&quot;#mknod&quot; class=&quot;headerlink&quot; title=&quot;mknod&quot;&gt;&lt;/a&gt;mknod&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;MAKEDEV&quot;&gt;&lt;a href=&quot;#MAKEDEV&quot; class=&quot;headerlink&quot; title=&quot;MAKEDEV&quot;&gt;&lt;/a&gt;MAKEDEV&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;tmpwatch&quot;&gt;&lt;a href=&quot;#tmpwatch&quot; class=&quot;headerlink&quot; title=&quot;tmpwatch&quot;&gt;&lt;/a&gt;tmpwatch&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;dump-restore&quot;&gt;&lt;a href=&quot;#dump-restore&quot; class=&quot;headerlink&quot; title=&quot;dump, restore&quot;&gt;&lt;/a&gt;dump, restore&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;fdformat&quot;&gt;&lt;a href=&quot;#fdformat&quot; class=&quot;headerlink&quot; title=&quot;fdformat&quot;&gt;&lt;/a&gt;fdformat&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Network&quot;&gt;&lt;a href=&quot;#Network&quot; class=&quot;headerlink&quot; title=&quot;Network&quot;&gt;&lt;/a&gt;Network&lt;/h2&gt;&lt;h3 id=&quot;nmap&quot;&gt;&lt;a href=&quot;#nmap&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux System and Adminstrative Commands III</title>
    <link href="http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-III/"/>
    <id>http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-III/</id>
    <published>2017-09-05T02:22:58.000Z</published>
    <updated>2017-09-05T02:41:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Job-Control&quot;&gt;&lt;a href=&quot;#Job-Control&quot; class=&quot;headerlink&quot; title=&quot;Job Control&quot;&gt;&lt;/a&gt;Job Control&lt;/h2&gt;&lt;h3 id=&quot;ps&quot;&gt;&lt;a href=&quot;#ps&quot; class=&quot;headerlink&quot; title=&quot;ps&quot;&gt;&lt;/a&gt;ps&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Process Statistics: list currently executing processes by owner and PID (process ID).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;pgrep-pkill&quot;&gt;&lt;a href=&quot;#pgrep-pkill&quot; class=&quot;headerlink&quot; title=&quot;pgrep, pkill&quot;&gt;&lt;/a&gt;pgrep, pkill&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Combining the ps command with grep or kill.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;pstree&quot;&gt;&lt;a href=&quot;#pstree&quot; class=&quot;headerlink&quot; title=&quot;pstree&quot;&gt;&lt;/a&gt;pstree&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List currently executing processes in &lt;code&gt;tree&lt;/code&gt; format.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;top&quot;&gt;&lt;a href=&quot;#top&quot; class=&quot;headerlink&quot; title=&quot;top&quot;&gt;&lt;/a&gt;top&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Continously updated display of most cpu-intensive processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;nice&quot;&gt;&lt;a href=&quot;#nice&quot; class=&quot;headerlink&quot; title=&quot;nice&quot;&gt;&lt;/a&gt;nice&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Run a background job with an altered priority.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;nohup&quot;&gt;&lt;a href=&quot;#nohup&quot; class=&quot;headerlink&quot; title=&quot;nohup&quot;&gt;&lt;/a&gt;nohup&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Keeps a command running even after user logs off.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;pidof&quot;&gt;&lt;a href=&quot;#pidof&quot; class=&quot;headerlink&quot; title=&quot;pidof&quot;&gt;&lt;/a&gt;pidof&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Identifies processID (PID) of a running job.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;fuser&quot;&gt;&lt;a href=&quot;#fuser&quot; class=&quot;headerlink&quot; title=&quot;fuser&quot;&gt;&lt;/a&gt;fuser&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Identify the process (by PID) accessing a given file, set of files or directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;cron&quot;&gt;&lt;a href=&quot;#cron&quot; class=&quot;headerlink&quot; title=&quot;cron&quot;&gt;&lt;/a&gt;cron&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Administrative program scheduler, performing such duties as cleaning up and deleting system log files and updating the slocate database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Process-Control-and-Booting&quot;&gt;&lt;a href=&quot;#Process-Control-and-Booting&quot; class=&quot;headerlink&quot; title=&quot;Process Control and Booting&quot;&gt;&lt;/a&gt;Process Control and Booting&lt;/h2&gt;&lt;h3 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;telinit&quot;&gt;&lt;a href=&quot;#telinit&quot; class=&quot;headerlink&quot; title=&quot;telinit&quot;&gt;&lt;/a&gt;telinit&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;runlevel&quot;&gt;&lt;a href=&quot;#runlevel&quot; class=&quot;headerlink&quot; title=&quot;runlevel&quot;&gt;&lt;/a&gt;runlevel&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Shows the current and last runlevel.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;halt-shutdown-reboot&quot;&gt;&lt;a href=&quot;#halt-shutdown-reboot&quot; class=&quot;headerlink&quot; title=&quot;halt, shutdown, reboot&quot;&gt;&lt;/a&gt;halt, shutdown, reboot&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;service&quot;&gt;&lt;a href=&quot;#service&quot; class=&quot;headerlink&quot; title=&quot;service&quot;&gt;&lt;/a&gt;service&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Starts or stops a system service.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Job-Control&quot;&gt;&lt;a href=&quot;#Job-Control&quot; class=&quot;headerlink&quot; title=&quot;Job Control&quot;&gt;&lt;/a&gt;Job Control&lt;/h2&gt;&lt;h3 id=&quot;ps&quot;&gt;&lt;a href=&quot;#ps&quot; class=&quot;head
    
    </summary>
    
    
      <category term="Linux" scheme="http://yular.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux System and Adminstrative Commands II</title>
    <link href="http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-II/"/>
    <id>http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-II/</id>
    <published>2017-09-05T02:06:10.000Z</published>
    <updated>2017-09-05T02:21:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Information-and-Statistics&quot;&gt;&lt;a href=&quot;#Information-and-Statistics&quot; class=&quot;headerlink&quot; title=&quot;Information and Statistics&quot;&gt;&lt;/a&gt;Information and Statistics&lt;/h2&gt;&lt;h3 id=&quot;uname&quot;&gt;&lt;a href=&quot;#uname&quot; class=&quot;headerlink&quot; title=&quot;uname&quot;&gt;&lt;/a&gt;uname&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;arch&quot;&gt;&lt;a href=&quot;#arch&quot; class=&quot;headerlink&quot; title=&quot;arch&quot;&gt;&lt;/a&gt;arch&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show system architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;lastcomm&quot;&gt;&lt;a href=&quot;#lastcomm&quot; class=&quot;headerlink&quot; title=&quot;lastcomm&quot;&gt;&lt;/a&gt;lastcomm&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Gives information of previous commands, as stored in the &lt;code&gt;/var/account/pacct&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;lastlog&quot;&gt;&lt;a href=&quot;#lastlog&quot; class=&quot;headerlink&quot; title=&quot;lastlog&quot;&gt;&lt;/a&gt;lastlog&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;lsof&quot;&gt;&lt;a href=&quot;#lsof&quot; class=&quot;headerlink&quot; title=&quot;lsof&quot;&gt;&lt;/a&gt;lsof&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List open files.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;strace&quot;&gt;&lt;a href=&quot;#strace&quot; class=&quot;headerlink&quot; title=&quot;strace&quot;&gt;&lt;/a&gt;strace&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;System trace: diagnostic and debugging tool for tracing system calls and signals.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;ltrace&quot;&gt;&lt;a href=&quot;#ltrace&quot; class=&quot;headerlink&quot; title=&quot;ltrace&quot;&gt;&lt;/a&gt;ltrace&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Library trace: diagnostic and debugging tool that traces library calls invoked by a given command.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;nc&quot;&gt;&lt;a href=&quot;#nc&quot; class=&quot;headerlink&quot; title=&quot;nc&quot;&gt;&lt;/a&gt;nc&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A complete toolkit for connecting to and listening to TCP and UDP ports.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;free&quot;&gt;&lt;a href=&quot;#free&quot; class=&quot;headerlink&quot; title=&quot;free&quot;&gt;&lt;/a&gt;free&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show memory and cache usage in tabular form.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;proinfo&quot;&gt;&lt;a href=&quot;#proinfo&quot; class=&quot;headerlink&quot; title=&quot;proinfo&quot;&gt;&lt;/a&gt;proinfo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Extract and list information and statistics from the &lt;code&gt;/proc&lt;/code&gt; pseudo-filesystem.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;lsdev&quot;&gt;&lt;a href=&quot;#lsdev&quot; class=&quot;headerlink&quot; title=&quot;lsdev&quot;&gt;&lt;/a&gt;lsdev&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List devices (installed hardware).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;du&quot;&gt;&lt;a href=&quot;#du&quot; class=&quot;headerlink&quot; title=&quot;du&quot;&gt;&lt;/a&gt;du&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show disk file usage recusively.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;df&quot;&gt;&lt;a href=&quot;#df&quot; class=&quot;headerlink&quot; title=&quot;df&quot;&gt;&lt;/a&gt;df&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show filesystem usage in tabular form.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;dmesg&quot;&gt;&lt;a href=&quot;#dmesg&quot; class=&quot;headerlink&quot; title=&quot;dmesg&quot;&gt;&lt;/a&gt;dmesg&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;stat&quot;&gt;&lt;a href=&quot;#stat&quot; class=&quot;headerlink&quot; title=&quot;stat&quot;&gt;&lt;/a&gt;stat&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Gives detailed and verbose statistics on a given file or set of files.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;vmstat&quot;&gt;&lt;a href=&quot;#vmstat&quot; class=&quot;headerlink&quot; title=&quot;vmstat&quot;&gt;&lt;/a&gt;vmstat&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show virtual memory statistics.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;uptime&quot;&gt;&lt;a href=&quot;#uptime&quot; class=&quot;headerlink&quot; title=&quot;uptime&quot;&gt;&lt;/a&gt;uptime&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show how long the system has been running.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;hostname&quot;&gt;&lt;a href=&quot;#hostname&quot; class=&quot;headerlink&quot; title=&quot;hostname&quot;&gt;&lt;/a&gt;hostname&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Lists the hostname of system.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;hostid&quot;&gt;&lt;a href=&quot;#hostid&quot; class=&quot;headerlink&quot; title=&quot;hostid&quot;&gt;&lt;/a&gt;hostid&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Echo a 32-bit hexadecimal numerical identifier for the host machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;sar&quot;&gt;&lt;a href=&quot;#sar&quot; class=&quot;headerlink&quot; title=&quot;sar&quot;&gt;&lt;/a&gt;sar&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;readelf&quot;&gt;&lt;a href=&quot;#readelf&quot; class=&quot;headerlink&quot; title=&quot;readelf&quot;&gt;&lt;/a&gt;readelf&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;size&quot;&gt;&lt;a href=&quot;#size&quot; class=&quot;headerlink&quot; title=&quot;size&quot;&gt;&lt;/a&gt;size&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show the segment sizes of a binary executable or archive file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;System-Logs&quot;&gt;&lt;a href=&quot;#System-Logs&quot; class=&quot;headerlink&quot; title=&quot;System Logs&quot;&gt;&lt;/a&gt;System Logs&lt;/h2&gt;&lt;h3 id=&quot;logger&quot;&gt;&lt;a href=&quot;#logger&quot; class=&quot;headerlink&quot; title=&quot;logger&quot;&gt;&lt;/a&gt;logger&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Append a user-generated message to the system log &lt;code&gt;/var/log/messages&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;logrotate&quot;&gt;&lt;a href=&quot;#logrotate&quot; class=&quot;headerlink&quot; title=&quot;logrotate&quot;&gt;&lt;/a&gt;logrotate&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Manage the system log files, rotating, compressing, deleting, and/or e-mailing them, as appropriate.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Information-and-Statistics&quot;&gt;&lt;a href=&quot;#Information-and-Statistics&quot; class=&quot;headerlink&quot; title=&quot;Information and Statistics&quot;&gt;&lt;/a&gt;Informat
    
    </summary>
    
    
      <category term="Linux" scheme="http://yular.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux System and Adminstrative Commands I</title>
    <link href="http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-I/"/>
    <id>http://yular.github.io/2017/09/04/Linux-System-and-Adminstrative-Commands-I/</id>
    <published>2017-09-05T01:44:41.000Z</published>
    <updated>2017-09-05T02:04:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Users-and-Groups&quot;&gt;&lt;a href=&quot;#Users-and-Groups&quot; class=&quot;headerlink&quot; title=&quot;Users and Groups&quot;&gt;&lt;/a&gt;Users and Groups&lt;/h2&gt;&lt;h3 id=&quot;users&quot;&gt;&lt;a href=&quot;#users&quot; class=&quot;headerlink&quot; title=&quot;users&quot;&gt;&lt;/a&gt;users&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show all logged on users.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;groups&quot;&gt;&lt;a href=&quot;#groups&quot; class=&quot;headerlink&quot; title=&quot;groups&quot;&gt;&lt;/a&gt;groups&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List the current user and the gourps s/he belongs to.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;chown-chgrp&quot;&gt;&lt;a href=&quot;#chown-chgrp&quot; class=&quot;headerlink&quot; title=&quot;chown, chgrp&quot;&gt;&lt;/a&gt;chown, chgrp&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;useradd-userdel&quot;&gt;&lt;a href=&quot;#useradd-userdel&quot; class=&quot;headerlink&quot; title=&quot;useradd, userdel&quot;&gt;&lt;/a&gt;useradd, userdel&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;usermod&quot;&gt;&lt;a href=&quot;#usermod&quot; class=&quot;headerlink&quot; title=&quot;usermod&quot;&gt;&lt;/a&gt;usermod&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Modify a useraccount’s password, group membership, expiration date and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;groupmod&quot;&gt;&lt;a href=&quot;#groupmod&quot; class=&quot;headerlink&quot; title=&quot;groupmod&quot;&gt;&lt;/a&gt;groupmod&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;id&quot;&gt;&lt;a href=&quot;#id&quot; class=&quot;headerlink&quot; title=&quot;id&quot;&gt;&lt;/a&gt;id&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Lists the real and effective user IDs and the group IDs of the user associated with the current process.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;lid&quot;&gt;&lt;a href=&quot;#lid&quot; class=&quot;headerlink&quot; title=&quot;lid&quot;&gt;&lt;/a&gt;lid&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Shows the group(s) a given user belongs to, or the users belonging to a given group.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;who&quot;&gt;&lt;a href=&quot;#who&quot; class=&quot;headerlink&quot; title=&quot;who&quot;&gt;&lt;/a&gt;who&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;w&quot;&gt;&lt;a href=&quot;#w&quot; class=&quot;headerlink&quot; title=&quot;w&quot;&gt;&lt;/a&gt;w&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;logname&quot;&gt;&lt;a href=&quot;#logname&quot; class=&quot;headerlink&quot; title=&quot;logname&quot;&gt;&lt;/a&gt;logname&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show current user’s login name.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;su&quot;&gt;&lt;a href=&quot;#su&quot; class=&quot;headerlink&quot; title=&quot;su&quot;&gt;&lt;/a&gt;su&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;sudo&quot;&gt;&lt;a href=&quot;#sudo&quot; class=&quot;headerlink&quot; title=&quot;sudo&quot;&gt;&lt;/a&gt;sudo&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;passwd&quot;&gt;&lt;a href=&quot;#passwd&quot; class=&quot;headerlink&quot; title=&quot;passwd&quot;&gt;&lt;/a&gt;passwd&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sets, changes, or manages a user’s password.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;ac&quot;&gt;&lt;a href=&quot;#ac&quot; class=&quot;headerlink&quot; title=&quot;ac&quot;&gt;&lt;/a&gt;ac&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show users’ logged in time.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;last&quot;&gt;&lt;a href=&quot;#last&quot; class=&quot;headerlink&quot; title=&quot;last&quot;&gt;&lt;/a&gt;last&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;List last logged in users.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;mewgrp&quot;&gt;&lt;a href=&quot;#mewgrp&quot; class=&quot;headerlink&quot; title=&quot;mewgrp&quot;&gt;&lt;/a&gt;mewgrp&lt;/h3&gt;&lt;hr&gt;

&lt;h2 id=&quot;Terminals&quot;&gt;&lt;a href=&quot;#Terminals&quot; class=&quot;headerlink&quot; title=&quot;Terminals&quot;&gt;&lt;/a&gt;Terminals&lt;/h2&gt;&lt;hr&gt;

&lt;h3 id=&quot;tty&quot;&gt;&lt;a href=&quot;#tty&quot; class=&quot;headerlink&quot; title=&quot;tty&quot;&gt;&lt;/a&gt;tty&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Echoes the terminal filename of current users’ terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;stty&quot;&gt;&lt;a href=&quot;#stty&quot; class=&quot;headerlink&quot; title=&quot;stty&quot;&gt;&lt;/a&gt;stty&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Shows and/or changes terminal settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;stterm&quot;&gt;&lt;a href=&quot;#stterm&quot; class=&quot;headerlink&quot; title=&quot;stterm&quot;&gt;&lt;/a&gt;stterm&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Set certain terminal attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;tset&quot;&gt;&lt;a href=&quot;#tset&quot; class=&quot;headerlink&quot; title=&quot;tset&quot;&gt;&lt;/a&gt;tset&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Show or initialize terminal settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;h3 id=&quot;setserial&quot;&gt;&lt;a href=&quot;#setserial&quot; class=&quot;headerlink&quot; title=&quot;setserial&quot;&gt;&lt;/a&gt;setserial&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;getty-agetty&quot;&gt;&lt;a href=&quot;#getty-agetty&quot; class=&quot;headerlink&quot; title=&quot;getty, agetty&quot;&gt;&lt;/a&gt;getty, agetty&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;mesg&quot;&gt;&lt;a href=&quot;#mesg&quot; class=&quot;headerlink&quot; title=&quot;mesg&quot;&gt;&lt;/a&gt;mesg&lt;/h3&gt;&lt;hr&gt;

&lt;h3 id=&quot;wall&quot;&gt;&lt;a href=&quot;#wall&quot; class=&quot;headerlink&quot; title=&quot;wall&quot;&gt;&lt;/a&gt;wall&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Sending a message to all users at every terminal logged into the network.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Users-and-Groups&quot;&gt;&lt;a href=&quot;#Users-and-Groups&quot; class=&quot;headerlink&quot; title=&quot;Users and Groups&quot;&gt;&lt;/a&gt;Users and Groups&lt;/h2&gt;&lt;h3 id=&quot;users&quot;&gt;&lt;a
    
    </summary>
    
    
      <category term="Linux" scheme="http://yular.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java Non Access Modifiers Summary</title>
    <link href="http://yular.github.io/2017/09/04/Java-Non-Access-Modifiers-Summary/"/>
    <id>http://yular.github.io/2017/09/04/Java-Non-Access-Modifiers-Summary/</id>
    <published>2017-09-04T22:13:27.000Z</published>
    <updated>2017-09-04T23:00:46.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is a short summary of Java non access modifiers, which include static, final, abstract, synchronized, transient and volatile. Here are the references: &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSL8&lt;/a&gt; and &lt;a href=&quot;https://www.tutorialspoint.com/java/java_nonaccess_modifiers.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Non Access Modifiers from TutorialsPoint&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id=&quot;Static-Modifier&quot;&gt;&lt;a href=&quot;#Static-Modifier&quot; class=&quot;headerlink&quot; title=&quot;Static Modifier&quot;&gt;&lt;/a&gt;Static Modifier&lt;/h3&gt;&lt;p&gt;Static modifier can be used as variable and method modifier.&lt;/p&gt;
&lt;h4 id=&quot;Static-Variable&quot;&gt;&lt;a href=&quot;#Static-Variable&quot; class=&quot;headerlink&quot; title=&quot;Static Variable&quot;&gt;&lt;/a&gt;Static Variable&lt;/h4&gt;&lt;p&gt;Static variables will exist independently for all the instances of the class. There is only one copy of every static variable in the memory. It is a kind of class variable and local variables cannot be declared static.&lt;/p&gt;
&lt;h4 id=&quot;Static-Method&quot;&gt;&lt;a href=&quot;#Static-Method&quot; class=&quot;headerlink&quot; title=&quot;Static Method&quot;&gt;&lt;/a&gt;Static Method&lt;/h4&gt;&lt;p&gt;Static methods will exist independently for all the instances of the class. Static methods can be used directly without any instance variables of any object of the class they are defined in.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Final-Modifier&quot;&gt;&lt;a href=&quot;#Final-Modifier&quot; class=&quot;headerlink&quot; title=&quot;Final Modifier&quot;&gt;&lt;/a&gt;Final Modifier&lt;/h3&gt;&lt;p&gt;Final modifier is used to finalize the implementation/creation of variales, methods, and classes.&lt;/p&gt;
&lt;h4 id=&quot;Final-Variable&quot;&gt;&lt;a href=&quot;#Final-Variable&quot; class=&quot;headerlink&quot; title=&quot;Final Variable&quot;&gt;&lt;/a&gt;Final Variable&lt;/h4&gt;&lt;p&gt;Every final variable can be explicitly initialized only once and then they cannot be reassigned to refer to a different object. But even though final variables use the same reference all the time, the value of their members can be changed.&lt;/p&gt;
&lt;p&gt;Usually, final and static modifiers are used together to define constants.&lt;/p&gt;
&lt;h4 id=&quot;Final-Method&quot;&gt;&lt;a href=&quot;#Final-Method&quot; class=&quot;headerlink&quot; title=&quot;Final Method&quot;&gt;&lt;/a&gt;Final Method&lt;/h4&gt;&lt;p&gt;Final methods cannot be overriddedn by any subclasses. It indicates that the content of these methods should not be changed by any clients.&lt;/p&gt;
&lt;h4 id=&quot;Final-Class&quot;&gt;&lt;a href=&quot;#Final-Class&quot; class=&quot;headerlink&quot; title=&quot;Final Class&quot;&gt;&lt;/a&gt;Final Class&lt;/h4&gt;&lt;p&gt;Final classes cannot be extended by other classes. It indicates that these classes should not be inherited.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Abstract-Modifier&quot;&gt;&lt;a href=&quot;#Abstract-Modifier&quot; class=&quot;headerlink&quot; title=&quot;Abstract Modifier&quot;&gt;&lt;/a&gt;Abstract Modifier&lt;/h3&gt;&lt;p&gt;Abstract modifier can be used for methods and classes, indicating &lt;code&gt;&amp;quot;change&amp;quot;&lt;/code&gt; the content of these methods or classes in subclasses.&lt;/p&gt;
&lt;h4 id=&quot;Abstract-Method&quot;&gt;&lt;a href=&quot;#Abstract-Method&quot; class=&quot;headerlink&quot; title=&quot;Abstract Method&quot;&gt;&lt;/a&gt;Abstract Method&lt;/h4&gt;&lt;p&gt;Abstract methods do not have method body and their implementation should be provided by subclasses. Abstract methods can never be final or strict.&lt;br&gt;If a class has one or more abstract methods, it must be declared as abstract.&lt;/p&gt;
&lt;h4 id=&quot;Abstract-Class&quot;&gt;&lt;a href=&quot;#Abstract-Class&quot; class=&quot;headerlink&quot; title=&quot;Abstract Class&quot;&gt;&lt;/a&gt;Abstract Class&lt;/h4&gt;&lt;p&gt;Abstract classes cannot be instantiated and they are designed for inheritance. Abstract classes can never be final and they can contain both abstract methods and normal methods.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Synchronized-Modifier&quot;&gt;&lt;a href=&quot;#Synchronized-Modifier&quot; class=&quot;headerlink&quot; title=&quot;Synchronized Modifier&quot;&gt;&lt;/a&gt;Synchronized Modifier&lt;/h3&gt;&lt;p&gt;Synchronized modifier can be used for methods and applied on variables (lock a specific variable). It indicates that these methods can be accessed by only one thread at a time. Synchronized modifier is widely used in concurrent situation.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Transient-Modifier&quot;&gt;&lt;a href=&quot;#Transient-Modifier&quot; class=&quot;headerlink&quot; title=&quot;Transient Modifier&quot;&gt;&lt;/a&gt;Transient Modifier&lt;/h3&gt;&lt;p&gt;Transient modifier can be used for variables. It indicates that JVM will skip these variables when it is serializing the objects containing them.&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Volatile-Modifier&quot;&gt;&lt;a href=&quot;#Volatile-Modifier&quot; class=&quot;headerlink&quot; title=&quot;Volatile Modifier&quot;&gt;&lt;/a&gt;Volatile Modifier&lt;/h3&gt;&lt;p&gt;Volatile modifier can be used for variables. It indicates that a thread accessing these variables must always merge its own copy of them with the master copy in the memory.&lt;br&gt;Volatile modifier can only be used for variables in instances, which are of type object or private. A volatile object reference can be null.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is a short summary of Java non access modifiers, which include static, final, abstract, synchronized, transient and volatile. Here a
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Test Driven Development by Example</title>
    <link href="http://yular.github.io/2017/08/06/Reading-Note-of-Test-Driven-Development-by-Example/"/>
    <id>http://yular.github.io/2017/08/06/Reading-Note-of-Test-Driven-Development-by-Example/</id>
    <published>2017-08-07T06:30:50.000Z</published>
    <updated>2017-09-15T06:22:20.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the summary of &lt;code&gt;Test Driven Development&lt;/code&gt; book.&lt;/p&gt;
&lt;h2 id=&quot;Overall-Rules&quot;&gt;&lt;a href=&quot;#Overall-Rules&quot; class=&quot;headerlink&quot; title=&quot;Overall Rules&quot;&gt;&lt;/a&gt;Overall Rules&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In Test-Driven Development, there are two basic rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write new code only if there is a failing automated test.&lt;/li&gt;
&lt;li&gt;Eliminate duplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The two rules above imply the order of tasks of programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red: Write a little test that does not work, even does not compile at first&lt;/li&gt;
&lt;li&gt;Green: Make the test work quickly, committing whatever sins necessary in the process&lt;/li&gt;
&lt;li&gt;Refactor: Eliminate all the duplication created in just getting the test to work&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The three basic steps of Test Driven Development are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start simply&lt;/li&gt;
&lt;li&gt;Write automated tests&lt;/li&gt;
&lt;li&gt;Refactor to add design decisions one at a time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two topics where TDD is not good at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security software&lt;/li&gt;
&lt;li&gt;Concurrency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rhythm of TDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly add a test&lt;/li&gt;
&lt;li&gt;Run all tests and see the new one fails&lt;/li&gt;
&lt;li&gt;Make a little change&lt;/li&gt;
&lt;li&gt;Run all tests and see them all succeed&lt;/li&gt;
&lt;li&gt;Refactor to remove duplication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Three ways to pass tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fake it.&lt;/li&gt;
&lt;li&gt;Obvious implementation.&lt;/li&gt;
&lt;li&gt;Translate a design object (side effects) into a test case that fails because of the objection, get the code to compile quickly with a stub implementation, made the test work by typing in what seemed like the right code. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Given a problem, first divide it to small independent problems, create tests for each of them, then do refactor on the code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Detailed-Rules&quot;&gt;&lt;a href=&quot;#Detailed-Rules&quot; class=&quot;headerlink&quot; title=&quot;Detailed Rules&quot;&gt;&lt;/a&gt;Detailed Rules&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Write new code only if you first have a failing automated test. Then eliminate the duplication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Could not tackle a big test, so invent a small test representing progress, write the test by shameless duplicating and editing, make the test work by copying and editing model code wholescale, promised ourselves to remove duplication.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the summary of &lt;code&gt;Test Driven Development&lt;/code&gt; book.&lt;/p&gt;
&lt;h2 id=&quot;Overall-Rules&quot;&gt;&lt;a href=&quot;#Overall-Rules&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Design Pattern Elements of Reusable Object-Oriented Software</title>
    <link href="http://yular.github.io/2017/08/05/Reading-Note-of-Design-Pattern-Elements-of-Reusable-Object-Oriented-Software/"/>
    <id>http://yular.github.io/2017/08/05/Reading-Note-of-Design-Pattern-Elements-of-Reusable-Object-Oriented-Software/</id>
    <published>2017-08-05T07:00:29.000Z</published>
    <updated>2017-09-10T23:56:03.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://yular.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Working Effectively with Legacy Code</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Working-Effectively-with-Legacy-Code/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Working-Effectively-with-Legacy-Code/</id>
    <published>2017-08-05T06:59:20.000Z</published>
    <updated>2017-08-07T06:40:25.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Code Complete</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Code-Complete/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Code-Complete/</id>
    <published>2017-08-05T06:54:08.000Z</published>
    <updated>2017-08-07T06:39:47.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Clean Code</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Clean-Code/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Clean-Code/</id>
    <published>2017-08-05T06:54:00.000Z</published>
    <updated>2017-09-25T08:31:44.000Z</updated>
    
    <content type="html">&lt;p&gt;Here is the overall summary of Clean Code priciples.&lt;/p&gt;
&lt;p&gt;优雅和高效的代码。代码逻辑直截了当，缺陷无处隐藏。尽量减少依赖关系便于维护。依据某种分层策略完善错误处理代码。性能调至最优。&lt;br&gt;减少重复代码，提高表达能力，提早构建简单抽象。&lt;br&gt;时时保持代码整洁（童子军军规：让营地比你来时更干净）。&lt;/p&gt;
&lt;h3 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;应该去除的注释:&lt;ul&gt;
&lt;li&gt;不恰当的信息&lt;/li&gt;
&lt;li&gt;废弃的注释&lt;/li&gt;
&lt;li&gt;冗余的注释&lt;/li&gt;
&lt;li&gt;糟糕的注释&lt;/li&gt;
&lt;li&gt;注释掉的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;应当能单个命令签出并构建系统。&lt;/li&gt;
&lt;li&gt;应当能单个命令运行全部测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;名称&quot;&gt;&lt;a href=&quot;#名称&quot; class=&quot;headerlink&quot; title=&quot;名称&quot;&gt;&lt;/a&gt;名称&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;采用描述性名称。要经常性地重新评估名称的正确性。&lt;/li&gt;
&lt;li&gt;名称要与抽象层级相符合（名称要反映类和函数的抽象层级）。&lt;/li&gt;
&lt;li&gt;尽可能使用标准命名法 (Google or Amazon)。&lt;/li&gt;
&lt;li&gt;名称无歧义。&lt;/li&gt;
&lt;li&gt;名称长度应和作用范围有关。名称越长作用范围越大。&lt;/li&gt;
&lt;li&gt;名称中避免使用编码（别用匈牙利语命名法）。&lt;/li&gt;
&lt;li&gt;名称中要说明副作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;输入参数尽量少。没参数最好，一个次之，两个再次，三个更次。三个以上应坚决避免。&lt;/li&gt;
&lt;li&gt;别输出输入参数。非要修改的话，则修改函数其所在对象的状态。&lt;/li&gt;
&lt;li&gt;布尔值输入(selector)参数宣告了函数不止做了一件事，会令人迷惑，应当消灭掉。&lt;/li&gt;
&lt;li&gt;死函数，也就是不被调用的函数，要坚决去掉。&lt;/li&gt;
&lt;li&gt;不能忽视安全（不一定指网络攻击，函数不做不合法输入的检测也算）。&lt;/li&gt;
&lt;li&gt;函数只做一件事。&lt;/li&gt;
&lt;li&gt;函数中的语句应该在同一个抽象层级上。&lt;/li&gt;
&lt;li&gt;别用算子参数（直接将结果赋值到一个变量然后用此变量作为函数参数才是对的）。&lt;/li&gt;
&lt;li&gt;别忽视不正确的边界行为。&lt;/li&gt;
&lt;li&gt;函数名称应传达其行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言&quot; class=&quot;headerlink&quot; title=&quot;语言&quot;&gt;&lt;/a&gt;语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽量减少源文件的语言数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;设计&quot;&gt;&lt;a href=&quot;#设计&quot; class=&quot;headerlink&quot; title=&quot;设计&quot;&gt;&lt;/a&gt;设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Do not repeat yourself (DRY). 别重复。&lt;/li&gt;
&lt;li&gt;别在错误的抽象层级上写代码。要有正确的抽象模型，较高层次抽象在基类，较低层次抽象在派生类（与实现细节有关），不同层级的概念要放入不同的容器当中。&lt;/li&gt;
&lt;li&gt;基类应当对派生类一无所知。若无法去除耦合，将基类和派生类部署到不同的jar中来实现物理解耦。&lt;/li&gt;
&lt;li&gt;接口需要的信息不能过多。比如需要调用过多的函数获得输入参数，从而导致耦合度过高。&lt;/li&gt;
&lt;li&gt;不互相依赖的东西或模块不该耦合，应当花时间研究声明函数，变量和常量的地方。&lt;/li&gt;
&lt;li&gt;变量和函数应在靠近被调用的地方定义，本地变量则在首次被使用的位置上声明。&lt;/li&gt;
&lt;li&gt;若使用静态函数，应确保它没有多态行为（函数名一样但输入输出不同）。&lt;/li&gt;
&lt;li&gt;用多态替代if/else和switch。&lt;/li&gt;
&lt;li&gt;把逻辑依赖改为物理依赖。依赖者模块不应对被依赖者模块有假定，它应当明确地询问后者全部信息。&lt;/li&gt;
&lt;li&gt;在较高层级放置可配置数据 （比如默认常量或配置值）。&lt;/li&gt;
&lt;li&gt;别混肴视听（比如实现了没被使用的方法）。&lt;/li&gt;
&lt;li&gt;保持代码的前后一致（比如命名规则一致）。&lt;/li&gt;
&lt;li&gt;代码出现的位置应是读者自然而然期待的地方（最小惊异原则）。&lt;/li&gt;
&lt;li&gt;函数或类应实现其他程序员有理由期待的行为（最小惊异原则）。&lt;/li&gt;
&lt;li&gt;尽量消除特性依赖（Guice DI算是例外）。类的方法只应对其所属类中的变量和函数感兴趣（内聚），而不要通过其他类的对象的访问器和修改器操作自己的内部数据。&lt;/li&gt;
&lt;li&gt;不掩盖时序耦合（也就是workflow函数要体现其调用的子函数之间的时序耦合关系）。好的方法是创建子函数调用顺序队伍，和将函数返回的变量作为接下来调用的子函数的输入参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;依赖和继承&quot;&gt;&lt;a href=&quot;#依赖和继承&quot; class=&quot;headerlink&quot; title=&quot;依赖和继承&quot;&gt;&lt;/a&gt;依赖和继承&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;别继承常量（用静态导入常量）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过重构（让代码更有表达力）和单元测试，来确认算法是正确的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;测试不足： 只要还有没被测试探测过的条件或者验证过的计算，测试就是不足够的。&lt;/li&gt;
&lt;li&gt;测试中使用覆盖率工具。&lt;/li&gt;
&lt;li&gt;别忽略小测试。被忽略的测试就是对不确定事物的疑问。&lt;/li&gt;
&lt;li&gt;测试边界条件（尤其是算法）。&lt;/li&gt;
&lt;li&gt;全面测试相近的缺陷。&lt;/li&gt;
&lt;li&gt;测试覆盖率的模式有启发性测试，应该快速出结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一般性问题&quot;&gt;&lt;a href=&quot;#一般性问题&quot; class=&quot;headerlink&quot; title=&quot;一般性问题&quot;&gt;&lt;/a&gt;一般性问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免使用否定性条件。&lt;/li&gt;
&lt;li&gt;避免传递浏览（遵守得墨忒定律，不提倡使用 a.getS().getG().getC()来调用方法C）。&lt;/li&gt;
&lt;li&gt;通过使用通配符避免过长的导入清单。&lt;/li&gt;
&lt;li&gt;遵循基于通用行业规范的一套编码标准。&lt;/li&gt;
&lt;li&gt;用变量命名代替魔术数（比如用常量表示魔术数）。&lt;/li&gt;
&lt;li&gt;用函数来封装条件（比如将if语句中的布尔逻辑抽象成函数）。&lt;/li&gt;
&lt;li&gt;别随意。构建代码需要理由且理由要与代码结构契合。不合理的结构就要修改，合理的则要保持和推广。&lt;/li&gt;
&lt;li&gt;封装边界条件。&lt;/li&gt;
&lt;li&gt;会用enum类型，尤其是在枚举情况下。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Here is the overall summary of Clean Code priciples.&lt;/p&gt;
&lt;p&gt;优雅和高效的代码。代码逻辑直截了当，缺陷无处隐藏。尽量减少依赖关系便于维护。依据某种分层策略完善错误处理代码。性能调至最优。&lt;br&gt;减少重复代码，提高表达
    
    </summary>
    
    
      <category term="Software Development" scheme="http://yular.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Reading Note of Effective Java</title>
    <link href="http://yular.github.io/2017/08/04/Reading-Note-of-Effective-Java/"/>
    <id>http://yular.github.io/2017/08/04/Reading-Note-of-Effective-Java/</id>
    <published>2017-08-05T06:53:29.000Z</published>
    <updated>2017-09-07T08:08:05.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Overall-Summary&quot;&gt;&lt;a href=&quot;#Overall-Summary&quot; class=&quot;headerlink&quot; title=&quot;Overall Summary&quot;&gt;&lt;/a&gt;Overall Summary&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Clarity and simplicity are important and users of a module should never be surprised by its behavior. &lt;/li&gt;
&lt;li&gt;Modules should be as small as possible but no smaller. &lt;/li&gt;
&lt;li&gt;Code should be reused rather than copied.&lt;/li&gt;
&lt;li&gt;The dependencies between modules should be kept to a minimum.&lt;/li&gt;
&lt;li&gt;Errors should be detected as soon as possible after they are made, ideally at compile time.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overall-Summary&quot;&gt;&lt;a href=&quot;#Overall-Summary&quot; class=&quot;headerlink&quot; title=&quot;Overall Summary&quot;&gt;&lt;/a&gt;Overall Summary&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Clarity and 
    
    </summary>
    
    
      <category term="Java" scheme="http://yular.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
